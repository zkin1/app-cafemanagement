{
  "src": {
    "app": {
      "admin-dashboard": {
        "admin-dashboard-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AdminDashboardPage } from './admin-dashboard.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminDashboardPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminDashboardPageRoutingModule {}\r\n",
        "admin-dashboard.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AdminDashboardPageRoutingModule } from './admin-dashboard-routing.module';\r\nimport { AdminDashboardPage } from './admin-dashboard.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AdminDashboardPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [AdminDashboardPage]\r\n})\r\nexport class AdminDashboardPageModule {}",
        "admin-dashboard.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Dashboard de Administrador</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h2>Bienvenido, {{ adminName }}</h2>\r\n  \r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Resumen</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <p>Ordenes de  hoy: {{ orderCount }}</p>\r\n      <p>Empleados activos: {{ activeEmployees }}</p>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-button expand=\"block\" routerLink=\"/crud\">Gestionar Menú</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/comandas\">Ver Órdenes</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/employee-management\">Gestionar Empleados</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/admin\">Reportes</ion-button>\r\n  <ion-button expand=\"block\" (click)=\"logout()\">Cerrar Sesión</ion-button>\r\n</ion-content>",
        "admin-dashboard.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  h2 {\r\n    color: #333;\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  ion-card {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    margin-bottom: 20px;\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: #f0f0f0;\r\n      border-bottom: 1px solid #e0e0e0;\r\n      \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n  \r\n      p {\r\n        margin: 8px 0;\r\n        font-size: 16px;\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 10px;\r\n    --background: #5c9ce5;\r\n    --background-hover: #4a90e2;\r\n    --color: #ffffff;\r\n    --border-radius: 8px;\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  ion-card, ion-button {\r\n    animation: fadeIn 0.5s ease-out;\r\n  }",
        "admin-dashboard.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { AdminDashboardPage } from './admin-dashboard.page';\r\n\r\ndescribe('AdminDashboardPage', () => {\r\n  let component: AdminDashboardPage;\r\n  let fixture: ComponentFixture<AdminDashboardPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AdminDashboardPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "admin-dashboard.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterLink, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-admin-dashboard',\r\n  templateUrl: './admin-dashboard.page.html',\r\n  styleUrls: ['./admin-dashboard.page.scss'],\r\n})\r\nexport class AdminDashboardPage implements OnInit {\r\n  adminName: string = 'Admin';\r\n  orderCount: number = 0;\r\n  activeEmployees: number = 0;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  loadDashboardData() {\r\n    this.adminName = (window as any).currentUser?.name || 'Admin';\r\n    this.orderCount = Math.floor(Math.random() * 50); \r\n    this.activeEmployees = Math.floor(Math.random() * 10); \r\n  }\r\n\r\n  logout() {\r\n    (window as any).currentUser = null;\r\n    this.router.navigate(['/login']);\r\n  }\r\n}"
      },
      "admin": {
        "admin-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AdminPage } from './admin.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminPageRoutingModule {}\r\n",
        "admin.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { AdminPageRoutingModule } from './admin-routing.module';\r\nimport { AdminPage } from './admin.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AdminPageRoutingModule\r\n  ],\r\n  declarations: [AdminPage]\r\n})\r\nexport class AdminPageModule {}",
        "admin.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>Dashboard</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h2>Estadísticas de Ventas</h2>\r\n\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Ventas Totales</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <h1>{{ totalSales | currency:'CLP':'symbol-narrow':'1.0-0' }}</h1>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Productos Más Vendidos</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <ion-list>\r\n        <ion-item *ngFor=\"let product of topProducts\">\r\n          <ion-label>{{ product.name }}</ion-label>\r\n          <ion-note slot=\"end\">{{ product.sales }} unidades</ion-note>\r\n        </ion-item>\r\n      </ion-list>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Ventas por Día</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <ion-list>\r\n        <ion-item *ngFor=\"let sale of dailySales\">\r\n          <ion-label>{{ sale.day }}</ion-label>\r\n          <ion-note slot=\"end\">{{ sale.amount | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n        </ion-item>\r\n      </ion-list>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-button expand=\"block\" routerLink=\"\">Generar reporte</ion-button>\r\n</ion-content>",
        "admin.page.scss": ":host {\r\n    --color-background: #ebf5fb;\r\n    --color-text: #1c2833;\r\n    --color-light: #f7f9f9;\r\n    --color-border: #E0D8D3;\r\n    --color-button: #1c2833;\r\n    --color-primary: #3498db;\r\n    --color-success: #2ecc71;\r\n    --color-warning: #f39c12;\r\n    --color-danger: #e74c3c;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--color-background);\r\n  }\r\n  \r\n  h2 {\r\n    color: var(--color-text);\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  ion-segment {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .users-section, .dashboard-section {\r\n    background-color: var(--color-light);\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-bottom: 20px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  form {\r\n    margin-bottom: 20px;\r\n  \r\n    ion-item {\r\n      --background: transparent;\r\n      --border-color: var(--color-border);\r\n      --highlight-height: 0;\r\n      margin-bottom: 10px;\r\n    }\r\n  \r\n    ion-button {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n  \r\n  ion-list {\r\n    background: transparent;\r\n  \r\n    ion-item-sliding {\r\n      background: var(--color-light);\r\n      margin-bottom: 10px;\r\n      border-radius: 5px;\r\n      overflow: hidden;\r\n    }\r\n  \r\n    ion-item {\r\n      --background: transparent;\r\n      --border-color: var(--color-border);\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 18px;\r\n      font-weight: 600;\r\n      color: var(--color-text);\r\n    }\r\n  \r\n    p {\r\n      font-size: 14px;\r\n      color: var(--color-text);\r\n      opacity: 0.7;\r\n    }\r\n  }\r\n  \r\n  .chart-container {\r\n    height: 300px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n  \r\n    .chart-container {\r\n      height: 200px;\r\n    }\r\n  }",
        "admin.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { AdminPage } from './admin.page';\r\n\r\ndescribe('AdminPage', () => {\r\n  let component: AdminPage;\r\n  let fixture: ComponentFixture<AdminPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AdminPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "admin.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\n\r\ninterface DailySale {\r\n  day: string;\r\n  amount: number;\r\n}\r\n\r\ninterface TopProduct {\r\n  name: string;\r\n  sales: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  templateUrl: './admin.page.html',\r\n  styleUrls: ['./admin.page.scss'],\r\n})\r\nexport class AdminPage implements OnInit {\r\n  totalSales: number = 0;\r\n  topProducts: TopProduct[] = [];\r\n  dailySales: DailySale[] = [];\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    await this.loadStatistics();\r\n  }\r\n\r\n  async loadStatistics() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando estadísticas...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      // Obtener ventas totales\r\n      const endDate = new Date();\r\n      const startDate = new Date();\r\n      startDate.setDate(startDate.getDate() - 30); // Últimos 30 días\r\n      this.totalSales = await this.databaseService.calculateTotalSales(\r\n        startDate.toISOString().split('T')[0],\r\n        endDate.toISOString().split('T')[0]\r\n      );\r\n\r\n      // Obtener productos más vendidos\r\n      const topSellingProducts = await this.databaseService.getTopSellingProducts(5);\r\n      this.topProducts = topSellingProducts.map(p => ({\r\n        name: p.name,\r\n        sales: p.totalSold\r\n      }));\r\n\r\n      // Obtener ventas por día\r\n      this.dailySales = await this.getDailySales(startDate, endDate);\r\n\r\n    } catch (error) {\r\n      console.error('Error al cargar estadísticas:', error);\r\n      this.presentToast('Error al cargar estadísticas. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async getDailySales(startDate: Date, endDate: Date): Promise<DailySale[]> {\r\n    const dailySales: DailySale[] = [];\r\n    let currentDate = new Date(startDate);\r\n    \r\n    while (currentDate <= endDate) {\r\n      const dayTotal = await this.databaseService.calculateTotalSales(\r\n        currentDate.toISOString().split('T')[0],\r\n        currentDate.toISOString().split('T')[0]\r\n      );\r\n      \r\n      dailySales.push({\r\n        day: currentDate.toLocaleDateString('es-ES', { weekday: 'long' }),\r\n        amount: dayTotal\r\n      });\r\n\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    return dailySales;\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  async generateReport() {\r\n    // Implementar la lógica para generar y descargar un informe detallado\r\n    this.presentToast('Funcionalidad de generación de informe aún no implementada');\r\n  }\r\n}"
      },
      "app-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'login',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () => import('./admin/admin.module').then( m => m.AdminPageModule)\r\n  },\r\n  {\r\n    path: 'admin-dashboard',\r\n    loadChildren: () => import('./admin-dashboard/admin-dashboard.module').then( m => m.AdminDashboardPageModule)\r\n  },\r\n  {\r\n    path: 'carro-compras',\r\n    loadChildren: () => import('./carro-compras/carro-compras.module').then( m => m.CarroComprasPageModule)\r\n  },\r\n  {\r\n    path: 'comandas',\r\n    loadChildren: () => import('./comandas/comandas.module').then( m => m.ComandasPageModule)\r\n  },\r\n  {\r\n    path: 'crud',\r\n    loadChildren: () => import('./crud/crud.module').then( m => m.CrudPageModule)\r\n  },\r\n  {\r\n    path: 'employee-dashboard',\r\n    loadChildren: () => import('./employee-dashboard/employee-dashboard.module').then( m => m.EmployeeDashboardPageModule)\r\n  },\r\n  {\r\n    path: 'employee-management',\r\n    loadChildren: () => import('./employee-management/employee-management.module').then( m => m.EmployeeManagementPageModule)\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () => import('./login/login.module').then( m => m.LoginPageModule)\r\n  },\r\n  {\r\n    path: 'main',\r\n    loadChildren: () => import('./main/main.module').then( m => m.MainPageModule)\r\n  },\r\n  {\r\n    path: 'perfil',\r\n    loadChildren: () => import('./perfil/perfil.module').then( m => m.PerfilPageModule)\r\n  },\r\n  {\r\n    path: 'register',\r\n    loadChildren: () => import('./register/register.module').then( m => m.RegisterPageModule)\r\n  },\r\n  {\r\n    path: 'not-found',\r\n    loadChildren: () => import('./not-found/not-found.module').then( m => m.NotFoundPageModule)\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'not-found',\r\n    pathMatch: 'full'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
      "app.component.html": "<ion-app>\r\n  <ion-header>\r\n    <ion-toolbar>\r\n      <ion-buttons slot=\"start\">\r\n        <ion-menu-button></ion-menu-button>\r\n      </ion-buttons>\r\n    </ion-toolbar>\r\n  </ion-header>\r\n\r\n  <ion-split-pane contentId=\"main-content\">\r\n    <ion-menu contentId=\"main-content\" type=\"overlay\">\r\n      <ion-content>\r\n        <ion-list id=\"inbox-list\">\r\n          <ion-list-header>Cafetería App</ion-list-header>\r\n          <ion-note *ngIf=\"isLoggedIn\">Bienvenido, {{ currentUserName }}</ion-note>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/main\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"home-outline\"></ion-icon>\r\n              <ion-label>Inicio</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/carro-compras\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"cart-outline\"></ion-icon>\r\n              <ion-label>Carrito</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/comandas\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"receipt-outline\"></ion-icon>\r\n              <ion-label>Comandas</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isAdmin\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/admin-dashboard\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon name=\"stats-chart-outline\"></ion-icon>\r\n              <ion-label>Dashboard Admin</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isEmployee\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/employee-dashboard\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon name=\"briefcase-outline\"></ion-icon>\r\n              <ion-label>Dashboard Empleado</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isAdmin\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/admin\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon name=\"briefcase-outline\"></ion-icon>\r\n              <ion-label>Reporte ventas</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"!isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/login\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"log-in-outline\"></ion-icon>\r\n              <ion-label>Iniciar Sesión</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"!isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/register\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"person-add-outline\"></ion-icon>\r\n              <ion-label>Registrarse</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/perfil\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"person-outline\"></ion-icon>\r\n              <ion-label>Perfil</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item lines=\"none\" (click)=\"logout()\">\r\n              <ion-icon slot=\"start\" name=\"log-out-outline\"></ion-icon>\r\n              <ion-label>Cerrar Sesión</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n        </ion-list>\r\n      </ion-content>\r\n    </ion-menu>\r\n    <ion-router-outlet id=\"main-content\"></ion-router-outlet>\r\n  </ion-split-pane>\r\n</ion-app>",
      "app.component.scss": "ion-menu {\r\n    --background: #ebf5fb;\r\n    --width: 280px;\r\n  \r\n    ion-content {\r\n      --background: #ebf5fb;\r\n    }\r\n  \r\n    ion-list {\r\n      background: transparent;\r\n      padding-top: 20px;\r\n    }\r\n  \r\n    ion-list-header {\r\n      --background: transparent;\r\n      color: #1c2833;\r\n      font-size: 24px;\r\n      font-weight: bold;\r\n      padding-bottom: 20px;\r\n      display: flex;\r\n      align-items: center;\r\n  \r\n      .menu-header-icon {\r\n        font-size: 28px;\r\n        margin-right: 10px;\r\n      }\r\n    }\r\n  \r\n    ion-note {\r\n      color: #4a4a4a;\r\n      font-size: 14px;\r\n      margin-bottom: 30px;\r\n      padding-left: 16px;\r\n    }\r\n  \r\n    ion-item {\r\n      --background: transparent;\r\n      --color: #1c2833;\r\n      --padding-start: 16px;\r\n      --padding-end: 16px;\r\n      --min-height: 50px;\r\n      margin-bottom: 5px;\r\n      border-radius: 0 25px 25px 0;\r\n      transition: background-color 0.3s ease;\r\n  \r\n      &.selected, &:hover {\r\n        --background: rgba(28, 40, 51, 0.1);\r\n      }\r\n    }\r\n  \r\n    ion-icon {\r\n      color: #1c2833;\r\n      margin-right: 20px;\r\n      font-size: 22px;\r\n    }\r\n  \r\n    ion-label {\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n  \r\n  ion-router-outlet {\r\n    --background: #ebf5fb;\r\n  }\r\n  \r\n  ion-menu-button {\r\n    color: #1c2833;\r\n  }\r\n  \r\n  // Animación para el contenido principal\r\n  @keyframes fadeInUp {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate3d(0, 30px, 0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate3d(0, 0, 0);\r\n    }\r\n  }\r\n  \r\n  ion-router-outlet {\r\n    animation: fadeInUp 0.5s ease-out;\r\n  }",
      "app.component.spec.ts": "import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { TestBed } from '@angular/core/testing';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\ndescribe('AppComponent', () => {\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      declarations: [AppComponent],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n    }).compileComponents();\r\n  });\r\n\r\n  it('should create the app', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app).toBeTruthy();\r\n  });\r\n\r\n});\r\n",
      "app.component.ts": "import { Component } from '@angular/core';\r\nimport { Platform } from '@ionic/angular';\r\nimport { DatabaseService } from './services/database.service';\r\nimport { Router } from '@angular/router';\r\nimport { addIcons } from 'ionicons';\r\nimport { \r\n  homeOutline, \r\n  cartOutline, \r\n  personOutline, \r\n  logInOutline, \r\n  personAddOutline,\r\n  settingsOutline,\r\n  logOutOutline,\r\n  statsChartOutline,\r\n  briefcaseOutline,\r\n  cafeOutline\r\n} from 'ionicons/icons';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(\r\n    private platform: Platform,\r\n    private databaseService: DatabaseService,\r\n    private router: Router\r\n  ) {\r\n    this.initializeApp();\r\n    addIcons({\r\n      homeOutline,\r\n      cartOutline,\r\n      personOutline,\r\n      logInOutline,\r\n      personAddOutline,\r\n      settingsOutline,\r\n      logOutOutline,\r\n      statsChartOutline,\r\n      briefcaseOutline,\r\n      cafeOutline\r\n    });\r\n  }\r\n\r\n  async initializeApp() {\r\n    await this.platform.ready();\r\n    try {\r\n      await this.databaseService.initializeDatabase();\r\n      // Verifica si ya existen datos antes de insertar\r\n      const users = await this.databaseService.getAllUsers();\r\n      if (users.length === 0) {\r\n        await this.databaseService.insertSeedData();\r\n      }\r\n      console.log('Database initialized and seeded successfully');\r\n    } catch (error) {\r\n      console.error('Error initializing database:', error);\r\n    }\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n\r\n  get isAdmin(): boolean {\r\n    const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n    return user.role === 'admin';\r\n  }\r\n\r\n  get isEmployee(): boolean {\r\n    const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n    return user.role === 'employee';\r\n  }\r\n\r\n  get currentUserName(): string | undefined {\r\n    const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n    return user.name;\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    this.router.navigate(['/login']);\r\n  }\r\n}",
      "app.module.ts": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouteReuseStrategy } from '@angular/router';\r\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { DatabaseService } from './services/database.service';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule],\r\n  providers: [{ provide: DatabaseService , useClass: IonicRouteStrategy  }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}",
      "carro-compras": {
        "carro-compras-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CarroComprasPage } from './carro-compras.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CarroComprasPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CarroComprasPageRoutingModule {}\r\n",
        "carro-compras.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CarroComprasPageRoutingModule } from './carro-compras-routing.module';\r\nimport { CarroComprasPage } from './carro-compras.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    CarroComprasPageRoutingModule\r\n  ],\r\n  declarations: [CarroComprasPage]\r\n})\r\nexport class CarroComprasPageModule {}",
        "carro-compras.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/main\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Orden #{{ currentOrder.orderNumber }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h1>Resumen de la Orden</h1>\r\n  \r\n  <ion-list class=\"cart-items\">\r\n    <ion-item *ngFor=\"let item of currentOrder.items\">\r\n      <ion-thumbnail slot=\"start\">\r\n        <img [src]=\"item.image\" [alt]=\"item.name\">\r\n      </ion-thumbnail>\r\n      <ion-label>\r\n        <h2>{{ item.name }}</h2>\r\n        <p>{{ item.selectedSize }}, leche de {{ item.selectedMilk }}</p>\r\n        <p>Cantidad: {{ item.quantity }}</p>\r\n      </ion-label>\r\n      <ion-note slot=\"end\" color=\"primary\">${{ (item.finalPrice * item.quantity).toFixed(0) }}</ion-note>\r\n    </ion-item>\r\n  </ion-list>\r\n  \r\n  <div class=\"order-details\">\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Número de Mesa</ion-label>\r\n      <ion-input type=\"number\" [(ngModel)]=\"currentOrder.tableNumber\"></ion-input>\r\n    </ion-item>\r\n    \r\n    <ion-item>\r\n      <ion-label position=\"floating\">Nota</ion-label>\r\n      <ion-textarea [(ngModel)]=\"currentOrder.notes\"></ion-textarea>\r\n    </ion-item>\r\n\r\n    <ion-item class=\"totalAmount\">\r\n      <ion-label>\r\n        <h2>Total</h2>\r\n      </ion-label>\r\n      <ion-note slot=\"end\" color=\"primary\">${{ calculateTotal().toFixed(0) }}</ion-note>\r\n    </ion-item>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-button expand=\"block\" (click)=\"confirmarOrden()\">Confirmar Orden</ion-button>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"bottom\"\r\n  color=\"success\"\r\n></ion-toast>",
        "carro-compras.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--ion-color-light);\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    color: var(--ion-color-dark);\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .cart-items {\r\n    background: transparent;\r\n  \r\n    ion-item {\r\n      --background: #ffffff;\r\n      --border-radius: 10px;\r\n      margin-bottom: 10px;\r\n      --padding-start: 0;\r\n  \r\n      ion-thumbnail {\r\n        --size: 80px;\r\n        --border-radius: 8px;\r\n        margin-right: 16px;\r\n      }\r\n  \r\n      ion-label {\r\n        h2 {\r\n          font-size: 18px;\r\n          font-weight: 600;\r\n          color: var(--ion-color-dark);\r\n        }\r\n  \r\n        p {\r\n          font-size: 14px;\r\n          color: var(--ion-color-medium);\r\n        }\r\n      }\r\n  \r\n      ion-note {\r\n        font-size: 16px;\r\n        font-weight: 600;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .order-details {\r\n    margin-top: 20px;\r\n  \r\n    ion-item {\r\n      --background: #ffffff;\r\n      --border-radius: 10px;\r\n      margin-bottom: 10px;\r\n    }\r\n  \r\n    .total {\r\n      --background: var(--ion-color-light);\r\n      font-weight: bold;\r\n  \r\n      ion-label h2 {\r\n        font-size: 18px;\r\n        color: var(--ion-color-dark);\r\n      }\r\n  \r\n      ion-note {\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-footer {\r\n    ion-toolbar {\r\n      --background: var(--ion-color-light);\r\n      --border-color: transparent;\r\n    }\r\n  \r\n    ion-button {\r\n      margin: 10px;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .cart-items ion-item {\r\n      ion-thumbnail {\r\n        --size: 60px;\r\n      }\r\n  \r\n      ion-label h2 {\r\n        font-size: 16px;\r\n      }\r\n  \r\n      ion-note {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  \r\n    .order-details .total {\r\n      ion-label h2, ion-note {\r\n        font-size: 16px;\r\n      }\r\n    }\r\n  }",
        "carro-compras.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { CarroComprasPage } from './carro-compras.page';\r\n\r\ndescribe('CarroComprasPage', () => {\r\n  let component: CarroComprasPage;\r\n  let fixture: ComponentFixture<CarroComprasPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(CarroComprasPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "carro-compras.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController, AlertController } from '@ionic/angular';\r\nimport { Order } from '../models/order.model';\r\nimport { OrderDetail } from '../models/order-detail.model';\r\n\r\ninterface CartItem {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image: string;\r\n  selectedSize: string;\r\n  selectedMilk: string;\r\n  quantity: number;\r\n  finalPrice: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-carro-compras',\r\n  templateUrl: './carro-compras.page.html',\r\n  styleUrls: ['./carro-compras.page.scss'],\r\n})\r\nexport class CarroComprasPage implements OnInit {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  \r\n  currentOrder: Order & { items: CartItem[] } = {\r\n    orderNumber: 0,\r\n    id: 0,\r\n    userId: 0,\r\n    tableNumber: null,\r\n    status: 'Solicitado',\r\n    notes: '',\r\n    totalAmount: 0,\r\n    paymentMethod: '',\r\n    items: []\r\n  };\r\n  currentOrderItems: CartItem[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadOrder();\r\n  }\r\n\r\n  loadOrder() {\r\n    const storedOrder = JSON.parse(localStorage.getItem('currentOrder') || 'null');\r\n    if (storedOrder) {\r\n      this.currentOrder.id = storedOrder.orderNumber;\r\n      this.currentOrder.items = storedOrder.items;\r\n      this.currentOrderItems = storedOrder.items;\r\n    } else {\r\n      this.router.navigate(['/main']);\r\n    }\r\n    this.calculateTotal();\r\n  }\r\n\r\n  calculateTotal(): number {\r\n    this.currentOrder.totalAmount = this.currentOrderItems.reduce((total, item) => total + (item.finalPrice * item.quantity), 0);\r\n    return this.currentOrder.totalAmount;\r\n  }\r\n\r\n  async updateQuantity(item: CartItem, change: number) {\r\n    item.quantity += change;\r\n    if (item.quantity <= 0) {\r\n      await this.removeItem(item);\r\n    } else {\r\n      this.calculateTotal();\r\n      this.updateLocalStorage();\r\n    }\r\n  }\r\n\r\n  async removeItem(item: CartItem) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar eliminación',\r\n      message: `¿Está seguro de que desea eliminar ${item.name} de su orden?`,\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Eliminar',\r\n          handler: () => {\r\n            const index = this.currentOrderItems.indexOf(item);\r\n            if (index > -1) {\r\n              this.currentOrderItems.splice(index, 1);\r\n              this.calculateTotal();\r\n              this.updateLocalStorage();\r\n              this.presentToast('Producto eliminado de la orden');\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  updateLocalStorage() {\r\n    localStorage.setItem('currentOrder', JSON.stringify({\r\n      orderNumber: this.currentOrder.id,\r\n      items: this.currentOrderItems\r\n    }));\r\n  }\r\n\r\n  async confirmarOrden() {\r\n    if (this.currentOrderItems.length === 0) {\r\n      await this.presentToast('No hay productos en la orden. Añada productos antes de confirmar.');\r\n      return;\r\n    }\r\n\r\n    // Asegurarse de que tableNumber tenga un valor antes de confirmar\r\n    if (this.currentOrder.tableNumber === null) {\r\n      await this.presentToast('Por favor, seleccione un número de mesa antes de confirmar la orden.');\r\n      return;\r\n    }\r\n\r\n    const loading = await this.loadingController.create({\r\n      message: 'Procesando orden...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      // Get the current user ID from localStorage\r\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n      this.currentOrder.userId = currentUser.id;\r\n\r\n      // Create the order in the database\r\n      const orderId = await this.databaseService.createOrder(this.currentOrder);\r\n\r\n      // Add order details\r\n      for (const item of this.currentOrderItems) {\r\n        const orderDetail: OrderDetail = {\r\n          orderId: orderId,\r\n          productId: item.id,\r\n          quantity: item.quantity,\r\n          size: item.selectedSize,\r\n          milkType: item.selectedMilk,\r\n          price: item.finalPrice\r\n        };\r\n        await this.databaseService.addProductToOrder(orderDetail);\r\n      }\r\n\r\n      await loading.dismiss();\r\n      await this.presentToast('Orden confirmada con éxito');\r\n      localStorage.removeItem('currentOrder');\r\n      this.router.navigate(['/main']);\r\n    } catch (error) {\r\n      console.error('Error al confirmar la orden:', error);\r\n      await loading.dismiss();\r\n      await this.presentToast('Error al confirmar la orden. Por favor, intente de nuevo.');\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 3000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n}"
      },
      "comandas": {
        "comandas-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ComandasPage } from './comandas.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ComandasPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ComandasPageRoutingModule {}\r\n",
        "comandas.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ComandasPageRoutingModule } from './comandas-routing.module';\r\nimport { ComandasPage } from './comandas.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ComandasPageRoutingModule\r\n  ],\r\n  declarations: [ComandasPage]\r\n})\r\nexport class ComandasPageModule {}",
        "comandas.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Comandas</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-card *ngFor=\"let orden of ordenes\" class=\"orden-card\">\r\n    <ion-card-header>\r\n      <ion-card-title>Orden #{{ orden.id }} - Mesa {{ orden.tableNumber }}</ion-card-title>\r\n      <ion-card-subtitle>\r\n        <ion-badge [color]=\"orden.status=== 'Solicitado' ? 'warning' : \r\n                            orden.status=== 'En proceso' ? 'primary' : \r\n                            orden.status=== 'Listo' ? 'success' : 'danger'\">\r\n          {{ orden.status}}\r\n        </ion-badge>\r\n      </ion-card-subtitle>\r\n    </ion-card-header>\r\n\r\n    <ion-card-content>\r\n      <div class=\"items-list\">\r\n        <p *ngFor=\"let item of orden.items\">\r\n          {{ item.name }} x{{ item.quantity }}\r\n          <span *ngIf=\"item.milkType || item.size\" class=\"item-details\">\r\n            ({{ item.size || 'Tamano estandar' }}\r\n            <ng-container *ngIf=\"item.milkType\">, leche {{ item.milkType }}</ng-container>)\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <p class=\"totalAmount\">totalAmount: {{ orden.totalAmount | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n      <p *ngIf=\"orden.notes\" class=\"notes\">\r\n        <ion-icon name=\"create-outline\"></ion-icon>\r\n        notes: {{ orden.notes }}\r\n      </p>\r\n    </ion-card-content>\r\n\r\n    <div class=\"action-buttons\">\r\n      <ion-button [disabled]=\"orden.status !== 'Solicitado'\" (click)=\"cambiarEstado(orden, 'En proceso')\" color=\"primary\">\r\n        En Proceso\r\n      </ion-button>\r\n      <ion-button [disabled]=\"orden.status !== 'En proceso'\" (click)=\"cambiarEstado(orden, 'Listo')\" color=\"success\">\r\n        Lista\r\n      </ion-button>\r\n      <ion-button [disabled]=\"orden.status === 'Cancelado'\" (click)=\"cambiarEstado(orden, 'Cancelado')\" color=\"danger\">\r\n        Cancelar\r\n      </ion-button>\r\n    </div>\r\n  </ion-card>\r\n</ion-content>\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"top\"\r\n  color=\"success\"\r\n></ion-toast>",
        "comandas.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--ion-color-light);\r\n  }\r\n  \r\n  .orden-card {\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: var(--ion-color-light);\r\n      padding: 16px;\r\n  \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: var(--ion-color-dark);\r\n      }\r\n  \r\n      ion-card-subtitle {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        margin-top: 8px;\r\n      }\r\n  \r\n      ion-badge {\r\n        font-size: 12px;\r\n        padding: 4px 8px;\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n  \r\n      .items-list {\r\n        margin-bottom: 12px;\r\n  \r\n        p {\r\n          margin: 8px 0;\r\n          font-size: 14px;\r\n          color: var(--ion-color-dark);\r\n  \r\n          .item-details {\r\n            font-size: 12px;\r\n            color: var(--ion-color-medium);\r\n            font-style: italic;\r\n            margin-left: 8px;\r\n          }\r\n        }\r\n      }\r\n  \r\n      .total {\r\n        font-weight: bold;\r\n        font-size: 16px;\r\n        color: var(--ion-color-dark);\r\n        margin-top: 12px;\r\n        border-top: 1px solid var(--ion-color-light);\r\n        padding-top: 12px;\r\n      }\r\n  \r\n      .nota {\r\n        font-style: italic;\r\n        font-size: 14px;\r\n        color: var(--ion-color-medium);\r\n        margin-top: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n  \r\n        ion-icon {\r\n          margin-right: 8px;\r\n          font-size: 18px;\r\n        }\r\n      }\r\n    }\r\n  \r\n    .action-buttons {\r\n      display: flex;\r\n      justify-content: space-around;\r\n      padding: 0 16px 16px;\r\n  \r\n      ion-button {\r\n        --border-radius: 20px;\r\n        font-size: 14px;\r\n        margin: 0 4px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .orden-card {\r\n      ion-card-header {\r\n        ion-card-title {\r\n          font-size: 16px;\r\n        }\r\n  \r\n        ion-badge {\r\n          font-size: 10px;\r\n        }\r\n      }\r\n  \r\n      ion-card-content {\r\n        .items-list p {\r\n          font-size: 13px;\r\n  \r\n          .item-details {\r\n            font-size: 11px;\r\n          }\r\n        }\r\n  \r\n        .total {\r\n          font-size: 15px;\r\n        }\r\n  \r\n        .nota {\r\n          font-size: 13px;\r\n        }\r\n      }\r\n  \r\n      .action-buttons {\r\n        flex-direction: column;\r\n        \r\n        ion-button {\r\n          margin-bottom: 8px;\r\n          font-size: 12px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; transform: translateY(20px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n  \r\n  .orden-card {\r\n    animation: fadeIn 0.3s ease-out;\r\n  }",
        "comandas.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { ComandasPage } from './comandas.page';\r\n\r\ndescribe('ComandasPage', () => {\r\n  let component: ComandasPage;\r\n  let fixture: ComponentFixture<ComandasPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(ComandasPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "comandas.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\nimport { Order } from '../models/order.model';\r\nimport { OrderDetail } from '../models/order-detail.model';\r\n\r\n@Component({\r\n  selector: 'app-comandas',\r\n  templateUrl: './comandas.page.html',\r\n  styleUrls: ['./comandas.page.scss'],\r\n})\r\nexport class ComandasPage implements OnInit {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  \r\n  ordenes: Order[] = [];\r\n  \r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    await this.cargarOrdenes();\r\n  }\r\n\r\n  async cargarOrdenes() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando órdenes...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      // Cargamos todas las órdenes que no estén en estado 'Entregado' o 'Cancelado'\r\n      this.ordenes = await this.databaseService.getOrdersByStatus(['Solicitado', 'En proceso', 'Listo']);\r\n      // Cargamos los detalles de cada orden\r\n      for (let orden of this.ordenes) {\r\n        orden.items = await this.databaseService.getOrderDetails(orden.id!);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al cargar órdenes:', error);\r\n      this.presentToast('Error al cargar órdenes. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async cambiarEstado(orden: Order, nuevoEstado: 'En proceso' | 'Listo' | 'Cancelado' | 'Entregado') {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Actualizando estado...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      await this.databaseService.updateOrderStatus(orden.id!, nuevoEstado);\r\n      orden.status = nuevoEstado;\r\n      this.presentToast(`Orden #${orden.id} actualizada a ${nuevoEstado}`);\r\n\r\n      // Si la orden se entrega o cancela, la removemos de la lista\r\n      if (nuevoEstado === 'Entregado' || nuevoEstado === 'Cancelado') {\r\n        this.ordenes = this.ordenes.filter(o => o.id !== orden.id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al actualizar estado de la orden:', error);\r\n      this.presentToast('Error al actualizar el estado. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  // Método para obtener el total de una orden\r\n  getOrderTotal(orden: Order): number {\r\n    return orden.items?.reduce((total, item) => total + (item.price * item.quantity), 0) || 0;\r\n  }\r\n}"
      },
      "crud": {
        "crud-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CrudPage } from './crud.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CrudPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CrudPageRoutingModule {}\r\n",
        "crud.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CrudPageRoutingModule } from './crud-routing.module';\r\nimport { CrudPage } from './crud.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    CrudPageRoutingModule\r\n  ],\r\n  declarations: [CrudPage]\r\n})\r\nexport class CrudPageModule {}",
        "crud.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/admin\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Gestión de Productos</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <div class=\"crud-menu\">\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('add')\" [class.active]=\"activeSection === 'add'\">\r\n      <ion-icon name=\"add-circle-outline\"></ion-icon>\r\n    </ion-button>\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('edit')\" [class.active]=\"activeSection === 'edit'\">\r\n      <ion-icon name=\"create-outline\"></ion-icon>\r\n    </ion-button>\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('delete')\" [class.active]=\"activeSection === 'delete'\">\r\n      <ion-icon name=\"trash-outline\"></ion-icon>\r\n    </ion-button>\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('view')\" [class.active]=\"activeSection === 'view'\">\r\n      <ion-icon name=\"list-outline\"></ion-icon>\r\n    </ion-button>\r\n  </div>\r\n\r\n  <!-- Agregar Producto -->\r\n  <div *ngIf=\"activeSection === 'add'\">\r\n    <h2>Agregar Producto</h2>\r\n    <form (ngSubmit)=\"addProduct()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Nombre</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.imageURL\" name=\"image\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Descripción</ion-label>\r\n        <ion-textarea [(ngModel)]=\"currentProduct.description\" name=\"description\" required></ion-textarea>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Precio</ion-label>\r\n        <ion-input type=\"number\" [(ngModel)]=\"currentProduct.price\" name=\"price\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">URL de la imagen</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.imageURL\" name=\"image\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\">Agregar Producto</ion-button>\r\n    </form>\r\n  </div>\r\n\r\n  <!-- Editar Producto -->\r\n  <div *ngIf=\"activeSection === 'edit'\">\r\n    <h2>Editar Producto</h2>\r\n    <form (ngSubmit)=\"updateProduct()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Nombre</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.name\" name=\"name\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Descripción</ion-label>\r\n        <ion-textarea [(ngModel)]=\"currentProduct.description\" name=\"description\" required></ion-textarea>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Precio</ion-label>\r\n        <ion-input type=\"number\" [(ngModel)]=\"currentProduct.price\" name=\"price\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">URL de la imagen</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.imageURL\" name=\"image\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\">Actualizar Producto</ion-button>\r\n    </form>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let product of products\">\r\n        <ion-thumbnail slot=\"start\">\r\n          <img [src]=\"product.imageURL\" [alt]=\"product.name\">\r\n        </ion-thumbnail>\r\n        <ion-label>\r\n          <h2>{{ product.name }}</h2>\r\n          <p>{{ product.description }}</p>\r\n          <p>Precio: {{ product.price | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n        </ion-label>\r\n        <ion-button slot=\"end\" (click)=\"editProduct(product)\">Editar</ion-button>\r\n      </ion-item>\r\n    </ion-list>\r\n\r\n  </div>\r\n\r\n  <!-- Eliminar Producto -->\r\n  <div *ngIf=\"activeSection === 'delete'\">\r\n    <h2>Eliminar Producto</h2>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let product of products\">\r\n        <ion-label>\r\n          <h2>{{ product.name }}</h2>\r\n          <p>Precio: {{ product.price | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n        </ion-label>\r\n        <ion-button slot=\"end\" color=\"danger\" (click)=\"deleteProduct(product.id ?? 0)\">Eliminar</ion-button>\r\n      </ion-item>\r\n    </ion-list>\r\n  </div>\r\n\r\n  <!-- Ver Productos -->\r\n  <div *ngIf=\"activeSection === 'view'\">\r\n    <h2>Lista de Productos</h2>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let product of products\">\r\n        <ion-thumbnail slot=\"start\">\r\n          <img [src]=\"product.imageURL\" [alt]=\"product.name\">\r\n        </ion-thumbnail>\r\n        <ion-label>\r\n          <h2>{{ product.name }}</h2>\r\n          <p>{{ product.description }}</p>\r\n          <p>Precio: {{ product.price | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n        </ion-label>\r\n        <ion-button slot=\"end\" (click)=\"editProduct(product)\">Editar</ion-button>\r\n      </ion-item>\r\n    </ion-list>\r\n  </div>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"bottom\"\r\ncolor=\"success\"\r\n></ion-toast>",
        "crud.page.scss": ".crud-menu {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    background-color: var(--ion-color-light);\r\n    border-radius: 15px;\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-button {\r\n      --padding-start: 10px;\r\n      --padding-end: 10px;\r\n  \r\n      &.active {\r\n        --background: var(--ion-color-primary);\r\n        --color: var(--ion-color-primary-contrast);\r\n      }\r\n  \r\n      ion-icon {\r\n        font-size: 24px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  form {\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-item {\r\n      --padding-start: 0;\r\n      --inner-padding-end: 0;\r\n      --background: transparent;\r\n  \r\n      &:not(:last-child) {\r\n        --border-color: var(--ion-color-light-shade);\r\n        --border-width: 0 0 1px 0;\r\n      }\r\n    }\r\n  \r\n    ion-button[type=\"submit\"] {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n  \r\n  h2 {\r\n    color: var(--ion-color-primary);\r\n    font-weight: bold;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  ion-list {\r\n    background: transparent;\r\n  \r\n    ion-item {\r\n      --background: white;\r\n      --border-radius: 10px;\r\n      margin-bottom: 10px;\r\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  \r\n      ion-thumbnail {\r\n        --size: 80px;\r\n        --border-radius: 10px;\r\n      }\r\n  \r\n      ion-label {\r\n        h2 {\r\n          font-weight: bold;\r\n          color: var(--ion-color-dark);\r\n        }\r\n  \r\n        p {\r\n          color: var(--ion-color-medium);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    --border-radius: 10px;\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  .crud-menu, form, ion-list {\r\n    animation: fadeIn 0.3s ease-in-out;\r\n  }",
        "crud.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { CrudPage } from './crud.page';\r\n\r\ndescribe('CrudPage', () => {\r\n  let component: CrudPage;\r\n  let fixture: ComponentFixture<CrudPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(CrudPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "crud.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { Product } from '../models/product.model';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { addIcons } from 'ionicons';\r\nimport { addCircleOutline, createOutline, trashOutline, listOutline } from 'ionicons/icons';\r\n\r\n@Component({\r\n  selector: 'app-crud',\r\n  templateUrl: './crud.page.html',\r\n  styleUrls: ['./crud.page.scss'],\r\n})\r\nexport class CrudPage implements OnInit {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  \r\n  products: Product[] = [];\r\n  currentProduct: Product = { id: 0, name: '', description: '', price: 0, category: '', imageURL: '', isAvailable: true };\r\n  isEditing = false;\r\n  activeSection: 'add' | 'edit' | 'delete' | 'view' = 'view';\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController\r\n  ) {\r\n    addIcons({ addCircleOutline, createOutline, trashOutline, listOutline });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadProducts();\r\n  }\r\n\r\n  async loadProducts() {\r\n    try {\r\n      this.products = await this.databaseService.getAllProducts();\r\n    } catch (error) {\r\n      console.error('Error loading products:', error);\r\n      this.presentToast('Error al cargar los productos');\r\n    }\r\n  }\r\n\r\n  async addProduct() {\r\n    try {\r\n      const newProductId = await this.databaseService.createProduct(this.currentProduct);\r\n      this.currentProduct.id = newProductId;\r\n      this.products.push({ ...this.currentProduct });\r\n      this.presentToast('Producto agregado con éxito');\r\n      this.resetForm();\r\n    } catch (error) {\r\n      console.error('Error adding product:', error);\r\n      this.presentToast('Error al agregar el producto');\r\n    }\r\n  }\r\n\r\n  async updateProduct() {\r\n    try {\r\n      await this.databaseService.updateProduct(this.currentProduct);\r\n      const index = this.products.findIndex(p => p.id === this.currentProduct.id);\r\n      if (index !== -1) {\r\n        this.products[index] = { ...this.currentProduct };\r\n      }\r\n      this.presentToast('Producto actualizado con éxito');\r\n      this.resetForm();\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      this.presentToast('Error al actualizar el producto');\r\n    }\r\n  }\r\n\r\n  async deleteProduct(id: number) {\r\n    try {\r\n      await this.databaseService.deleteProduct(id);\r\n      this.products = this.products.filter(p => p.id !== id);\r\n      this.presentToast('Producto eliminado con éxito');\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      this.presentToast('Error al eliminar el producto');\r\n    }\r\n  }\r\n\r\n  editProduct(product: Product) {\r\n    this.currentProduct = { ...product };\r\n    this.isEditing = true;\r\n    this.activeSection = 'edit';\r\n  }\r\n\r\n  resetForm() {\r\n    this.currentProduct = { id: 0, name: '', description: '', price: 0, category: '', imageURL: '', isAvailable: true };\r\n    this.isEditing = false;\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'bottom'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  setActiveSection(section: 'add' | 'edit' | 'delete' | 'view') {\r\n    this.activeSection = section;\r\n    if (section !== 'edit') {\r\n      this.resetForm();\r\n    }\r\n  }\r\n}"
      },
      "employee-dashboard": {
        "employee-dashboard-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeDashboardPage } from './employee-dashboard.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmployeeDashboardPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EmployeeDashboardPageRoutingModule {}\r\n",
        "employee-dashboard.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeDashboardPageRoutingModule } from './employee-dashboard-routing.module';\r\nimport { EmployeeDashboardPage } from './employee-dashboard.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    EmployeeDashboardPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [EmployeeDashboardPage]\r\n})\r\nexport class EmployeeDashboardPageModule {}",
        "employee-dashboard.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Dashboard de Empleado</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h2>Bienvenido, {{ employeeName }}</h2>\r\n  \r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Tu Resumen</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <p>Ordenes tomadas hoy: {{ ordersToday }}</p>\r\n      <p>Ordenes pendientes: {{ pendingOrders }}</p>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-button expand=\"block\" routerLink=\"/main\">Tomar Nueva Orden</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/comandas\">Ver Órdenes Actuales</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/perfil\">Mi Perfil</ion-button>\r\n  <ion-button expand=\"block\" (click)=\"logout()\">Cerrar Sesión</ion-button>\r\n</ion-content>",
        "employee-dashboard.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  h2 {\r\n    color: #333;\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  ion-card {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    margin-bottom: 20px;\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: #f0f0f0;\r\n      border-bottom: 1px solid #e0e0e0;\r\n      \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n  \r\n      p {\r\n        margin: 8px 0;\r\n        font-size: 16px;\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 10px;\r\n    --background: #5c9ce5;\r\n    --background-hover: #4a90e2;\r\n    --color: #ffffff;\r\n    --border-radius: 8px;\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  ion-card, ion-button {\r\n    animation: fadeIn 0.5s ease-out;\r\n  }",
        "employee-dashboard.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { EmployeeDashboardPage } from './employee-dashboard.page';\r\n\r\ndescribe('EmployeeDashboardPage', () => {\r\n  let component: EmployeeDashboardPage;\r\n  let fixture: ComponentFixture<EmployeeDashboardPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(EmployeeDashboardPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "employee-dashboard.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterLink, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-employee-dashboard',\r\n  templateUrl: './employee-dashboard.page.html',\r\n  styleUrls: ['./employee-dashboard.page.scss'],\r\n})\r\nexport class EmployeeDashboardPage implements OnInit {\r\n  employeeName: string = 'Empleado';\r\n  ordersToday: number = 0;\r\n  pendingOrders: number = 0;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.loadEmployeeData();\r\n  }\r\n\r\n  loadEmployeeData() {\r\n    this.employeeName = (window as any).currentUser?.name || 'Empleado';\r\n    this.ordersToday = Math.floor(Math.random() * 20); \r\n    this.pendingOrders = Math.floor(Math.random() * 5); \r\n  }\r\n\r\n  logout() {\r\n    (window as any).currentUser = null;\r\n    this.router.navigate(['/login']);\r\n  }\r\n}"
      },
      "employee-management": {
        "employee-management-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeManagementPage } from './employee-management.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmployeeManagementPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EmployeeManagementPageRoutingModule {}\r\n",
        "employee-management.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { EmployeeManagementPageRoutingModule } from './employee-management-routing.module';\r\nimport { EmployeeManagementPage } from './employee-management.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    EmployeeManagementPageRoutingModule\r\n  ],\r\n  declarations: [EmployeeManagementPage]\r\n})\r\nexport class EmployeeManagementPageModule {}",
        "employee-management.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/admin-dashboard\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Gestión de Empleados</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-list>\r\n    <ion-item *ngFor=\"let user of users\">\r\n      <ion-label>\r\n        <h2>{{ user.name }}</h2>\r\n        <p>{{ user.email }}</p>\r\n        <p>Rol: {{ user.role }}</p>\r\n      </ion-label>\r\n      <ion-button slot=\"end\" (click)=\"editUser(user)\">Editar</ion-button>\r\n    </ion-item>\r\n  </ion-list>\r\n\r\n  <ion-modal [isOpen]=\"!!editingUser\">\r\n    <ng-template>\r\n      <ion-header>\r\n        <ion-toolbar>\r\n          <ion-title>Editar Usuario</ion-title>\r\n          <ion-buttons slot=\"end\">\r\n            <ion-button (click)=\"cancelEdit()\">Cancelar</ion-button>\r\n          </ion-buttons>\r\n        </ion-toolbar>\r\n      </ion-header>\r\n      <ion-content class=\"ion-padding\">\r\n        <ion-item *ngIf=\"editingUser\">\r\n          <ion-label position=\"floating\">Nombre</ion-label>\r\n          <ion-input [(ngModel)]=\"editingUser.name\"></ion-input>\r\n        </ion-item>\r\n        <ion-item *ngIf=\"editingUser\">\r\n          <ion-label position=\"floating\">Email</ion-label>\r\n          <ion-input [(ngModel)]=\"editingUser.email\" type=\"email\"></ion-input>\r\n        </ion-item>\r\n        <ion-item *ngIf=\"editingUser\">\r\n          <ion-label>Rol</ion-label>\r\n          <ion-select [(ngModel)]=\"editingUser.role\">\r\n            <ion-select-option value=\"admin\">Admin</ion-select-option>\r\n            <ion-select-option value=\"empleado\">Empleado</ion-select-option>\r\n          </ion-select>\r\n        </ion-item>\r\n        <ion-button expand=\"block\" (click)=\"saveUser()\">Guardar Cambios</ion-button>\r\n      </ion-content>\r\n    </ng-template>\r\n  </ion-modal>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"top\"\r\ncolor=\"primary\"\r\n></ion-toast>",
        "employee-management.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--ion-color-light);\r\n  }\r\n  \r\n  ion-list {\r\n    background: transparent;\r\n  }\r\n  \r\n  ion-item {\r\n    --background: #ffffff;\r\n    border-radius: 10px;\r\n    margin-bottom: 10px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-label {\r\n      h2 {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: var(--ion-color-dark);\r\n      }\r\n  \r\n      p {\r\n        font-size: 14px;\r\n        color: var(--ion-color-medium);\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    --border-radius: 10px;\r\n  }\r\n  \r\n  ion-modal {\r\n    --background: var(--ion-color-light);\r\n  \r\n    ion-content {\r\n      --padding-top: 20px;\r\n      --padding-bottom: 20px;\r\n    }\r\n  \r\n    ion-item {\r\n      --background: #ffffff;\r\n      --border-color: var(--ion-color-medium);\r\n      --border-width: 1px;\r\n      --border-style: solid;\r\n      --border-radius: 10px;\r\n      margin-bottom: 15px;\r\n    }\r\n  \r\n    ion-button[expand=\"block\"] {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from { \r\n      opacity: 0;\r\n      transform: translateY(20px);\r\n    }\r\n    to { \r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  \r\n  ion-item, ion-button {\r\n    animation: fadeInUp 0.3s ease-out;\r\n  }",
        "employee-management.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { EmployeeManagementPage } from './employee-management.page';\r\n\r\ndescribe('EmployeeManagementPage', () => {\r\n  let component: EmployeeManagementPage;\r\n  let fixture: ComponentFixture<EmployeeManagementPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(EmployeeManagementPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "employee-management.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController, AlertController } from '@ionic/angular';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-employee-management',\r\n  templateUrl: './employee-management.page.html',\r\n  styleUrls: ['./employee-management.page.scss'],\r\n})\r\nexport class EmployeeManagementPage implements OnInit {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  users: User[] = [];\r\n  editingUser: User | null = null;\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    await this.loadUsers();\r\n  }\r\n\r\n  async loadUsers() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando empleados...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      this.users = await this.databaseService.getAllUsers();\r\n    } catch (error) {\r\n      console.error('Error al cargar empleados:', error);\r\n      this.presentToast('Error al cargar empleados. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async addUser() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Añadir Empleado',\r\n      inputs: [\r\n        { name: 'name', type: 'text', placeholder: 'Nombre' },\r\n        { name: 'email', type: 'email', placeholder: 'Email' },\r\n        { name: 'password', type: 'password', placeholder: 'Contraseña' },\r\n        {\r\n          type: 'radio',\r\n          label: 'Empleado',\r\n          value: 'employee',\r\n          name: 'role'\r\n        },\r\n        {\r\n          type: 'radio',\r\n          label: 'Admin',\r\n          value: 'admin',\r\n          name: 'role'\r\n        },\r\n        {\r\n          type: 'radio',\r\n          label: 'Manager',\r\n          value: 'manager',\r\n          name: 'role'\r\n        }\r\n      ],\r\n      buttons: [\r\n        { text: 'Cancelar', role: 'cancel' },\r\n        {\r\n          text: 'Añadir',\r\n          handler: async (data) => {\r\n            if (!data.name || !data.email || !data.password || !data.role) {\r\n              this.presentToast('Por favor, complete todos los campos');\r\n              return false; // Mantiene la alerta abierta\r\n            }\r\n  \r\n            const newUser: User = {\r\n              name: data.name,\r\n              email: data.email,\r\n              password: data.password,\r\n              role: data.role,\r\n              username: data.email // Usamos el email como username por simplicidad\r\n            };\r\n  \r\n            const loading = await this.loadingController.create({\r\n              message: 'Añadiendo empleado...',\r\n            });\r\n            await loading.present();\r\n  \r\n            try {\r\n              const userId = await this.databaseService.createUser(newUser);\r\n              newUser.id = userId;\r\n              this.users.push(newUser);\r\n              this.presentToast('Empleado añadido con éxito');\r\n              return true; // Cierra la alerta\r\n            } catch (error) {\r\n              console.error('Error al añadir empleado:', error);\r\n              this.presentToast('Error al añadir empleado. Por favor, intente de nuevo.');\r\n              return false; // Mantiene la alerta abierta en caso de error\r\n            } finally {\r\n              loading.dismiss();\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n  \r\n    await alert.present();\r\n  }\r\n\r\n  async editUser(user: User) {\r\n    this.editingUser = { ...user };\r\n  }\r\n\r\n  async saveUser() {\r\n    if (!this.editingUser) return;\r\n\r\n    const loading = await this.loadingController.create({\r\n      message: 'Guardando cambios...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      await this.databaseService.updateUser(this.editingUser);\r\n      const index = this.users.findIndex(u => u.id === this.editingUser!.id);\r\n      if (index !== -1) {\r\n        this.users[index] = { ...this.editingUser };\r\n      }\r\n      this.presentToast('Usuario actualizado con éxito');\r\n      this.editingUser = null;\r\n    } catch (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      this.presentToast('Error al actualizar usuario. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async deleteUser(user: User) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar eliminación',\r\n      message: `¿Está seguro de que desea eliminar a ${user.name}?`,\r\n      buttons: [\r\n        { text: 'Cancelar', role: 'cancel' },\r\n        {\r\n          text: 'Eliminar',\r\n          handler: async () => {\r\n            const loading = await this.loadingController.create({\r\n              message: 'Eliminando empleado...',\r\n            });\r\n            await loading.present();\r\n\r\n            try {\r\n              await this.databaseService.deleteUser(user.id!);\r\n              this.users = this.users.filter(u => u.id !== user.id);\r\n              this.presentToast('Empleado eliminado con éxito');\r\n            } catch (error) {\r\n              console.error('Error al eliminar empleado:', error);\r\n              this.presentToast('Error al eliminar empleado. Por favor, intente de nuevo.');\r\n            } finally {\r\n              loading.dismiss();\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.editingUser = null;\r\n  }\r\n}"
      },
      "login": {
        "login-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule {}\r\n",
        "login.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\nimport { LoginPage } from './login.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    LoginPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [LoginPage]\r\n})\r\nexport class LoginPageModule {}",
        "login.page.html": "<ion-content class=\"ion-padding\">\r\n  <div class=\"login-container\">\r\n    <h1>Bienvenido</h1>\r\n    <h2>Inicio de sesión</h2>\r\n    <form (ngSubmit)=\"onSubmit()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Correo</ion-label>\r\n        <ion-input type=\"email\" [(ngModel)]=\"email\" name=\"email\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Contraseña</ion-label>\r\n        <ion-input type=\"password\" [(ngModel)]=\"password\" name=\"password\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\">Iniciar sesión</ion-button>\r\n    </form>\r\n    <a class=\"forgot-password\">¿Olvidaste tu contraseña?</a>\r\n    <a [routerLink]=\"['/register']\" class=\"register-link\">Registrarse</a>\r\n  </div>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"top\"\r\ncolor=\"success\"\r\n></ion-toast>",
        "login.page.scss": ":host {\r\n    --ion-color-primary: #1c2833;\r\n    --ion-color-primary-rgb: 74, 144, 226;\r\n    --ion-color-primary-contrast: #ffffff;\r\n    --ion-color-primary-contrast-rgb: 255, 255, 255;\r\n    --ion-color-primary-shade: #417fc7;\r\n    --ion-color-primary-tint: #5c9ce5;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  }\r\n\r\n  .login-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    padding: 20px;\r\n    color: #4a4a4a;\r\n  }\r\n  \r\n  .logo {\r\n    width: 120px;\r\n    height: 120px;\r\n    margin-bottom: 40px;\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 2.5rem;\r\n    margin-bottom: 10px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  h2 {\r\n    font-size: 1.8rem;\r\n    margin-bottom: 30px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  form {\r\n    width: 100%;\r\n    max-width: 400px;\r\n  }\r\n  \r\n  ion-item {\r\n    --background: rgba(255, 255, 255, 0.1);\r\n    --border-color: rgba(255, 255, 255, 0.5);\r\n    --highlight-height: 0;\r\n    border-radius: 5px;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  ion-label {\r\n    color: #4a4a4a;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  ion-input {\r\n    --padding-start: 10px;\r\n    font-size: 16px;\r\n    --placeholder-color: #999;\r\n    --placeholder-opacity: 0.8;\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 30px;\r\n    height: 54px;\r\n    font-size: 18px;\r\n    text-transform: none;\r\n    --box-shadow: 0 4px 10px rgba(74, 144, 226, 0.3);\r\n    --border-radius: 27px;\r\n  }\r\n  \r\n  .forgot-password, .register-link {\r\n    margin-top: 20px;\r\n    color: var(--ion-color-primary-tint);\r\n    font-size: 16px;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    display: block;\r\n    \r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .logo {\r\n      width: 100px;\r\n      height: 100px;\r\n      margin-bottom: 30px;\r\n    }\r\n  \r\n    h1 {\r\n      font-size: 2rem;\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 24px;\r\n      margin-bottom: 25px;\r\n      color: var(--ion-color-primary-tint);\r\n    }\r\n    \r\n    ion-button {\r\n      font-size: 16px;\r\n      height: 50px;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate3d(0, 30px, 0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate3d(0, 0, 0);\r\n    }\r\n  }\r\n  \r\n  .login-container > * {\r\n    animation: fadeInUp 0.5s ease-out;\r\n    animation-fill-mode: both;\r\n  }\r\n  \r\n  .login-container > *:nth-child(1) { animation-delay: 0.1s; }\r\n  .login-container > *:nth-child(2) { animation-delay: 0.2s; }\r\n  .login-container > *:nth-child(3) { animation-delay: 0.3s; }\r\n  .login-container > *:nth-child(4) { animation-delay: 0.4s; }\r\n  .login-container > *:nth-child(5) { animation-delay: 0.5s; }",
        "login.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { LoginPage } from './login.page';\r\n\r\ndescribe('LoginPage', () => {\r\n  let component: LoginPage;\r\n  let fixture: ComponentFixture<LoginPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(LoginPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "login.page.ts": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  email: string = '';\r\n  password: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController\r\n  ) {}\r\n\r\n  async onSubmit() {\r\n    if (!this.email || !this.password) {\r\n      await this.presentToast('Por favor, ingrese email y contraseña.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const user = await this.databaseService.getUserByEmail(this.email);\r\n      if (user && user.password === this.password) {\r\n        await this.handleSuccessfulLogin(user);\r\n      } else {\r\n        await this.presentToast('Credenciales incorrectas. Por favor, intente de nuevo.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      await this.presentToast('Ocurrió un error durante el inicio de sesión. Por favor, intente de nuevo.');\r\n    }\r\n  }\r\n\r\n  private async handleSuccessfulLogin(user: User) {\r\n    // Remove sensitive information before storing\r\n    const { password, ...safeUserInfo } = user;\r\n    localStorage.setItem('currentUser', JSON.stringify(safeUserInfo));\r\n    \r\n    await this.databaseService.updateUserLastLogin(user.id!);\r\n    \r\n    await this.presentToast(`Bienvenido, ${user.name}!`);\r\n    \r\n    if (user.role === 'admin') {\r\n      this.router.navigate(['/admin-dashboard']);\r\n    } else {\r\n      this.router.navigate(['/employee-dashboard']);\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  forgotPassword() {\r\n    // Implement password recovery logic here\r\n    this.presentToast('Se ha enviado un correo con instrucciones para recuperar tu contraseña.');\r\n  }\r\n}"
      },
      "main": {
        "main-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { MainPage } from './main.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MainPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MainPageRoutingModule {}\r\n",
        "main.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { MainPageRoutingModule } from './main-routing.module';\r\nimport { MainPage } from './main.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    MainPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [MainPage]\r\n})\r\nexport class MainPageModule {}",
        "main.page.html": "<ion-header>\r\n\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>Menú - Orden #{{ currentOrderNumber }}</ion-title>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button routerLink=\"/carro-compras\">\r\n        <ion-icon name=\"cart-outline\"></ion-icon>\r\n        <ion-badge *ngIf=\"currentOrderItems.length > 0\">{{ currentOrderItems.length }}</ion-badge>\r\n      </ion-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n  <div class=\"menu-container\">\r\n    <ion-grid>\r\n      <ion-row>\r\n        <ion-col size=\"12\" size-md=\"6\" size-lg=\"4\" *ngFor=\"let product of products; let i = index\">\r\n          <ion-card class=\"product-card\">\r\n            <img [src]=\"product.imageURL\" [alt]=\"product.name\"/>\r\n            <ion-card-header>\r\n              <ion-card-title>{{ product.name }}</ion-card-title>\r\n            </ion-card-header>\r\n            <ion-card-content>\r\n              <p>{{ product.description }}</p>\r\n              <ion-text color=\"primary\">\r\n                <h2>{{ calculatePrice(product) | currency:'CLP':'symbol-narrow':'1.0-0' }}</h2>\r\n              </ion-text>\r\n              <ion-button expand=\"block\" (click)=\"toggleOptions(i)\">Personalizar y Añadir</ion-button>\r\n            </ion-card-content>\r\n          </ion-card>\r\n          \r\n          <ion-card *ngIf=\"product.showOptions\" class=\"options-card\" [@slideInOut]>\r\n            <ion-card-content>\r\n              <ion-item>\r\n                <ion-label>Tamaño</ion-label>\r\n                <ion-select [(ngModel)]=\"product.selectedSize\" (ionChange)=\"updatePrice(product)\" interface=\"popover\">\r\n                  <ion-select-option value=\"pequeño\">Pequeño (-$1.000)</ion-select-option>\r\n                  <ion-select-option value=\"medium\">Mediano</ion-select-option>\r\n                  <ion-select-option value=\"grande\">Grande (+$1.000)</ion-select-option>\r\n                </ion-select>\r\n              </ion-item>\r\n              <ion-item>\r\n                <ion-label>Tipo de leche</ion-label>\r\n                <ion-select [(ngModel)]=\"product.selectedMilk\" interface=\"popover\">\r\n                  <ion-select-option value=\"regular\">Regular</ion-select-option>\r\n                  <ion-select-option value=\"descremada\">Descremada</ion-select-option>\r\n                  <ion-select-option value=\"soya\">Soya</ion-select-option>\r\n                  <ion-select-option value=\"almendra\">Almendra</ion-select-option>\r\n                </ion-select>\r\n              </ion-item>\r\n              <ion-button expand=\"block\" (click)=\"addToCart(product)\">Añadir al Carrito</ion-button>\r\n            </ion-card-content>\r\n          </ion-card>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-button expand=\"block\" routerLink=\"/carro-compras\" [disabled]=\"currentOrderItems.length === 0\">\r\n      Completar Orden ({{ currentOrderItems.length }} items)\r\n    </ion-button>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"top\"\r\ncolor=\"primary\"\r\n></ion-toast>",
        "main.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  .menu-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .product-card {\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n  \r\n    img {\r\n      width: 100%;\r\n      height: 200px;\r\n      object-fit: cover;\r\n    }\r\n  \r\n    ion-card-header {\r\n      padding: 16px;\r\n    }\r\n  \r\n    ion-card-title {\r\n      font-size: 1.2rem;\r\n      font-weight: bold;\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 0 16px 16px;\r\n  \r\n      p {\r\n        font-size: 0.9rem;\r\n        color: var(--ion-color-medium);\r\n        margin-bottom: 10px;\r\n      }\r\n  \r\n      h2 {\r\n        font-size: 1.4rem;\r\n        font-weight: bold;\r\n        margin: 10px 0;\r\n        color: var(--ion-color-success);\r\n      }\r\n  \r\n      ion-button {\r\n        margin-top: 10px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .options-card {\r\n    margin-top: -10px;\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n    }\r\n  \r\n    ion-item {\r\n      --padding-start: 0;\r\n      --inner-padding-end: 0;\r\n    }\r\n  \r\n    ion-select {\r\n      width: 100%;\r\n      max-width: 100%;\r\n    }\r\n  \r\n    ion-button {\r\n      margin-top: 16px;\r\n    }\r\n  }\r\n  \r\n  ion-footer {\r\n    ion-toolbar {\r\n      --padding-top: 0;\r\n      --padding-bottom: 0;\r\n      --padding-start: 16px;\r\n      --padding-end: 16px;\r\n    }\r\n  \r\n    ion-button {\r\n      margin: 10px 0;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  .product-card {\r\n    animation: fadeIn 0.5s ease-out;\r\n  }\r\n  \r\n  // Estilos responsivos\r\n  @media (max-width: 576px) {\r\n    .product-card {\r\n      ion-card-title {\r\n        font-size: 1.1rem;\r\n      }\r\n  \r\n      ion-card-content {\r\n        p {\r\n          font-size: 0.85rem;\r\n        }\r\n  \r\n        h2 {\r\n          font-size: 1.3rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Estilos para el badge del carrito\r\n  ion-badge {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n    font-size: 12px;\r\n    padding: 2px 4px;\r\n    border-radius: 50%;\r\n  }",
        "main.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { MainPage } from './main.page';\r\n\r\ndescribe('MainPage', () => {\r\n  let component: MainPage;\r\n  let fixture: ComponentFixture<MainPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(MainPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "main.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\nimport { Product } from '../models/product.model';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\n\r\ninterface ExtendedProduct extends Product {\r\n  showOptions: boolean;\r\n  selectedSize: string;\r\n  selectedMilk: string;\r\n  imageURL: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.page.html',\r\n  styleUrls: ['./main.page.scss'],\r\n  animations: [\r\n    trigger('slideInOut', [\r\n      transition(':enter', [\r\n        style({ transform: 'translateY(100%)' }),\r\n        animate('200ms ease-out', style({ transform: 'translateY(0%)' }))\r\n      ]),\r\n      transition(':leave', [\r\n        animate('200ms ease-in', style({ transform: 'translateY(100%)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class MainPage implements OnInit {\r\n  products: ExtendedProduct[] = [];\r\n  currentOrderNumber: number = 1;\r\n  currentOrderItems: any[] = [];\r\n  isLoading: boolean = false;\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadProducts();\r\n  }\r\n\r\n  async loadProducts() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando productos...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      const dbProducts = await this.databaseService.getAllProducts();\r\n      this.products = dbProducts.map(product => ({\r\n        ...product,\r\n        showOptions: false,\r\n        selectedSize: 'medium',\r\n        selectedMilk: 'regular'\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error loading products:', error);\r\n      await this.presentToast('Error al cargar los productos. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n\r\n  get currentUserName(): string | null {\r\n    const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n    return user.name || null;\r\n  }\r\n\r\n  toggleOptions(index: number) {\r\n    this.products[index].showOptions = !this.products[index].showOptions;\r\n  }\r\n\r\n  calculatePrice(product: ExtendedProduct): number {\r\n    let adjustedPrice = product.price;\r\n    if (product.selectedSize === 'pequeño') {\r\n      adjustedPrice -= 1000;\r\n    } else if (product.selectedSize === 'grande') {\r\n      adjustedPrice += 1000;\r\n    }\r\n    return adjustedPrice;\r\n  }\r\n\r\n  updatePrice(product: ExtendedProduct) {\r\n    // La lógica para actualizar el precio puede ir aquí si es necesario\r\n  }\r\n\r\n  async addToCart(product: ExtendedProduct) {\r\n    if (!this.isLoggedIn) {\r\n      await this.presentToast('Por favor, inicia sesión para añadir productos al carrito');\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n\r\n    const existingItemIndex = this.currentOrderItems.findIndex(item => \r\n      item.id === product.id && \r\n      item.selectedSize === product.selectedSize && \r\n      item.selectedMilk === product.selectedMilk\r\n    );\r\n\r\n    if (existingItemIndex !== -1) {\r\n      this.currentOrderItems[existingItemIndex].quantity += 1;\r\n    } else {\r\n      this.currentOrderItems.push({\r\n        ...product,\r\n        quantity: 1,\r\n        finalPrice: this.calculatePrice(product)\r\n      });\r\n    }\r\n\r\n    product.showOptions = false;\r\n\r\n    await this.presentToast(`${product.name} (${product.selectedSize}, ${product.selectedMilk}) añadido a la orden #${this.currentOrderNumber}`);\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  updateLocalStorage() {\r\n    localStorage.setItem('currentOrder', JSON.stringify({\r\n      orderNumber: this.currentOrderNumber,\r\n      items: this.currentOrderItems\r\n    }));\r\n  }\r\n\r\n  async completeOrder() {\r\n    if (this.currentOrderItems.length === 0) {\r\n      await this.presentToast('El carrito está vacío. Añada productos antes de completar la orden.');\r\n      return;\r\n    }\r\n\r\n    this.updateLocalStorage();\r\n    this.router.navigate(['/carro-compras']);\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  // Método para manejar la actualización de cantidad directamente en la página principal\r\n  updateQuantity(product: ExtendedProduct, change: number) {\r\n    const index = this.currentOrderItems.findIndex(item => \r\n      item.id === product.id && \r\n      item.selectedSize === product.selectedSize && \r\n      item.selectedMilk === product.selectedMilk\r\n    );\r\n\r\n    if (index !== -1) {\r\n      this.currentOrderItems[index].quantity += change;\r\n      if (this.currentOrderItems[index].quantity <= 0) {\r\n        this.currentOrderItems.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  // Método para obtener la cantidad actual de un producto en el carrito\r\n  getQuantityInCart(product: ExtendedProduct): number {\r\n    const item = this.currentOrderItems.find(item => \r\n      item.id === product.id && \r\n      item.selectedSize === product.selectedSize && \r\n      item.selectedMilk === product.selectedMilk\r\n    );\r\n    return item ? item.quantity : 0;\r\n  }\r\n}"
      },
      "models": {
        "inventory.model.ts": "export interface Inventory {\r\n    id?: number;\r\n    productId: number;\r\n    quantity: number;\r\n    lastRestockedAt?: Date;\r\n  }",
        "order-detail.model.ts": "export interface OrderDetail {\r\n  id?: number;\r\n  orderId: number;\r\n  productId: number;\r\n  quantity: number;\r\n  size?: string;\r\n  milkType?: string;\r\n  price: number;\r\n  name?: string;\r\n  image?: string;\r\n  selectedSize?: string;\r\n  selectedMilk?: string;\r\n  finalPrice?: number;\r\n}",
        "order.model.ts": "import { OrderDetail } from './order-detail.model';\r\n\r\nexport interface Order {\r\n  id?: number;\r\n  orderNumber: number;\r\n  userId: number;\r\n  tableNumber: number | null;\r\n  status: 'Solicitado' | 'En proceso' | 'Listo' | 'Cancelado' | 'Entregado';\r\n  notes: string;\r\n  totalAmount: number;  \r\n  paymentMethod: string;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n  items?: OrderDetail[];\r\n}",
        "product.model.ts": "export interface Product {\r\n  id?: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  category: string;\r\n  imageURL: string;\r\n  isAvailable: boolean;\r\n}",
        "sales-report.model.ts": "export interface SalesReport {\r\n    id?: number;\r\n    date: string;\r\n    totalSales: number;\r\n    totalOrders: number;\r\n    averageOrderValue: number;\r\n    topSellingProduct: number;\r\n    generatedBy: number;\r\n    createdAt?: string;\r\n  }",
        "table.model.ts": "export interface Table {\r\n    id?: number;\r\n    tableNumber: number;\r\n    capacity: number;\r\n    status: 'Libre' | 'Ocupada' | 'Reservada';\r\n  }",
        "user.model.ts": "export interface User {\r\n  id?: number;\r\n  username: string;\r\n  password: string;\r\n  role: 'employee' | 'admin' | 'manager';\r\n  name: string;\r\n  email: string;\r\n  phoneNumber?: string;\r\n  hireDate?: Date;\r\n  lastLogin?: Date;\r\n}"
      },
      "not-found": {
        "not-found-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { NotFoundPage } from './not-found.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: NotFoundPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NotFoundPageRoutingModule {}\r\n",
        "not-found.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { NotFoundPageRoutingModule } from './not-found-routing.module';\r\n\r\nimport { NotFoundPage } from './not-found.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    NotFoundPageRoutingModule\r\n  ],\r\n  declarations: [NotFoundPage]\r\n})\r\nexport class NotFoundPageModule {}\r\n",
        "not-found.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Página no encontrada</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <div class=\"not-found-container\">\r\n    <h1>404</h1>\r\n    <h2>Página no encontrada</h2>\r\n    <p>Lo sentimos, la página que estás buscando no existe.</p>\r\n    <ion-button routerLink=\"/login\">Volver al inicio</ion-button>\r\n  </div>\r\n</ion-content>",
        "not-found.page.scss": ".not-found-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    text-align: center;\r\n  \r\n    h1 {\r\n      font-size: 6rem;\r\n      margin-bottom: 0;\r\n      color: var(--ion-color-primary);\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 2rem;\r\n      margin-top: 0;\r\n      color: var(--ion-color-dark);\r\n    }\r\n  \r\n    p {\r\n      font-size: 1.2rem;\r\n      color: var(--ion-color-medium);\r\n      margin-bottom: 2rem;\r\n    }\r\n  }",
        "not-found.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { NotFoundPage } from './not-found.page';\r\n\r\ndescribe('NotFoundPage', () => {\r\n  let component: NotFoundPage;\r\n  let fixture: ComponentFixture<NotFoundPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(NotFoundPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "not-found.page.ts": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.page.html',\r\n  styleUrls: ['./not-found.page.scss'],\r\n})\r\nexport class NotFoundPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n"
      },
      "perfil": {
        "perfil-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PerfilPage } from './perfil.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PerfilPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PerfilPageRoutingModule {}\r\n",
        "perfil.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { PerfilPageRoutingModule } from './perfil-routing.module';\r\n\r\nimport { PerfilPage } from './perfil.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    PerfilPageRoutingModule\r\n  ],\r\n  declarations: [PerfilPage]\r\n})\r\nexport class PerfilPageModule {}\r\n",
        "perfil.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Mi Perfil</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Información Personal</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <form (ngSubmit)=\"updatePerfil()\">\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Nombre</ion-label>\r\n          <ion-input [(ngModel)]=\"usuario.name\" name=\"name\" required></ion-input>\r\n        </ion-item>\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Email</ion-label>\r\n          <ion-input [(ngModel)]=\"usuario.email\" name=\"email\" type=\"email\" required></ion-input>\r\n        </ion-item>\r\n        <ion-item *ngIf=\"esAdmin\">\r\n          <ion-label position=\"floating\">Rol</ion-label>\r\n          <ion-input [value]=\"'Administrador'\" readonly></ion-input>\r\n        </ion-item>\r\n        <ion-item *ngIf=\"!esAdmin\">\r\n          <ion-label position=\"floating\">Rol</ion-label>\r\n          <ion-input [value]=\"'Empleado'\" readonly></ion-input>\r\n        </ion-item>\r\n        <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\">Actualizar Perfil</ion-button>\r\n      </form>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Cambiar Contraseña</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <form (ngSubmit)=\"cambiarContrasena()\">\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Contraseña Actual</ion-label>\r\n          <ion-input [(ngModel)]=\"datosContrasena.contrasenaActual\" name=\"contrasenaActual\" type=\"password\" required></ion-input>\r\n        </ion-item>\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Nueva Contraseña</ion-label>\r\n          <ion-input [(ngModel)]=\"datosContrasena.nuevaContrasena\" name=\"nuevaContrasena\" type=\"password\" required></ion-input>\r\n        </ion-item>\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Confirmar Nueva Contraseña</ion-label>\r\n          <ion-input [(ngModel)]=\"datosContrasena.confirmarContrasena\" name=\"confirmarContrasena\" type=\"password\" required></ion-input>\r\n        </ion-item>\r\n        <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\">Cambiar Contraseña</ion-button>\r\n      </form>\r\n    </ion-card-content>\r\n  </ion-card>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"top\"\r\ncolor=\"success\"\r\n></ion-toast>",
        "perfil.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  .profile-header {\r\n    background-color: #f0f0f0;\r\n    padding: 30px 20px;\r\n    text-align: center;\r\n    color: #333;\r\n  \r\n    .profile-image {\r\n      width: 120px;\r\n      height: 120px;\r\n      border-radius: 50%;\r\n      margin: 0 auto 20px;\r\n      border: 4px solid #ffffff;\r\n      overflow: hidden;\r\n      \r\n      img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n      }\r\n    }\r\n  \r\n    h2 {\r\n      margin: 0;\r\n      font-size: 24px;\r\n      font-weight: bold;\r\n      color: #333;\r\n    }\r\n  \r\n    p {\r\n      margin: 5px 0 0;\r\n      font-size: 16px;\r\n      color: #666;\r\n    }\r\n  }\r\n  \r\n  .profile-content {\r\n    padding: 20px;\r\n  }\r\n  \r\n  ion-card {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    margin-bottom: 20px;\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: #f0f0f0;\r\n      border-bottom: 1px solid #e0e0e0;\r\n  \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n    }\r\n  }\r\n  \r\n  ion-item {\r\n    --padding-start: 0;\r\n    --inner-padding-end: 0;\r\n    --background: transparent;\r\n  \r\n    ion-label {\r\n      color: #333;\r\n      font-size: 14px;\r\n    }\r\n  \r\n    ion-input, ion-textarea, ion-select {\r\n      --padding-start: 0;\r\n      font-size: 16px;\r\n      color: #333;\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 20px;\r\n    --background: #5c9ce5;\r\n    --background-hover: #4a90e2;\r\n    --color: #ffffff;\r\n    --border-radius: 8px;\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .profile-header {\r\n      padding: 20px;\r\n  \r\n      .profile-image {\r\n        width: 100px;\r\n        height: 100px;\r\n      }\r\n  \r\n      h2 {\r\n        font-size: 20px;\r\n      }\r\n  \r\n      p {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  \r\n    ion-card {\r\n      ion-card-header {\r\n        ion-card-title {\r\n          font-size: 16px;\r\n        }\r\n      }\r\n    }\r\n  \r\n    ion-item {\r\n      ion-label {\r\n        font-size: 13px;\r\n      }\r\n  \r\n      ion-input, ion-textarea, ion-select {\r\n        font-size: 15px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from { \r\n      opacity: 0;\r\n      transform: translateY(20px);\r\n    }\r\n    to { \r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  \r\n  ion-card {\r\n    animation: fadeInUp 0.3s ease-out;\r\n  }\r\n  \r\n  .profile-header {\r\n    animation: fadeInUp 0.5s ease-out;\r\n  }",
        "perfil.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { PerfilPage } from './perfil.page';\r\n\r\ndescribe('PerfilPage', () => {\r\n  let component: PerfilPage;\r\n  let fixture: ComponentFixture<PerfilPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(PerfilPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "perfil.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController, AlertController } from '@ionic/angular';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-perfil',\r\n  templateUrl: './perfil.page.html',\r\n  styleUrls: ['./perfil.page.scss'],\r\n})\r\nexport class PerfilPage implements OnInit {\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  \r\n  usuario: User = {} as User;\r\n  datosContrasena = {\r\n    contrasenaActual: '',\r\n    nuevaContrasena: '',\r\n    confirmarContrasena: ''\r\n  };\r\n  esAdmin: boolean = false;\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController,\r\n    private router: Router\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    await this.cargarPerfilUsuario();\r\n  }\r\n\r\n  async cargarPerfilUsuario() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando perfil...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      const userId = this.obtenerIdUsuarioActual();\r\n      if (!userId) {\r\n        throw new Error('No se encontró un usuario activo');\r\n      }\r\n\r\n      this.usuario = await this.databaseService.getUserById(userId);\r\n      this.esAdmin = this.usuario.role === 'admin';\r\n    } catch (error) {\r\n      console.error('Error al cargar el perfil del usuario:', error);\r\n      await this.presentToast('Error al cargar el perfil. Por favor, intente de nuevo.');\r\n      this.router.navigate(['/login']);\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async updatePerfil() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Actualizando perfil...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      await this.databaseService.updateUser(this.usuario);\r\n      await this.presentToast('Perfil actualizado con éxito');\r\n    } catch (error) {\r\n      console.error('Error al actualizar el perfil:', error);\r\n      await this.presentToast('Error al actualizar el perfil. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async cambiarContrasena() {\r\n    if (this.datosContrasena.nuevaContrasena !== this.datosContrasena.confirmarContrasena) {\r\n      await this.presentToast('Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar cambio de contraseña',\r\n      message: '¿Estás seguro de que quieres cambiar tu contraseña?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Confirmar',\r\n          handler: async () => {\r\n            const loading = await this.loadingController.create({\r\n              message: 'Cambiando contraseña...',\r\n            });\r\n            await loading.present();\r\n\r\n            try {\r\n              // Asumiendo que updateUser puede manejar el cambio de contraseña\r\n              this.usuario.password = this.datosContrasena.nuevaContrasena;\r\n              await this.databaseService.updateUser(this.usuario);\r\n              \r\n              await this.presentToast('Contraseña cambiada con éxito');\r\n              this.datosContrasena = { contrasenaActual: '', nuevaContrasena: '', confirmarContrasena: '' };\r\n            } catch (error) {\r\n              console.error('Error al cambiar la contraseña:', error);\r\n              await this.presentToast('Error al cambiar la contraseña. Por favor, intente de nuevo.');\r\n            } finally {\r\n              await loading.dismiss();\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  private obtenerIdUsuarioActual(): number | null {\r\n    const usuarioActual = localStorage.getItem('currentUser');\r\n    if (usuarioActual) {\r\n      return JSON.parse(usuarioActual).id;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async logout() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Cerrar sesión',\r\n      message: '¿Estás seguro de que quieres cerrar sesión?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Sí, cerrar sesión',\r\n          handler: () => {\r\n            localStorage.removeItem('currentUser');\r\n            this.router.navigate(['/login']);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n}"
      },
      "register": {
        "register-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegisterPage } from './register.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegisterPageRoutingModule {}\r\n",
        "register.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { RegisterPageRoutingModule } from './register-routing.module';\r\nimport { RegisterPage } from './register.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RegisterPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [RegisterPage]\r\n})\r\nexport class RegisterPageModule {}",
        "register.page.html": "<ion-content class=\"ion-padding\">\r\n  <div class=\"register-container\">\r\n    <h1>Únete a nosotros</h1>\r\n    <h2>Registro</h2>\r\n    <form (ngSubmit)=\"onSubmit()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Nombre</ion-label>\r\n        <ion-input type=\"text\" [(ngModel)]=\"name\" name=\"name\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Correo electrónico</ion-label>\r\n        <ion-input type=\"email\" [(ngModel)]=\"email\" name=\"email\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Contraseña</ion-label>\r\n        <ion-input type=\"password\" [(ngModel)]=\"password\" name=\"password\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\">Registrarse</ion-button>\r\n    </form>\r\n    <a [routerLink]=\"['/login']\" class=\"login-link\">¿Ya tienes una cuenta? Inicia sesión</a>\r\n  </div>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"top\"\r\ncolor=\"primary\"\r\n></ion-toast>",
        "register.page.scss": ":host {\r\n    --ion-color-primary: #1c2833;\r\n    --ion-color-primary-rgb: 74, 144, 226;\r\n    --ion-color-primary-contrast: #ffffff;\r\n    --ion-color-primary-contrast-rgb: 255, 255, 255;\r\n    --ion-color-primary-shade: #417fc7;\r\n    --ion-color-primary-tint: #5c9ce5;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  }\r\n  \r\n  .register-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    padding: 20px;\r\n    color: #4a4a4a;\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 2.5rem;\r\n    margin-bottom: 10px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  h2 {\r\n    font-size: 1.8rem;\r\n    margin-bottom: 30px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  form {\r\n    width: 100%;\r\n    max-width: 400px;\r\n  }\r\n  \r\n  ion-item {\r\n    --background: rgba(255, 255, 255, 0.1);\r\n    --border-color: rgba(255, 255, 255, 0.5);\r\n    --highlight-height: 0;\r\n    border-radius: 5px;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  ion-label {\r\n    color: #4a4a4a;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  ion-input {\r\n    --padding-start: 10px;\r\n    font-size: 16px;\r\n    --placeholder-color: #999;\r\n    --placeholder-opacity: 0.8;\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 30px;\r\n    height: 54px;\r\n    font-size: 18px;\r\n    text-transform: none;\r\n    --box-shadow: 0 4px 10px rgba(74, 144, 226, 0.3);\r\n    --border-radius: 27px;\r\n  }\r\n  \r\n  .login-link {\r\n    margin-top: 20px;\r\n    color: var(--ion-color-primary-tint);\r\n    font-size: 16px;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    display: block;\r\n    \r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    h1 {\r\n      font-size: 2rem;\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 24px;\r\n      margin-bottom: 25px;\r\n      color: var(--ion-color-primary-tint);\r\n    }\r\n    \r\n    ion-button {\r\n      font-size: 16px;\r\n      height: 50px;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate3d(0, 30px, 0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate3d(0, 0, 0);\r\n    }\r\n  }\r\n  \r\n  .register-container > * {\r\n    animation: fadeInUp 0.5s ease-out;\r\n    animation-fill-mode: both;\r\n  }\r\n  \r\n  .register-container > *:nth-child(1) { animation-delay: 0.1s; }\r\n  .register-container > *:nth-child(2) { animation-delay: 0.2s; }\r\n  .register-container > *:nth-child(3) { animation-delay: 0.3s; }\r\n  .register-container > *:nth-child(4) { animation-delay: 0.4s; }\r\n  .register-container > *:nth-child(5) { animation-delay: 0.5s; }",
        "register.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { RegisterPage } from './register.page';\r\n\r\ndescribe('RegisterPage', () => {\r\n  let component: RegisterPage;\r\n  let fixture: ComponentFixture<RegisterPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(RegisterPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "register.page.ts": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.page.html',\r\n  styleUrls: ['./register.page.scss'],\r\n})\r\nexport class RegisterPage {\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  name: string = '';\r\n  email: string = '';\r\n  password: string = '';\r\n  confirmPassword: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController\r\n  ) {}\r\n\r\n  async onSubmit() {\r\n    if (!this.isFormValid()) {\r\n      await this.presentToast('Por favor, complete todos los campos correctamente.');\r\n      return;\r\n    }\r\n\r\n    if (this.password !== this.confirmPassword) {\r\n      await this.presentToast('Las contraseñas no coinciden.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const existingUser = await this.databaseService.getUserByEmail(this.email);\r\n      if (existingUser) {\r\n        await this.presentToast('El email ya está registrado. Por favor, use otro.');\r\n        return;\r\n      }\r\n\r\n      const newUser: User = {\r\n        name: this.name,\r\n        email: this.email,\r\n        password: this.password,\r\n        role: 'employee', // Default role, can be changed by admin later\r\n        username: this.email, // Using email as username for simplicity\r\n      };\r\n\r\n      const userId = await this.databaseService.createUser(newUser);\r\n      if (userId) {\r\n        await this.presentToast('Registro exitoso. Por favor, inicie sesión.');\r\n        this.router.navigate(['/login']);\r\n      } else {\r\n        throw new Error('Failed to create user');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during registration:', error);\r\n      await this.presentToast('Ocurrió un error durante el registro. Por favor, intente de nuevo.');\r\n    }\r\n  }\r\n\r\n  private isFormValid(): boolean {\r\n    return !!(this.name && this.email && this.password && this.confirmPassword);\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n}"
      },
      "services": {
        "database.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { DatabaseService } from './database.service';\r\n\r\ndescribe('DatabaseService', () => {\r\n  let service: DatabaseService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(DatabaseService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "database.service.ts": "import { Injectable } from '@angular/core';\r\nimport { Capacitor } from '@capacitor/core';\r\nimport { CapacitorSQLite, SQLiteConnection, SQLiteDBConnection } from '@capacitor-community/sqlite';\r\nimport { User } from '../models/user.model';\r\nimport { Product } from '../models/product.model';\r\nimport { Order } from '../models/order.model';\r\nimport { OrderDetail } from '../models/order-detail.model';\r\nimport { SalesReport } from '../models/sales-report.model';\r\nimport { Inventory } from '../models/inventory.model';\r\nimport { Table } from '../models/table.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatabaseService {\r\n  private sqlite: SQLiteConnection | null = null;\r\n  private db: SQLiteDBConnection | null = null;\r\n  private initialized: boolean = false;\r\n\r\n\r\n  constructor() {\r\n    this.initializeDatabase().catch(error => {\r\n      console.error('Failed to initialize database:', error);\r\n    });\r\n  }\r\n  async updateUserPassword(userId: number, currentPassword: string, newPassword: string): Promise<boolean> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      // Primero, verificamos la contraseña actual\r\n      const query = `SELECT * FROM Users WHERE UserID = ? AND Password = ?`;\r\n      const result = await this.db!.query(query, [userId, currentPassword]);\r\n      \r\n      if (result.values && result.values.length > 0) {\r\n        // Si la contraseña actual es correcta, actualizamos a la nueva\r\n        const updateQuery = `UPDATE Users SET Password = ? WHERE UserID = ?`;\r\n        await this.db!.run(updateQuery, [newPassword, userId]);\r\n        return true;\r\n      } else {\r\n        // Si la contraseña actual no es correcta, retornamos false\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating user password:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserById(userId: number): Promise<User> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Users WHERE UserID = ?`;\r\n      const result = await this.db!.query(query, [userId]);\r\n      if (result.values && result.values.length > 0) {\r\n        return result.values[0] as User;\r\n      } else {\r\n        throw new Error('Usuario no encontrado');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting user by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserByEmail(email: string): Promise<User | null> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Users WHERE Email = ?`;\r\n      const result = await this.db!.query(query, [email]);\r\n      return result.values && result.values.length > 0 ? result.values[0] as User : null;\r\n    } catch (error) {\r\n      console.error('Error getting user by email:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateUserLastLogin(userId: number): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `UPDATE Users SET LastLogin = CURRENT_TIMESTAMP WHERE UserID = ?`;\r\n      await this.db!.run(query, [userId]);\r\n    } catch (error) {\r\n      console.error('Error updating user last login:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  public async initializeDatabase(): Promise<void> {\r\n    if (this.initialized) return;\r\n  \r\n    if (Capacitor.isNativePlatform()) {\r\n      try {\r\n        this.sqlite = new SQLiteConnection(CapacitorSQLite);\r\n        this.db = await this.sqlite.createConnection(\r\n          'cafeteria',\r\n          false,\r\n          'no-encryption',\r\n          1,\r\n          false\r\n        );\r\n        await this.db.open();\r\n        await this.createTables();\r\n        await this.createIndexes();\r\n        await this.createTriggers();\r\n        this.initialized = true;\r\n      } catch (error) {\r\n        console.error('Error initializing database:', error);\r\n        throw error;\r\n      }\r\n    } else {\r\n      console.warn('SQLite is not available on this platform');\r\n    }\r\n  }\r\n\r\n  private async ensureDatabaseInitialized(): Promise<void> {\r\n    if (!this.initialized) {\r\n      await this.initializeDatabase();\r\n    }\r\n    if (!this.db) {\r\n      throw new Error('Database connection not initialized');\r\n    }\r\n  }\r\n\r\n  private async createTables(): Promise<void> {\r\n    const queries = [\r\n      `CREATE TABLE IF NOT EXISTS Users (\r\n        UserID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        Username TEXT NOT NULL UNIQUE,\r\n        Password TEXT NOT NULL,\r\n        Role TEXT NOT NULL CHECK (Role IN ('employee', 'admin', 'manager')),\r\n        Name TEXT NOT NULL,\r\n        Email TEXT UNIQUE,\r\n        PhoneNumber TEXT,\r\n        HireDate DATE,\r\n        LastLogin DATETIME\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS Products (\r\n        ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        Name TEXT NOT NULL,\r\n        Description TEXT,\r\n        Price REAL NOT NULL,\r\n        Category TEXT NOT NULL,\r\n        ImageURL TEXT,\r\n        IsAvailable BOOLEAN DEFAULT 1,\r\n        CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS ProductCategories (\r\n        CategoryID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        Name TEXT NOT NULL UNIQUE,\r\n        Description TEXT\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS Orders (\r\n        OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        UserID INTEGER,\r\n        TableNumber INTEGER,\r\n        Status TEXT NOT NULL CHECK (Status IN ('Solicitado', 'En proceso', 'Listo', 'Cancelado', 'Entregado')),\r\n        CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        Notes TEXT,\r\n        TotalAmount REAL NOT NULL,\r\n        PaymentMethod TEXT,\r\n        FOREIGN KEY (UserID) REFERENCES Users(UserID)\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS OrderDetails (\r\n        OrderDetailID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        OrderID INTEGER,\r\n        ProductID INTEGER,\r\n        Quantity INTEGER NOT NULL,\r\n        Size TEXT,\r\n        MilkType TEXT,\r\n        Price REAL NOT NULL,\r\n        FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),\r\n        FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS SalesReports (\r\n        ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        Date DATE NOT NULL,\r\n        TotalSales REAL NOT NULL,\r\n        TotalOrders INTEGER NOT NULL,\r\n        AverageOrderValue REAL,\r\n        TopSellingProduct INTEGER,\r\n        GeneratedBy INTEGER,\r\n        CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        FOREIGN KEY (GeneratedBy) REFERENCES Users(UserID),\r\n        FOREIGN KEY (TopSellingProduct) REFERENCES Products(ProductID)\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS Inventory (\r\n        InventoryID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        ProductID INTEGER,\r\n        Quantity INTEGER NOT NULL,\r\n        LastRestockedAt DATETIME,\r\n        FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\r\n      )`,\r\n      `CREATE TABLE IF NOT EXISTS Tables (\r\n        TableID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        TableNumber INTEGER UNIQUE NOT NULL,\r\n        Capacity INTEGER NOT NULL,\r\n        Status TEXT CHECK (Status IN ('Libre', 'Ocupada', 'Reservada'))\r\n      )`\r\n    ];\r\n\r\n    for (const query of queries) {\r\n      await this.db!.execute(query);\r\n    }\r\n  }\r\n\r\n  private async createIndexes(): Promise<void> {\r\n    const indexes = [\r\n      'CREATE INDEX IF NOT EXISTS idx_users_role ON Users(Role)',\r\n      'CREATE INDEX IF NOT EXISTS idx_products_category ON Products(Category)',\r\n      'CREATE INDEX IF NOT EXISTS idx_orders_status ON Orders(Status)',\r\n      'CREATE INDEX IF NOT EXISTS idx_orders_userid ON Orders(UserID)',\r\n      'CREATE INDEX IF NOT EXISTS idx_orderdetails_orderid ON OrderDetails(OrderID)',\r\n      'CREATE INDEX IF NOT EXISTS idx_orderdetails_productid ON OrderDetails(ProductID)',\r\n      'CREATE INDEX IF NOT EXISTS idx_salesreports_date ON SalesReports(Date)',\r\n      'CREATE INDEX IF NOT EXISTS idx_inventory_productid ON Inventory(ProductID)'\r\n    ];\r\n\r\n    for (const index of indexes) {\r\n      await this.db!.execute(index);\r\n    }\r\n  }\r\n\r\n  private async createTriggers(): Promise<void> {\r\n    const triggers = [\r\n      `CREATE TRIGGER IF NOT EXISTS update_product_timestamp \r\n       AFTER UPDATE ON Products\r\n       BEGIN\r\n         UPDATE Products SET UpdatedAt = CURRENT_TIMESTAMP WHERE ProductID = NEW.ProductID;\r\n       END`,\r\n      `CREATE TRIGGER IF NOT EXISTS update_order_timestamp \r\n       AFTER UPDATE ON Orders\r\n       BEGIN\r\n         UPDATE Orders SET UpdatedAt = CURRENT_TIMESTAMP WHERE OrderID = NEW.OrderID;\r\n       END`\r\n    ];\r\n\r\n    for (const trigger of triggers) {\r\n      await this.db!.execute(trigger);\r\n    }\r\n  }\r\n\r\n  async insertSeedData() {\r\n    try {\r\n      const currentDate = new Date();\r\n      // Insertar usuario administrador\r\n      const adminUser: User = {\r\n        username: 'admin',\r\n        password: 'admin123',\r\n        role: 'admin',\r\n        name: 'Administrador Principal',\r\n        email: 'admin@cafeteria.com',\r\n        phoneNumber: '123456789',\r\n        hireDate: currentDate\r\n      };\r\n      await this.createUser(adminUser);\r\n  \r\n      // Insertar empleados\r\n      const employees: User[] = [\r\n        {\r\n          username: 'empleado1',\r\n          password: 'emp123',\r\n          role: 'employee',\r\n          name: 'Juan Pérez',\r\n          email: 'juan@cafeteria.com',\r\n          phoneNumber: '987654321',\r\n          hireDate: currentDate\r\n        },\r\n        {\r\n          username: 'empleado2',\r\n          password: 'emp456',\r\n          role: 'employee',\r\n          name: 'María López',\r\n          email: 'maria@cafeteria.com',\r\n          phoneNumber: '987654322',\r\n          hireDate: currentDate\r\n        },\r\n        {\r\n          username: 'empleado3',\r\n          password: 'emp789',\r\n          role: 'employee',\r\n          name: 'Carlos Rodríguez',\r\n          email: 'carlos@cafeteria.com',\r\n          phoneNumber: '987654323',\r\n          hireDate: currentDate\r\n        }\r\n      ];\r\n  \r\n      for (const employee of employees) {\r\n        await this.createUser(employee);\r\n      }\r\n  \r\n      // Insertar productos\r\n      const products: Product[] = [\r\n        {\r\n          name: 'Café Americano',\r\n          description: 'Café negro tradicional',\r\n          price: 2500,\r\n          category: 'Bebidas calientes',\r\n          imageURL: 'assets/americano.jpg',\r\n          isAvailable: true\r\n        },\r\n        {\r\n          name: 'Cappuccino',\r\n          description: 'Espresso con leche espumosa',\r\n          price: 3000,\r\n          category: 'Bebidas calientes',\r\n          imageURL: 'assets/cappuccino.jpg',\r\n          isAvailable: true\r\n        },\r\n        {\r\n          name: 'Latte',\r\n          description: 'Café con leche cremosa',\r\n          price: 3200,\r\n          category: 'Bebidas calientes',\r\n          imageURL: 'assets/latte.jpg',\r\n          isAvailable: true\r\n        },\r\n        {\r\n          name: 'Espresso',\r\n          description: 'Shot de café concentrado',\r\n          price: 2000,\r\n          category: 'Bebidas calientes',\r\n          imageURL: 'assets/espresso.jpg',\r\n          isAvailable: true\r\n        },\r\n        {\r\n          name: 'Té Verde',\r\n          description: 'Té verde tradicional',\r\n          price: 2200,\r\n          category: 'Bebidas calientes',\r\n          imageURL: 'assets/te-verde.jpg',\r\n          isAvailable: true\r\n        }\r\n      ];\r\n  \r\n      for (const product of products) {\r\n        await this.createProduct(product);\r\n      }\r\n  \r\n      \r\n      const orders: Order[] = [\r\n        {\r\n          orderNumber: 1001,\r\n          userId: 2, \r\n          tableNumber: 5,\r\n          status: 'Solicitado',\r\n          notes: 'Sin azúcar',\r\n          totalAmount: 5500,\r\n          paymentMethod: 'Efectivo'\r\n        },\r\n        {\r\n          orderNumber: 1002,\r\n          userId: 3,\r\n          tableNumber: 3,\r\n          status: 'En proceso',\r\n          notes: 'Extra caliente',\r\n          totalAmount: 6200,\r\n          paymentMethod: 'Tarjeta'\r\n        }\r\n      ];\r\n  \r\n      for (const order of orders) {\r\n        const orderId = await this.createOrder(order);\r\n        \r\n        // Añadir detalles a las órdenes\r\n        const orderDetails: OrderDetail[] = [\r\n          {\r\n            orderId: orderId,\r\n            productId: 1, \r\n            quantity: 2,\r\n            size: 'Grande',\r\n            milkType: 'Regular',\r\n            price: 2500\r\n          },\r\n          {\r\n            orderId: orderId,\r\n            productId: 2, \r\n            quantity: 1,\r\n            size: 'Mediano',\r\n            milkType: 'Descremada',\r\n            price: 3000\r\n          }\r\n        ];\r\n  \r\n        for (const detail of orderDetails) {\r\n          await this.addProductToOrder(detail);\r\n        }\r\n      }\r\n  \r\n      console.log('Datos de prueba insertados con éxito');\r\n    } catch (error) {\r\n      console.error('Error al insertar datos de prueba:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // User CRUD operations\r\n  async createUser(user: User): Promise<number> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `INSERT INTO Users (Username, Password, Role, Name, Email, PhoneNumber, HireDate)\r\n                     VALUES (?, ?, ?, ?, ?, ?, ?)`;\r\n      const result = await this.db!.run(query, [\r\n        user.username, \r\n        user.password, \r\n        user.role, \r\n        user.name, \r\n        user.email, \r\n        user.phoneNumber, \r\n        user.hireDate ? user.hireDate.toISOString() : null\r\n      ]);\r\n      return result.changes?.lastId ?? 0;\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserByCredentials(username: string, password: string): Promise<User | null> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Users WHERE Username = ? AND Password = ?`;\r\n      const result = await this.db!.query(query, [username, password]);\r\n      return result.values && result.values.length > 0 ? result.values[0] as User : null;\r\n    } catch (error) {\r\n      console.error('Error getting user by credentials:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateUser(user: User): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `UPDATE Users SET Name = ?, Email = ?, Role = ? WHERE UserID = ?`;\r\n      await this.db!.run(query, [user.name, user.email, user.role, user.id]);\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n  async getAllUsers(): Promise<User[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Users`;\r\n      const result = await this.db!.query(query);\r\n      return result.values as User[];\r\n    } catch (error) {\r\n      console.error('Error getting all users:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteUser(userId: number): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `DELETE FROM Users WHERE UserID = ?`;\r\n      await this.db!.run(query, [userId]);\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Product CRUD operations\r\n  async createProduct(product: Product): Promise<number> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `INSERT INTO Products (Name, Description, Price, Category, ImageURL, IsAvailable)\r\n                     VALUES (?, ?, ?, ?, ?, ?)`;\r\n      const result = await this.db!.run(query, [product.name, product.description, product.price, product.category, product.imageURL, product.isAvailable]);\r\n      return result.changes?.lastId ?? 0;\r\n    } catch (error) {\r\n      console.error('Error creating product:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getProductById(productId: number): Promise<Product | null> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Products WHERE ProductID = ?`;\r\n      const result = await this.db!.query(query, [productId]);\r\n      return result.values && result.values.length > 0 ? result.values[0] as Product : null;\r\n    } catch (error) {\r\n      console.error('Error getting product by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateProduct(product: Product): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `UPDATE Products SET Name = ?, Description = ?, Price = ?, Category = ?, ImageURL = ?, IsAvailable = ?\r\n                     WHERE ProductID = ?`;\r\n      await this.db!.run(query, [product.name, product.description, product.price, product.category, product.imageURL, product.isAvailable, product.id]);\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getAllProducts(): Promise<Product[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Products`;\r\n      const result = await this.db!.query(query);\r\n      return result.values as Product[];\r\n    } catch (error) {\r\n      console.error('Error getting all products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteProduct(productId: number): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `DELETE FROM Products WHERE ProductID = ?`;\r\n      await this.db!.run(query, [productId]);\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Order operations\r\n  async createOrder(order: Order): Promise<number> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `INSERT INTO Orders (UserID, TableNumber, Status, Notes, TotalAmount, PaymentMethod)\r\n                     VALUES (?, ?, ?, ?, ?, ?)`;\r\n      const result = await this.db!.run(query, [order.userId, order.tableNumber, order.status, order.notes, order.totalAmount, order.paymentMethod]);\r\n      return result.changes?.lastId ?? 0;\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getOrderById(orderId: number): Promise<Order | null> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM Orders WHERE OrderID = ?`;\r\n      const result = await this.db!.query(query, [orderId]);\r\n      return result.values && result.values.length > 0 ? result.values[0] as Order : null;\r\n    } catch (error) {\r\n      console.error('Error getting order by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateOrderStatus(orderId: number, status: string): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `UPDATE Orders SET Status = ? WHERE OrderID = ?`;\r\n      await this.db!.run(query, [status, orderId]);\r\n    } catch (error) {\r\n      console.error('Error updating order status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getOrdersByStatus(statuses: string[]): Promise<Order[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const placeholders = statuses.map(() => '?').join(',');\r\n      const query = `SELECT * FROM Orders WHERE Status IN (${placeholders})`;\r\n      const result = await this.db!.query(query, statuses);\r\n      return result.values as Order[];\r\n    } catch (error) {\r\n      console.error('Error getting orders by status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  // OrderDetails operations\r\n  async addProductToOrder(orderDetail: OrderDetail): Promise<void> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `INSERT INTO OrderDetails (OrderID, ProductID, Quantity, Size, MilkType, Price)\r\n                     VALUES (?, ?, ?, ?, ?, ?)`;\r\n      await this.db!.run(query, [orderDetail.orderId, orderDetail.productId, orderDetail.quantity, orderDetail.size, orderDetail.milkType, orderDetail.price]);\r\n    } catch (error) {\r\n      console.error('Error adding product to order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getOrderDetails(orderId: number): Promise<OrderDetail[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM OrderDetails WHERE OrderID = ?`;\r\n      const result = await this.db!.query(query, [orderId]);\r\n      return result.values as OrderDetail[];\r\n    } catch (error) {\r\n      console.error('Error getting order details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // SalesReport operations\r\n  async createSalesReport(report: SalesReport): Promise<number> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `INSERT INTO SalesReports (Date, TotalSales, TotalOrders, AverageOrderValue, TopSellingProduct, GeneratedBy)\r\n                     VALUES (?, ?, ?, ?, ?, ?)`;\r\n      const result = await this.db!.run(query, [report.date, report.totalSales, report.totalOrders, report.averageOrderValue, report.topSellingProduct, report.generatedBy]);\r\n      return result.changes?.lastId ?? 0;\r\n    } catch (error) {\r\n      console.error('Error creating sales report:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getSalesReportsByDateRange(startDate: string, endDate: string): Promise<SalesReport[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `SELECT * FROM SalesReports WHERE Date BETWEEN ? AND ?`;\r\n      const result = await this.db!.query(query, [startDate, endDate]);\r\n      return result.values as SalesReport[];\r\n    } catch (error) {\r\n      console.error('Error getting sales reports by date range:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n  async getOrdersByEmployeeAndDate(employeeId: number, date: string): Promise<Order[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `\r\n        SELECT * FROM Orders \r\n        WHERE UserID = ? AND DATE(CreatedAt) = ?\r\n      `;\r\n      const result = await this.db!.query(query, [employeeId, date]);\r\n      return result.values as Order[];\r\n    } catch (error) {\r\n      console.error('Error getting orders by employee and date:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async calculateTotalSales(startDate: string, endDate: string): Promise<number> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `\r\n        SELECT SUM(TotalAmount) as TotalSales \r\n        FROM Orders \r\n        WHERE DATE(CreatedAt) BETWEEN ? AND ?\r\n      `;\r\n      const result = await this.db!.query(query, [startDate, endDate]);\r\n      return result.values && result.values.length > 0 ? result.values[0].TotalSales || 0 : 0;\r\n    } catch (error) {\r\n      console.error('Error calculating total sales:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getTopSellingProducts(limit: number = 5): Promise<{productId: number, name: string, totalSold: number}[]> {\r\n    await this.ensureDatabaseInitialized();\r\n    try {\r\n      const query = `\r\n        SELECT \r\n          p.ProductID as productId, \r\n          p.Name as name, \r\n          SUM(od.Quantity) as totalSold\r\n        FROM OrderDetails od\r\n        JOIN Products p ON od.ProductID = p.ProductID\r\n        GROUP BY od.ProductID\r\n        ORDER BY totalSold DESC\r\n        LIMIT ?\r\n      `;\r\n      const result = await this.db!.query(query, [limit]);\r\n      return result.values as {productId: number, name: string, totalSold: number}[];\r\n    } catch (error) {\r\n      console.error('Error getting top selling products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n}\r\n\r\n"
      }
    },
    "assets": {
      "americano.jpg": "(binary)",
      "cappuccino.jpg": "(binary)",
      "icon": {
        "favicon.png": "(binary)"
      },
      "latte.jpg": "(binary)",
      "shapes.svg": "<svg width=\"350\" height=\"140\" xmlns=\"http://www.w3.org/2000/svg\" style=\"background:#f6f7f9\"><g fill=\"none\" fill-rule=\"evenodd\"><path fill=\"#F04141\" style=\"mix-blend-mode:multiply\" d=\"M61.905-34.23l96.194 54.51-66.982 54.512L22 34.887z\"/><circle fill=\"#10DC60\" style=\"mix-blend-mode:multiply\" cx=\"155.5\" cy=\"135.5\" r=\"57.5\"/><path fill=\"#3880FF\" style=\"mix-blend-mode:multiply\" d=\"M208.538 9.513l84.417 15.392L223.93 93.93z\"/><path fill=\"#FFCE00\" style=\"mix-blend-mode:multiply\" d=\"M268.625 106.557l46.332-26.75 46.332 26.75v53.5l-46.332 26.75-46.332-26.75z\"/><circle fill=\"#7044FF\" style=\"mix-blend-mode:multiply\" cx=\"299.5\" cy=\"9.5\" r=\"38.5\"/><rect fill=\"#11D3EA\" style=\"mix-blend-mode:multiply\" transform=\"rotate(-60 148.47 37.886)\" x=\"143.372\" y=\"-7.056\" width=\"10.196\" height=\"89.884\" rx=\"5.098\"/><path d=\"M-25.389 74.253l84.86 8.107c5.498.525 9.53 5.407 9.004 10.905a10 10 0 0 1-.057.477l-12.36 85.671a10.002 10.002 0 0 1-11.634 8.42l-86.351-15.226c-5.44-.959-9.07-6.145-8.112-11.584l13.851-78.551a10 10 0 0 1 10.799-8.219z\" fill=\"#7044FF\" style=\"mix-blend-mode:multiply\"/><circle fill=\"#0CD1E8\" style=\"mix-blend-mode:multiply\" cx=\"273.5\" cy=\"106.5\" r=\"20.5\"/></g></svg>\r\n"
    },
    "environments": {
      "environment.prod.ts": "export const environment = {\r\n  production: true\r\n};\r\n",
      "environment.ts": "// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n"
    },
    "global.scss": "/* Core CSS required for Ionic components to work properly */\r\n@import \"@ionic/angular/css/core.css\";\r\n\r\n/* Basic CSS for apps built with Ionic */\r\n@import \"@ionic/angular/css/normalize.css\";\r\n@import \"@ionic/angular/css/structure.css\";\r\n@import \"@ionic/angular/css/typography.css\";\r\n@import \"@ionic/angular/css/display.css\";\r\n\r\n/* Optional CSS utils that can be commented out */\r\n@import \"@ionic/angular/css/padding.css\";\r\n@import \"@ionic/angular/css/float-elements.css\";\r\n@import \"@ionic/angular/css/text-alignment.css\";\r\n@import \"@ionic/angular/css/text-transformation.css\";\r\n@import \"@ionic/angular/css/flex-utils.css\";\r\n\r\n/* Custom styles */\r\n:root {\r\n  --ion-color-primary: #3498db;\r\n  --ion-color-secondary: #2ecc71;\r\n  --ion-color-tertiary: #f1c40f;\r\n  --ion-color-success: #2ecc71;\r\n  --ion-color-warning: #f39c12;\r\n  --ion-color-danger: #e74c3c;\r\n  --ion-font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\nion-title {\r\n  font-weight: 700;\r\n}\r\n\r\nion-content {\r\n  --background: #f5f5f5;\r\n}\r\n\r\n.ion-page {\r\n  background-color: #f5f5f5;\r\n}",
    "index.html": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <title>Ionic App</title>\r\n\r\n  <base href=\"/\" />\r\n\r\n  <meta name=\"color-scheme\" content=\"light dark\" />\r\n  <meta name=\"viewport\" content=\"viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\r\n  <meta name=\"format-detection\" content=\"telephone=no\" />\r\n  <meta name=\"msapplication-tap-highlight\" content=\"no\" />\r\n\r\n  <link href=\"https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&display=swap\" rel=\"stylesheet\">\r\n  <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap\" rel=\"stylesheet\">\r\n  <link rel=\"icon\" type=\"image/png\" href=\"assets/icon/favicon.png\" />\r\n\r\n  <!-- add to homescreen for ios -->\r\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\r\n  <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\r\n</head>\r\n\r\n<body>\r\n  <app-root></app-root>\r\n</body>\r\n\r\n</html>\r\n",
    "main.ts": "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n",
    "polyfills.ts": "/**\r\n * This file includes polyfills needed by Angular and is loaded before the app.\r\n * You can add your own extra polyfills to this file.\r\n *\r\n * This file is divided into 2 sections:\r\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\r\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\r\n *      file.\r\n *\r\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\r\n * automatically update themselves. This includes recent versions of Safari, Chrome (including\r\n * Opera), Edge on the desktop, and iOS and Chrome on mobile.\r\n *\r\n * Learn more in https://angular.io/guide/browser-support\r\n */\r\n\r\n/***************************************************************************************************\r\n * BROWSER POLYFILLS\r\n */\r\n\r\n/**\r\n * By default, zone.js will patch all possible macroTask and DomEvents\r\n * user can disable parts of macroTask/DomEvents patch by setting following flags\r\n * because those flags need to be set before `zone.js` being loaded, and webpack\r\n * will put import in the top of bundle, so user need to create a separate file\r\n * in this directory (for example: zone-flags.ts), and put the following flags\r\n * into that file, and then add the following code before importing zone.js.\r\n * import './zone-flags';\r\n *\r\n * The flags allowed in zone-flags.ts are listed here.\r\n *\r\n * The following flags will work for all browsers.\r\n *\r\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\r\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\r\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\r\n *\r\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\r\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\r\n *\r\n *  (window as any).__Zone_enable_cross_context_check = true;\r\n *\r\n */\r\n \r\nimport './zone-flags';\r\n\r\n/***************************************************************************************************\r\n * Zone JS is required by default for Angular itself.\r\n */\r\nimport 'zone.js';  // Included with Angular CLI.\r\n\r\n\r\n/***************************************************************************************************\r\n * APPLICATION IMPORTS\r\n */\r\n",
    "test.ts": "// This file is required by karma.conf.js and loads recursively all the .spec and framework files\r\n\r\nimport 'zone.js/testing';\r\nimport { getTestBed } from '@angular/core/testing';\r\nimport {\r\n  BrowserDynamicTestingModule,\r\n  platformBrowserDynamicTesting\r\n} from '@angular/platform-browser-dynamic/testing';\r\n\r\n// First, initialize the Angular testing environment.\r\ngetTestBed().initTestEnvironment(\r\n  BrowserDynamicTestingModule,\r\n  platformBrowserDynamicTesting(),\r\n);\r\n",
    "theme": {
      "variables.scss": "// For information on how to create your own theme, please see:\r\n// http://ionicframework.com/docs/theming/\r\n"
    },
    "zone-flags.ts": "/**\r\n * Prevents Angular change detection from\r\n * running with certain Web Component callbacks\r\n */\r\n// eslint-disable-next-line no-underscore-dangle\r\n(window as any).__Zone_disable_customElements = true;\r\n"
  }
}