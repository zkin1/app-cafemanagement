{
  "src": {
    "app": {
      "admin-dashboard": {
        "admin-dashboard-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AdminDashboardPage } from './admin-dashboard.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminDashboardPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminDashboardPageRoutingModule {}\r\n",
        "admin-dashboard.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AdminDashboardPageRoutingModule } from './admin-dashboard-routing.module';\r\nimport { AdminDashboardPage } from './admin-dashboard.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AdminDashboardPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [AdminDashboardPage]\r\n})\r\nexport class AdminDashboardPageModule {}",
        "admin-dashboard.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Dashboard de Administrador</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h2>Bienvenido, {{ adminName }}</h2>\r\n  \r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Resumen</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <p>Órdenes de hoy: {{ orderCount }}</p>\r\n      <p>Empleados activos: {{ activeEmployees }}</p>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Usuarios Pendientes de Aprobación</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <ion-list *ngIf=\"pendingUsers.length > 0; else noPendingUsers\">\r\n        <ion-item *ngFor=\"let user of pendingUsers\">\r\n          <ion-label>\r\n            <h2>{{ user.Name }}</h2>\r\n            <p>{{ user.Email }}</p>\r\n          </ion-label>\r\n          <ion-button slot=\"end\" (click)=\"approveUser(user.UserID ?? 0)\">Aprobar</ion-button>\r\n          <ion-button slot=\"end\" color=\"danger\" (click)=\"rejectUser(user.UserID ?? 0)\">Rechazar</ion-button>\r\n        </ion-item>\r\n      </ion-list>\r\n      <ng-template #noPendingUsers>\r\n        <p>No hay usuarios pendientes de aprobación.</p>\r\n      </ng-template>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-button expand=\"block\" routerLink=\"/crud\">Gestionar Menú</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/comandas\">Ver Órdenes</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/employee-management\">Gestionar Empleados</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/admin\">Reportes</ion-button>\r\n  <ion-button expand=\"block\" (click)=\"logout()\">Cerrar Sesión</ion-button>\r\n</ion-content>",
        "admin-dashboard.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  h2 {\r\n    color: #333;\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  ion-card {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    margin-bottom: 20px;\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: #f0f0f0;\r\n      border-bottom: 1px solid #e0e0e0;\r\n      \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n  \r\n      p {\r\n        margin: 8px 0;\r\n        font-size: 16px;\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 10px;\r\n    --background: #5c9ce5;\r\n    --background-hover: #4a90e2;\r\n    --color: #ffffff;\r\n    --border-radius: 8px;\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  ion-card, ion-button {\r\n    animation: fadeIn 0.5s ease-out;\r\n  }",
        "admin-dashboard.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { AdminDashboardPage } from './admin-dashboard.page';\r\n\r\ndescribe('AdminDashboardPage', () => {\r\n  let component: AdminDashboardPage;\r\n  let fixture: ComponentFixture<AdminDashboardPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AdminDashboardPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "admin-dashboard.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoadingController, ToastController } from '@ionic/angular';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-admin-dashboard',\r\n  templateUrl: './admin-dashboard.page.html',\r\n  styleUrls: ['./admin-dashboard.page.scss'],\r\n})\r\nexport class AdminDashboardPage implements OnInit {\r\n  adminName: string = 'Admin';\r\n  orderCount: number = 0;\r\n  activeEmployees: number = 0;\r\n  pendingUsers: User[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private loadingController: LoadingController,\r\n    private toastController: ToastController,\r\n    private databaseService: DatabaseService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loadDashboardData();\r\n    this.loadPendingUsers();\r\n  }\r\n\r\n  async loadDashboardData() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando datos...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n      this.adminName = currentUser.name || 'Admin';\r\n  \r\n      // Obtener el número real de órdenes del día\r\n      this.orderCount = await this.databaseService.getOrderCountForToday();\r\n  \r\n      // Obtener el número real de empleados activos\r\n      this.activeEmployees = await this.databaseService.getActiveEmployeesCount();\r\n  \r\n    } catch (error) {\r\n      console.error('Error al cargar datos del dashboard:', error);\r\n      this.presentToast('Error al cargar datos. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async loadPendingUsers() {\r\n    try {\r\n      console.log('Cargando usuarios pendientes');\r\n      const users = await this.databaseService.getPendingUsers().toPromise();\r\n      console.log('Usuarios pendientes obtenidos:', users);\r\n      this.pendingUsers = users || []; \r\n    } catch (error) {\r\n      console.error('Error al cargar usuarios pendientes:', error);\r\n      this.presentToast('Error al cargar usuarios pendientes.');\r\n      this.pendingUsers = []; \r\n    }\r\n  }\r\n\r\n  async approveUser(userId: number) {\r\n    try {\r\n      console.log('Intentando aprobar usuario con ID:', userId);\r\n      const success = await this.databaseService.updateUserApprovalStatus(userId, 'approved').toPromise();\r\n      console.log('Resultado de la aprobación:', success);\r\n      if (success) {\r\n        this.presentToast('Usuario aprobado con éxito.');\r\n        await this.loadPendingUsers(); \r\n        console.log('Lista de usuarios pendientes actualizada');\r\n      } else {\r\n        throw new Error('No se pudo aprobar el usuario');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al aprobar usuario:', error);\r\n      this.presentToast('Error al aprobar usuario.');\r\n    }\r\n  }\r\n  async rejectUser(userId: number) {\r\n    try {\r\n      console.log('Intentando rechazar usuario con ID:', userId);\r\n      const success = await this.databaseService.updateUserApprovalStatus(userId, 'rejected').toPromise();\r\n      console.log('Resultado del rechazo:', success);\r\n      if (success) {\r\n        this.presentToast('Usuario rechazado.');\r\n        await this.loadPendingUsers();\r\n        console.log('Lista de usuarios pendientes actualizada');\r\n      } else {\r\n        throw new Error('No se pudo rechazar el usuario');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al rechazar usuario:', error);\r\n      this.presentToast('Error al rechazar usuario.');\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'bottom'\r\n    });\r\n    toast.present();\r\n  }\r\n}"
      },
      "admin": {
        "admin-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AdminPage } from './admin.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminPageRoutingModule {}\r\n",
        "admin.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { AdminPageRoutingModule } from './admin-routing.module';\r\nimport { AdminPage } from './admin.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AdminPageRoutingModule\r\n  ],\r\n  declarations: [AdminPage]\r\n})\r\nexport class AdminPageModule {}",
        "admin.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>Panel de Administración</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col size=\"12\" size-md=\"6\">\r\n        <ion-card class=\"dashboard-card\">\r\n          <ion-card-header>\r\n            <ion-card-title>Ventas Totales</ion-card-title>\r\n          </ion-card-header>\r\n          <ion-card-content>\r\n            <h2 class=\"big-number\">{{ totalSales | currency:'CLP':'symbol-narrow':'1.0-0' }}</h2>\r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>\r\n      <ion-col size=\"12\" size-md=\"6\">\r\n        <ion-card class=\"dashboard-card\">\r\n          <ion-card-header>\r\n            <ion-card-title>Órdenes Canceladas</ion-card-title>\r\n          </ion-card-header>\r\n          <ion-card-content>\r\n            <h2 class=\"big-number danger\">{{ ordenesCancel.cantidad }}</h2>\r\n            <p>Total: {{ ordenesCancel.total | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>\r\n    </ion-row>\r\n\r\n    <ion-row>\r\n      <ion-col size=\"12\" size-md=\"6\">\r\n        <ion-card class=\"dashboard-card\">\r\n          <ion-card-header>\r\n            <ion-card-title>Productos Más Vendidos</ion-card-title>\r\n          </ion-card-header>\r\n          <ion-card-content>\r\n            <ion-list>\r\n              <ion-item *ngFor=\"let product of topProducts; let i = index\">\r\n                <ion-label>\r\n                  <h2>{{ i + 1 }}. {{ product.name }}</h2>\r\n                  <p>Ventas: {{ product.sales }}</p>\r\n                </ion-label>\r\n              </ion-item>\r\n            </ion-list>\r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>\r\n      <ion-col size=\"12\" size-md=\"6\">\r\n        <ion-card class=\"dashboard-card\">\r\n          <ion-card-header>\r\n            <ion-card-title>Ventas por Día</ion-card-title>\r\n          </ion-card-header>\r\n          <ion-card-content>\r\n            <canvas #dailySalesChart></canvas>\r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\r\n    <ion-fab-button (click)=\"generateReport()\">\r\n      <ion-icon name=\"document-text-outline\"></ion-icon>\r\n    </ion-fab-button>\r\n  </ion-fab>\r\n</ion-content>",
        "admin.page.scss": ":host {\r\n  --color-background: #ebf5fb;\r\n  --color-text: #1c2833;\r\n  --color-light: #f7f9f9;\r\n  --color-border: #E0D8D3;\r\n  --color-button: #1c2833;\r\n  --color-primary: #3498db;\r\n  --color-success: #2ecc71;\r\n  --color-warning: #f39c12;\r\n  --color-danger: #e74c3c;\r\n}\r\n\r\nion-content {\r\n  --background: var(--color-background);\r\n}\r\n\r\n.main-title {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: var(--color-primary);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.section-title {\r\n  font-size: 24px;\r\n  color: var(--color-text);\r\n  margin-bottom: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\nion-card {\r\n  background-color: var(--color-light);\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.total-sales-card {\r\n  background: linear-gradient(135deg, var(--color-primary), var(--color-success));\r\n\r\n  ion-card-header {\r\n    background: rgba(255, 255, 255, 0.1);\r\n  }\r\n\r\n  ion-card-title, .total-amount {\r\n    color: white;\r\n  }\r\n\r\n  .total-amount {\r\n    font-size: 36px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    margin-top: 20px;\r\n  }\r\n}\r\n\r\n.top-products-card {\r\n  ion-item {\r\n    --background: transparent;\r\n    --border-color: var(--color-border);\r\n    --padding-start: 0;\r\n    --inner-padding-end: 0;\r\n  }\r\n\r\n  ion-badge {\r\n    font-size: 14px;\r\n    padding: 4px 8px;\r\n    background-color: var(--color-primary);\r\n  }\r\n}\r\n\r\n.daily-sales-card {\r\n  .chart-container {\r\n    position: relative;\r\n    height: 300px;\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n  }\r\n}\r\n\r\n.generate-report-btn {\r\n  margin-top: 20px;\r\n  --background: var(--color-button);\r\n  --box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nion-list {\r\n  background: transparent;\r\n\r\n  ion-item {\r\n    --background: transparent;\r\n    --padding-start: 0;\r\n\r\n    h2 {\r\n      font-weight: bold;\r\n    }\r\n\r\n    p {\r\n      color: var(--ion-color-medium);\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .main-title {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .section-title {\r\n    font-size: 20px;\r\n  }\r\n\r\n  .total-amount {\r\n    font-size: 28px;\r\n  }\r\n\r\n  .chart-container {\r\n    position: relative;\r\n    height: 50vh;\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n    padding: 10px;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .main-title {\r\n    font-size: 22px;\r\n  }\r\n\r\n  .section-title {\r\n    font-size: 18px;\r\n  }\r\n\r\n\r\n  .chart-container {\r\n    position: relative;\r\n    height: 50vh;\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n    padding: 10px;\r\n  }\r\n\r\n  .dashboard-card {\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-card-header {\r\n      background-color: var(--ion-color-light);\r\n    }\r\n  \r\n    ion-card-title {\r\n      font-size: 1.2rem;\r\n      font-weight: bold;\r\n    }\r\n  \r\n    .big-number {\r\n      font-size: 2.5rem;\r\n      font-weight: bold;\r\n      color: var(--ion-color-primary);\r\n      margin: 10px 0;\r\n      text-align: center;\r\n  \r\n      &.danger {\r\n        color: var(--ion-color-danger);\r\n      }\r\n    }\r\n  }\r\n\r\n  canvas {\r\n    width: 100% !important;\r\n    height: 100% !important;\r\n  }\r\n  ion-fab-button {\r\n    --background: var(--ion-color-primary);\r\n    --color: var(--ion-color-light);\r\n  }\r\n  \r\n}",
        "admin.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { AdminPage } from './admin.page';\r\n\r\ndescribe('AdminPage', () => {\r\n  let component: AdminPage;\r\n  let fixture: ComponentFixture<AdminPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AdminPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "admin.page.ts": "import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController, Platform, AlertController } from '@ionic/angular';\r\nimport * as pdfMake from 'pdfmake/build/pdfmake';\r\nimport * as pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport { TDocumentDefinitions } from 'pdfmake/interfaces';\r\nimport { Chart, ChartConfiguration } from 'chart.js/auto';\r\nimport { Subscription } from 'rxjs';\r\nimport { Capacitor, Plugins } from '@capacitor/core';\r\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\r\nimport { App } from '@capacitor/app';\r\n\r\nconst { Permissions } = Plugins;\r\nconst { Share } = Plugins;\r\n\r\n// Configuración de pdfMake\r\n(pdfMake as any).vfs = pdfFonts.pdfMake.vfs;\r\n\r\ninterface DailySale {\r\n  day: string;\r\n  amount: number;\r\n  canceledAmount: number;\r\n}\r\n\r\ninterface TopProduct {\r\n  name: string;\r\n  sales: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  templateUrl: './admin.page.html',\r\n  styleUrls: ['./admin.page.scss'],\r\n})\r\nexport class AdminPage implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('dailySalesChart') private chartRef!: ElementRef;\r\n  private chart: Chart | undefined;\r\n  totalSales: number = 0;\r\n  topProducts: TopProduct[] = [];\r\n  dailySales: { day: string; amount: number; canceledAmount: number }[] = [];\r\n  private subscriptions: Subscription = new Subscription();\r\n\r\n  ventasRealizadas: number = 0;\r\n  ventasCanceladas: number = 0;\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private platform: Platform,\r\n    private alertController: AlertController  \r\n  ) {\r\n    (pdfMake as any).vfs = pdfFonts.pdfMake.vfs;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadStatistics();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.dailySales.length > 0) {\r\n      this.createChart();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n  }\r\n\r\n  async loadStatistics() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando estadísticas...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const endDate = new Date();\r\n      const startDate = new Date(endDate);\r\n      startDate.setDate(startDate.getDate() - 7); // Últimos 7 días\r\n  \r\n      this.ventasRealizadas = await this.databaseService.calculateTotalSales(\r\n        startDate.toISOString().split('T')[0],\r\n        endDate.toISOString().split('T')[0],\r\n        ['Solicitado', 'En proceso', 'Listo', 'Entregado']\r\n      );\r\n  \r\n      this.ventasCanceladas = await this.databaseService.calculateTotalSales(\r\n        startDate.toISOString().split('T')[0],\r\n        endDate.toISOString().split('T')[0],\r\n        ['Cancelado']\r\n      );\r\n  \r\n      this.ordenesCancel = {\r\n        cantidad: await this.databaseService.getOrdersCount(['Cancelado']),\r\n        total: await this.databaseService.calculateTotalSales(\r\n          startDate.toISOString().split('T')[0],\r\n          endDate.toISOString().split('T')[0],\r\n          ['Cancelado']\r\n        )\r\n      };\r\n  \r\n      const [topSellingProducts, dailySales] = await Promise.all([\r\n        this.databaseService.getTopSellingProducts(5),\r\n        this.getDailySales(startDate, endDate)\r\n      ]);\r\n  \r\n      this.totalSales = this.ventasRealizadas;\r\n      this.topProducts = topSellingProducts.map(p => ({\r\n        name: p.name,\r\n        sales: p.totalSold\r\n      }));\r\n      this.dailySales = dailySales;\r\n  \r\n      this.createChart();\r\n    } catch (error) {\r\n      console.error('Error al cargar estadísticas:', error);\r\n      this.presentToast('Error al cargar estadísticas. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private createChart() {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n    if (!this.chartRef) {\r\n      console.error('Chart reference not found');\r\n      return;\r\n    }\r\n  \r\n    const ctx = this.chartRef.nativeElement.getContext('2d');\r\n    if (!ctx) {\r\n      console.error('Unable to get 2D context for canvas');\r\n      return;\r\n    }\r\n  \r\n    const data = {\r\n      labels: this.dailySales.map(sale => sale.day),\r\n      datasets: [\r\n        {\r\n          label: 'Ventas Realizadas',\r\n          data: this.dailySales.map(sale => sale.amount),\r\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1\r\n        },\r\n        {\r\n          label: 'Ventas Canceladas',\r\n          data: this.dailySales.map(sale => sale.canceledAmount),\r\n          backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n          borderColor: 'rgba(255, 99, 132, 1)',\r\n          borderWidth: 1\r\n        }\r\n      ]\r\n    };\r\n  \r\n    const config: ChartConfiguration = {\r\n      type: 'line', \r\n      data: {\r\n        labels: this.dailySales.map(sale => sale.day),\r\n        datasets: [\r\n          {\r\n            label: 'Ventas Realizadas',\r\n            data: this.dailySales.map(sale => sale.amount),\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            fill: true\r\n          },\r\n          {\r\n            label: 'Ventas Canceladas',\r\n            data: this.dailySales.map(sale => sale.canceledAmount),\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n            fill: true\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n            labels: {\r\n              boxWidth: 12,\r\n              font: {\r\n                size: 10\r\n              }\r\n            }\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Ventas por Día',\r\n            font: {\r\n              size: 14\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Ventas (CLP)',\r\n              font: {\r\n                size: 10\r\n              }\r\n            },\r\n            ticks: {\r\n              font: {\r\n                size: 8\r\n              },\r\n              callback: function(value) {\r\n                return '$ ' + value.toLocaleString('es-CL');\r\n              }\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: false\r\n            },\r\n            ticks: {\r\n              font: {\r\n                size: 8\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  \r\n    this.chart = new Chart(ctx, config);\r\n  }\r\n\r\n  private async getDailySales(startDate: Date, endDate: Date): Promise<DailySale[]> {\r\n    const dailySales: DailySale[] = [];\r\n    const daysOfWeek = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\r\n    let currentDate = new Date(startDate);\r\n    \r\n    while (currentDate <= endDate) {\r\n      const [dayTotal, canceledTotal] = await Promise.all([\r\n        this.databaseService.calculateTotalSales(\r\n          currentDate.toISOString().split('T')[0],\r\n          currentDate.toISOString().split('T')[0],\r\n          ['Solicitado', 'En proceso', 'Listo', 'Entregado']\r\n        ),\r\n        this.databaseService.calculateTotalSales(\r\n          currentDate.toISOString().split('T')[0],\r\n          currentDate.toISOString().split('T')[0],\r\n          ['Cancelado']\r\n        )\r\n      ]);\r\n      \r\n      dailySales.push({\r\n        day: daysOfWeek[currentDate.getDay()],\r\n        amount: dayTotal,\r\n        canceledAmount: canceledTotal\r\n      });\r\n  \r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n  \r\n    return dailySales;\r\n  }\r\n\r\n  private async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'bottom'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  private async checkAndRequestStoragePermission(): Promise<boolean> {\r\n    try {\r\n      const permissionStatus = await Permissions['checkPermissions']({ permissions: ['storage'] });\r\n      console.log('Estado inicial de permisos:', permissionStatus);\r\n\r\n      if (permissionStatus.storage !== 'granted') {\r\n        console.log('Solicitando permisos de almacenamiento...');\r\n        const requestResult = await Permissions['requestPermissions']({ permissions: ['storage'] });\r\n        console.log('Resultado de la solicitud de permisos:', requestResult);\r\n\r\n        if (requestResult.storage !== 'granted') {\r\n          await this.showPermissionDeniedAlert();\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error al verificar o solicitar permisos:', error);\r\n      await this.presentToast('Error al verificar permisos: ' + JSON.stringify(error));\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async showPermissionDeniedAlert() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Permisos necesarios',\r\n      message: 'Esta aplicación necesita permisos de almacenamiento para guardar informes. Por favor, habilita los permisos en la configuración de la aplicación.',\r\n      buttons: ['OK']\r\n    });\r\n    await alert.present();\r\n  }\r\n  async generateReport() {\r\n    if (Capacitor.isNativePlatform()) {\r\n      try {\r\n        // Intentamos escribir un archivo de prueba para verificar los permisos\r\n        await Filesystem.writeFile({\r\n          path: 'test.txt',\r\n          data: 'This is a test',\r\n          directory: Directory.Documents,\r\n          encoding: Encoding.UTF8\r\n        });\r\n  \r\n        // Si llegamos aquí, tenemos permisos. Eliminamos el archivo de prueba.\r\n        await Filesystem.deleteFile({\r\n          path: 'test.txt',\r\n          directory: Directory.Documents\r\n        });\r\n      } catch (error) {\r\n        console.error('Error al verificar permisos:', error);\r\n        const alertResult = await this.showPermissionAlert();\r\n        if (!alertResult) {\r\n          await this.presentToast('Se necesitan permisos para generar el informe');\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  \r\n    const loading = await this.loadingController.create({\r\n      message: 'Generando informe...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const endDate = new Date();\r\n      const startDate = new Date(endDate);\r\n      startDate.setDate(startDate.getDate() - 30); // Últimos 30 días\r\n  \r\n      const [totalSales, topSellingProducts, dailySales] = await Promise.all([\r\n        this.databaseService.calculateTotalSales(\r\n          startDate.toISOString().split('T')[0],\r\n          endDate.toISOString().split('T')[0]\r\n        ),\r\n        this.databaseService.getTopSellingProducts(5),\r\n        this.getDailySales(startDate, endDate)\r\n      ]);\r\n  \r\n      const documentDefinition: TDocumentDefinitions = {\r\n        content: [\r\n          { text: 'Informe de Ventas', style: 'header' },\r\n          { text: `Período: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`, style: 'subheader' },\r\n          { text: `Ventas Totales: $${totalSales.toLocaleString('es-CL')}`, style: 'subheader' },\r\n          { text: 'Productos Más Vendidos', style: 'subheader' },\r\n          {\r\n            ul: topSellingProducts.map(product => `${product.name}: ${product.totalSold} unidades`)\r\n          },\r\n          { text: 'Ventas Diarias', style: 'subheader' },\r\n          {\r\n            table: {\r\n              headerRows: 1,\r\n              widths: ['*', '*'],\r\n              body: [\r\n                ['Día', 'Ventas'],\r\n                ...dailySales.map(sale => [sale.day, `$${sale.amount.toLocaleString('es-CL')}`])\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        styles: {\r\n          header: {\r\n            fontSize: 18,\r\n            bold: true,\r\n            margin: [0, 0, 0, 10]\r\n          },\r\n          subheader: {\r\n            fontSize: 14,\r\n            bold: true,\r\n            margin: [0, 10, 0, 5]\r\n          }\r\n        }\r\n      };\r\n  \r\n      const pdfDocGenerator = pdfMake.createPdf(documentDefinition);\r\n  \r\n      if (Capacitor.isNativePlatform()) {\r\n        pdfDocGenerator.getBase64(async (base64) => {\r\n          const fileName = `informe_ventas_${startDate.toISOString().split('T')[0]}_${endDate.toISOString().split('T')[0]}.pdf`;\r\n          \r\n          try {\r\n            const result = await Filesystem.writeFile({\r\n              path: `Download/${fileName}`,\r\n              data: base64,\r\n              directory: Directory.ExternalStorage,\r\n              encoding: Encoding.UTF8\r\n            });\r\n  \r\n            console.log('Archivo guardado en:', result.uri);\r\n            await this.presentToast(`Informe generado y guardado en Descargas/${fileName}`);\r\n          } catch (error) {\r\n            console.error('Error al guardar el archivo:', error);\r\n            if (error instanceof Error) {\r\n              if (error.message.includes('Permission denied')) {\r\n                await this.presentToast('No se tienen permisos para guardar el archivo. Por favor, verifique los permisos de la aplicación.');\r\n              } else {\r\n                await this.presentToast('Error al guardar el informe: ' + error.message);\r\n              }\r\n            } else {\r\n              await this.presentToast('Error desconocido al guardar el informe');\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        // Para navegadores web\r\n        pdfDocGenerator.download(`informe_ventas_${startDate.toISOString().split('T')[0]}_${endDate.toISOString().split('T')[0]}.pdf`);\r\n        await this.presentToast('Informe generado y descargado con éxito');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al generar el informe:', error);\r\n      await this.presentToast('Error al generar el informe. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private async showPermissionAlert(): Promise<boolean> {\r\n    return new Promise(async (resolve) => {\r\n      const alert = await this.alertController.create({\r\n        header: 'Permisos necesarios',\r\n        message: 'Esta aplicación necesita acceso al almacenamiento para guardar informes. Por favor, habilita los permisos en la configuración de la aplicación.',\r\n        buttons: [\r\n          {\r\n            text: 'Cancelar',\r\n            role: 'cancel',\r\n            handler: () => resolve(false)\r\n          },\r\n          {\r\n            text: 'Entendido',\r\n            handler: () => {\r\n              this.presentToast('Por favor, abra la configuración de la aplicación y otorgue los permisos necesarios.');\r\n              resolve(true);\r\n            }\r\n          }\r\n        ]\r\n      });\r\n\r\n      await alert.present();\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  async requestStoragePermission() {\r\n    if (Capacitor.isNativePlatform()) {\r\n      try {\r\n        const permissionStatus = await Permissions['query']({ name: 'storage' });\r\n        if (permissionStatus.state !== 'granted') {\r\n          const requestResult = await Permissions['request']({ name: 'storage' });\r\n          return requestResult.state === 'granted';\r\n        }\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error requesting permissions:', error);\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  ordenesCancel = {\r\n    cantidad: 0,\r\n    total: 0\r\n  };\r\n}"
      },
      "app-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './guards/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'login',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () => import('./admin/admin.module').then(m => m.AdminPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'admin-dashboard',\r\n    loadChildren: () => import('./admin-dashboard/admin-dashboard.module').then(m => m.AdminDashboardPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'carro-compras',\r\n    loadChildren: () => import('./carro-compras/carro-compras.module').then(m => m.CarroComprasPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'comandas',\r\n    loadChildren: () => import('./comandas/comandas.module').then(m => m.ComandasPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'crud',\r\n    loadChildren: () => import('./crud/crud.module').then(m => m.CrudPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'employee-dashboard',\r\n    loadChildren: () => import('./employee-dashboard/employee-dashboard.module').then(m => m.EmployeeDashboardPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'employee-management',\r\n    loadChildren: () => import('./employee-management/employee-management.module').then(m => m.EmployeeManagementPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () => import('./login/login.module').then(m => m.LoginPageModule)\r\n  },\r\n  {\r\n    path: 'main',\r\n    loadChildren: () => import('./main/main.module').then(m => m.MainPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'perfil',\r\n    loadChildren: () => import('./perfil/perfil.module').then(m => m.PerfilPageModule),\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'register',\r\n    loadChildren: () => import('./register/register.module').then(m => m.RegisterPageModule)\r\n  },\r\n  {\r\n    path: 'not-found',\r\n    loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundPageModule)\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'not-found',\r\n    pathMatch: 'full'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }",
      "app.component.html": "<ion-app>\r\n  <ion-header>\r\n    <ion-toolbar>\r\n      <ion-buttons slot=\"start\">\r\n        <ion-menu-button></ion-menu-button>\r\n      </ion-buttons>\r\n    </ion-toolbar>\r\n  </ion-header>\r\n\r\n  <ion-split-pane contentId=\"main-content\">\r\n    <ion-menu contentId=\"main-content\" type=\"overlay\">\r\n      <ion-content>\r\n        <ion-list id=\"inbox-list\">\r\n          <ion-list-header>Cafetería App</ion-list-header>\r\n          <ion-note *ngIf=\"isLoggedIn\">Bienvenido, {{ currentUserName }}</ion-note>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/main\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"home-outline\"></ion-icon>\r\n              <ion-label>Inicio</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/carro-compras\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"cart-outline\"></ion-icon>\r\n              <ion-label>Carrito</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/comandas\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"receipt-outline\"></ion-icon>\r\n              <ion-label>Comandas</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isAdmin\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/admin-dashboard\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon name=\"stats-chart-outline\"></ion-icon>\r\n              <ion-label>Dashboard Admin</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isEmployee\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/employee-dashboard\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon name=\"briefcase-outline\"></ion-icon>\r\n              <ion-label>Dashboard Empleado</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isAdmin\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/admin\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon name=\"briefcase-outline\"></ion-icon>\r\n              <ion-label>Reporte ventas</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"!isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/login\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"log-in-outline\"></ion-icon>\r\n              <ion-label>Iniciar Sesión</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"!isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/register\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"person-add-outline\"></ion-icon>\r\n              <ion-label>Registrarse</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item routerDirection=\"root\" routerLink=\"/perfil\" lines=\"none\" detail=\"false\" routerLinkActive=\"selected\">\r\n              <ion-icon slot=\"start\" name=\"person-outline\"></ion-icon>\r\n              <ion-label>Perfil</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n\r\n          <ion-menu-toggle auto-hide=\"false\" *ngIf=\"isLoggedIn\">\r\n            <ion-item lines=\"none\" (click)=\"logout()\">\r\n              <ion-icon slot=\"start\" name=\"log-out-outline\"></ion-icon>\r\n              <ion-label>Cerrar Sesión</ion-label>\r\n            </ion-item>\r\n          </ion-menu-toggle>\r\n        </ion-list>\r\n      </ion-content>\r\n    </ion-menu>\r\n    <ion-router-outlet id=\"main-content\"></ion-router-outlet>\r\n  </ion-split-pane>\r\n</ion-app>",
      "app.component.scss": "ion-menu {\r\n    --background: #ebf5fb;\r\n    --width: 280px;\r\n  \r\n    ion-content {\r\n      --background: #ebf5fb;\r\n    }\r\n  \r\n    ion-list {\r\n      background: transparent;\r\n      padding-top: 20px;\r\n    }\r\n  \r\n    ion-list-header {\r\n      --background: transparent;\r\n      color: #1c2833;\r\n      font-size: 24px;\r\n      font-weight: bold;\r\n      padding-bottom: 20px;\r\n      display: flex;\r\n      align-items: center;\r\n  \r\n      .menu-header-icon {\r\n        font-size: 28px;\r\n        margin-right: 10px;\r\n      }\r\n    }\r\n  \r\n    ion-note {\r\n      color: #4a4a4a;\r\n      font-size: 14px;\r\n      margin-bottom: 30px;\r\n      padding-left: 16px;\r\n    }\r\n  \r\n    ion-item {\r\n      --background: transparent;\r\n      --color: #1c2833;\r\n      --padding-start: 16px;\r\n      --padding-end: 16px;\r\n      --min-height: 50px;\r\n      margin-bottom: 5px;\r\n      border-radius: 0 25px 25px 0;\r\n      transition: background-color 0.3s ease;\r\n  \r\n      &.selected, &:hover {\r\n        --background: rgba(28, 40, 51, 0.1);\r\n      }\r\n    }\r\n  \r\n    ion-icon {\r\n      color: #1c2833;\r\n      margin-right: 20px;\r\n      font-size: 22px;\r\n    }\r\n  \r\n    ion-label {\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n  \r\n  ion-router-outlet {\r\n    --background: #ebf5fb;\r\n  }\r\n  \r\n  ion-menu-button {\r\n    color: #1c2833;\r\n  }\r\n  \r\n  // Animación para el contenido principal\r\n  @keyframes fadeInUp {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate3d(0, 30px, 0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate3d(0, 0, 0);\r\n    }\r\n  }\r\n  \r\n  ion-router-outlet {\r\n    animation: fadeInUp 0.5s ease-out;\r\n  }",
      "app.component.spec.ts": "import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { TestBed } from '@angular/core/testing';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\ndescribe('AppComponent', () => {\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      declarations: [AppComponent],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n    }).compileComponents();\r\n  });\r\n\r\n  it('should create the app', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app).toBeTruthy();\r\n  });\r\n\r\n});\r\n",
      "app.component.ts": "import { Component } from '@angular/core';\r\nimport { Platform, AlertController, ToastController } from '@ionic/angular';\r\nimport { DatabaseService } from './services/database.service';\r\nimport { addIcons } from 'ionicons';\r\nimport { Capacitor } from '@capacitor/core';\r\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\r\nimport { Router } from '@angular/router';\r\nimport { App } from '@capacitor/app';\r\n\r\n\r\nimport { \r\n  homeOutline, \r\n  cartOutline, \r\n  personOutline, \r\n  logInOutline, \r\n  personAddOutline,\r\n  settingsOutline,\r\n  logOutOutline,\r\n  statsChartOutline,\r\n  briefcaseOutline,\r\n  cafeOutline\r\n} from 'ionicons/icons';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  \r\n  constructor(\r\n    private platform: Platform,\r\n    private databaseService: DatabaseService,\r\n    private router: Router,\r\n    private alertController: AlertController,\r\n    private toastController: ToastController \r\n  ) {\r\n    this.initializeApp();\r\n    this.addIonicons();\r\n  }\r\n\r\n  private addIonicons() {\r\n    addIcons({\r\n      homeOutline,\r\n      cartOutline,\r\n      personOutline,\r\n      logInOutline,\r\n      personAddOutline,\r\n      settingsOutline,\r\n      logOutOutline,\r\n      statsChartOutline,\r\n      briefcaseOutline,\r\n      cafeOutline\r\n    });\r\n  }\r\n\r\n  async initializeApp() {\r\n    try {\r\n      await this.platform.ready();\r\n      console.log('Platform ready');\r\n      console.log('Is native platform:', Capacitor.isNativePlatform());\r\n  \r\n      console.log('Initializing database...');\r\n      await this.databaseService.initializeDatabase();\r\n      console.log('Database initialized successfully');\r\n  \r\n      this.databaseService.dbState().subscribe({\r\n        next: async (isReady) => {\r\n          if (isReady) {\r\n            console.log('Database is ready');\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error in dbState subscription:', error);\r\n          this.presentAlert('Error', 'Database state subscription error');\r\n        }\r\n      });\r\n  \r\n      if (Capacitor.isNativePlatform()) {\r\n        await this.checkPermissions();\r\n      }\r\n  \r\n    } catch (error) {\r\n      console.error('Error initializing app:', error);\r\n      await this.presentAlert('Error', 'Failed to initialize the app. Please try again.');\r\n    }\r\n  }\r\n\r\n  async checkPermissions() {\r\n    if (Capacitor.isNativePlatform()) {\r\n      try {\r\n        await Filesystem.writeFile({\r\n          path: 'test.txt',\r\n          data: 'This is a test',\r\n          directory: Directory.Documents,\r\n          encoding: Encoding.UTF8\r\n        });\r\n\r\n        await Filesystem.deleteFile({\r\n          path: 'test.txt',\r\n          directory: Directory.Documents\r\n        });\r\n\r\n        console.log('Storage permission granted');\r\n      } catch (error) {\r\n        console.error('Storage permission not granted:', error);\r\n        await this.requestPermissions();\r\n      }\r\n    }\r\n  }\r\n  async requestPermissions() {\r\n    if (Capacitor.isNativePlatform()) {\r\n      const alert = await this.alertController.create({\r\n        header: 'Permisos necesarios',\r\n        message: 'Esta aplicación necesita acceso al almacenamiento. Por favor, otorgue los permisos en la configuración de la aplicación.',\r\n        buttons: [\r\n          {\r\n            text: 'Cancelar',\r\n            role: 'cancel'\r\n          },\r\n          {\r\n            text: 'Entendido',\r\n            handler: () => {\r\n              this.presentToast('Por favor, abra la configuración de la aplicación y otorgue los permisos necesarios.');\r\n            }\r\n          }\r\n        ]\r\n      });\r\n  \r\n      await alert.present();\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 3000,\r\n      position: 'bottom'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  private async checkAndInsertSeedData() {\r\n    try {\r\n      const users = await this.databaseService.fetchUsers().toPromise();\r\n      if (users && users.length === 0) {\r\n        console.log('No users found, inserting seed data');\r\n        // Asumiendo que tienes un método para insertar datos de prueba\r\n        // await this.databaseService.insertSeedData();\r\n        console.log('Seed data inserted successfully');\r\n      } else {\r\n        console.log('Users already exist, skipping seed data insertion');\r\n      }\r\n\r\n      // Prueba de consulta\r\n      const products = await this.databaseService.fetchProducts().toPromise();\r\n      console.log('Products in database:', products ? products.length : 0);\r\n\r\n    } catch (error) {\r\n      console.error('Error checking or inserting seed data:', error);\r\n      await this.presentAlert('Error', 'Failed to check or insert seed data.');\r\n    }\r\n  }\r\n\r\n\r\n  get isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n\r\nget isAdmin(): boolean {\r\n  const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n  return user.role === 'admin';\r\n}\r\n\r\n  get isEmployee(): boolean {\r\n    const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n    return user.role === 'employee';\r\n  }\r\n\r\n  get currentUserName(): string {\r\n    const userString = localStorage.getItem('currentUser');\r\n    console.log('Usuario almacenado:', userString);\r\n    if (userString) {\r\n      const user = JSON.parse(userString);\r\n      console.log('Usuario parseado:', JSON.stringify(user));\r\n      return user.name || 'Usuario';\r\n    }\r\n    return 'Usuario';\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  checkAuthState() {\r\n    const user = JSON.parse(localStorage.getItem('currentUser') || 'null');\r\n    if (user) {\r\n      // Usuario autenticado\r\n      console.log('Usuario autenticado:', user);\r\n      if (this.router.url === '/login') {\r\n        this.router.navigate(['/main']);\r\n      }\r\n    } else {\r\n      // Usuario no autenticado\r\n      console.log('Usuario no autenticado');\r\n      if (this.router.url !== '/login' && this.router.url !== '/register') {\r\n        this.router.navigate(['/login']);\r\n      }\r\n    }\r\n  }\r\n\r\n  async presentAlert(header: string, message: string) {\r\n    const alert = await this.alertController.create({\r\n      header,\r\n      message,\r\n      buttons: ['OK']\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n}",
      "app.module.ts": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouteReuseStrategy } from '@angular/router';\r\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { DatabaseService } from './services/database.service';\r\nimport { SQLite } from '@awesome-cordova-plugins/sqlite/ngx';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule, \r\n    IonicModule.forRoot(), \r\n    AppRoutingModule\r\n  ],\r\n  providers: [\r\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\r\n    DatabaseService,\r\n    SQLite,\r\n    { provide: 'PLATFORM', useValue: Capacitor }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}",
      "carro-compras": {
        "carro-compras-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CarroComprasPage } from './carro-compras.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CarroComprasPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CarroComprasPageRoutingModule {}\r\n",
        "carro-compras.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CarroComprasPageRoutingModule } from './carro-compras-routing.module';\r\nimport { CarroComprasPage } from './carro-compras.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    CarroComprasPageRoutingModule\r\n  ],\r\n  declarations: [CarroComprasPage]\r\n})\r\nexport class CarroComprasPageModule {}",
        "carro-compras.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/main\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Orden #{{ currentOrder.orderNumber }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h1>Resumen de la Orden</h1>\r\n  \r\n  <ion-list class=\"cart-items\">\r\n    <ion-item *ngFor=\"let item of currentOrder.items\">\r\n      <ion-thumbnail slot=\"start\">\r\n        <img [src]=\"item.image\" [alt]=\"item.name\">\r\n      </ion-thumbnail>\r\n      <ion-label>\r\n        <h2>{{ item.name }}</h2>\r\n        <p>{{ item.selectedSize }}, leche de {{ item.selectedMilk }}</p>\r\n        <p>Cantidad: {{ item.quantity }}</p>\r\n      </ion-label>\r\n      <ion-note slot=\"end\" color=\"primary\">${{ (item.finalPrice * item.quantity).toFixed(0) }}</ion-note>\r\n    </ion-item>\r\n  </ion-list>\r\n  \r\n  <div class=\"order-details\">\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Número de Mesa</ion-label>\r\n      <ion-input type=\"number\" [(ngModel)]=\"currentOrder.tableNumber\"></ion-input>\r\n    </ion-item>\r\n    \r\n    <ion-item>\r\n      <ion-label position=\"floating\">Nota</ion-label>\r\n      <ion-textarea [(ngModel)]=\"currentOrder.notes\"></ion-textarea>\r\n    </ion-item>\r\n\r\n    <ion-item class=\"totalAmount\">\r\n      <ion-label>\r\n        <h2>Total</h2>\r\n      </ion-label>\r\n      <ion-note slot=\"end\" color=\"primary\">${{ calculateTotal().toFixed(0) }}</ion-note>\r\n    </ion-item>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-button expand=\"block\" (click)=\"confirmarOrden()\">Confirmar Orden</ion-button>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"bottom\"\r\n  color=\"success\"\r\n></ion-toast>",
        "carro-compras.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--ion-color-light);\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    color: var(--ion-color-dark);\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .cart-items {\r\n    background: transparent;\r\n  \r\n    ion-item {\r\n      --background: #ffffff;\r\n      --border-radius: 10px;\r\n      margin-bottom: 10px;\r\n      --padding-start: 0;\r\n  \r\n      ion-thumbnail {\r\n        --size: 80px;\r\n        --border-radius: 8px;\r\n        margin-right: 16px;\r\n      }\r\n  \r\n      ion-label {\r\n        h2 {\r\n          font-size: 18px;\r\n          font-weight: 600;\r\n          color: var(--ion-color-dark);\r\n        }\r\n  \r\n        p {\r\n          font-size: 14px;\r\n          color: var(--ion-color-medium);\r\n        }\r\n      }\r\n  \r\n      ion-note {\r\n        font-size: 16px;\r\n        font-weight: 600;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .order-details {\r\n    margin-top: 20px;\r\n  \r\n    ion-item {\r\n      --background: #ffffff;\r\n      --border-radius: 10px;\r\n      margin-bottom: 10px;\r\n    }\r\n  \r\n    .total {\r\n      --background: var(--ion-color-light);\r\n      font-weight: bold;\r\n  \r\n      ion-label h2 {\r\n        font-size: 18px;\r\n        color: var(--ion-color-dark);\r\n      }\r\n  \r\n      ion-note {\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-footer {\r\n    ion-toolbar {\r\n      --background: var(--ion-color-light);\r\n      --border-color: transparent;\r\n    }\r\n  \r\n    ion-button {\r\n      margin: 10px;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .cart-items ion-item {\r\n      ion-thumbnail {\r\n        --size: 60px;\r\n      }\r\n  \r\n      ion-label h2 {\r\n        font-size: 16px;\r\n      }\r\n  \r\n      ion-note {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  \r\n    .order-details .total {\r\n      ion-label h2, ion-note {\r\n        font-size: 16px;\r\n      }\r\n    }\r\n  }",
        "carro-compras.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { CarroComprasPage } from './carro-compras.page';\r\n\r\ndescribe('CarroComprasPage', () => {\r\n  let component: CarroComprasPage;\r\n  let fixture: ComponentFixture<CarroComprasPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(CarroComprasPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "carro-compras.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController, AlertController } from '@ionic/angular';\r\nimport { Order } from '../models/order.model';\r\nimport { OrderDetail } from '../models/order-detail.model';\r\n\r\ninterface CartItem {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image: string;\r\n  selectedSize: string;\r\n  selectedMilk: string;\r\n  quantity: number;\r\n  finalPrice: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-carro-compras',\r\n  templateUrl: './carro-compras.page.html',\r\n  styleUrls: ['./carro-compras.page.scss'],\r\n})\r\nexport class CarroComprasPage implements OnInit {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  \r\n  currentOrder: Order & { items: CartItem[] } = {\r\n    orderNumber: 0,\r\n    id: 0,\r\n    userId: 0,\r\n    tableNumber: null,\r\n    status: 'Solicitado',\r\n    notes: '',\r\n    totalAmount: 0,\r\n    paymentMethod: '',\r\n    items: []\r\n  };\r\n  currentOrderItems: CartItem[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadOrder();\r\n  }\r\n\r\n  loadOrder() {\r\n    const storedOrder = JSON.parse(localStorage.getItem('currentOrder') || 'null');\r\n    if (storedOrder) {\r\n      this.currentOrder.orderNumber = storedOrder.orderNumber;\r\n      this.currentOrder.items = storedOrder.items;\r\n      this.currentOrderItems = storedOrder.items;\r\n    } else {\r\n      this.router.navigate(['/main']);\r\n    }\r\n    this.calculateTotal();\r\n  }\r\n\r\n  calculateTotal(): number {\r\n    this.currentOrder.totalAmount = this.currentOrderItems.reduce((total, item) => total + (item.finalPrice * item.quantity), 0);\r\n    return this.currentOrder.totalAmount;\r\n  }\r\n\r\n  async updateQuantity(item: CartItem, change: number) {\r\n    item.quantity += change;\r\n    if (item.quantity <= 0) {\r\n      await this.removeItem(item);\r\n    } else {\r\n      this.calculateTotal();\r\n      this.updateLocalStorage();\r\n    }\r\n  }\r\n\r\n  async removeItem(item: CartItem) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar eliminación',\r\n      message: `¿Está seguro de que desea eliminar ${item.name} de su orden?`,\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Eliminar',\r\n          handler: () => {\r\n            const index = this.currentOrderItems.indexOf(item);\r\n            if (index > -1) {\r\n              this.currentOrderItems.splice(index, 1);\r\n              this.calculateTotal();\r\n              this.updateLocalStorage();\r\n              this.presentToast('Producto eliminado de la orden');\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  updateLocalStorage() {\r\n    localStorage.setItem('currentOrder', JSON.stringify({\r\n      orderNumber: this.currentOrder.id,\r\n      items: this.currentOrderItems\r\n    }));\r\n  }\r\n\r\n  async confirmarOrden() {\r\n    if (this.currentOrderItems.length === 0) {\r\n      await this.presentToast('No hay productos en la orden. Añada productos antes de confirmar.');\r\n      return;\r\n    }\r\n  \r\n    if (this.currentOrder.tableNumber === null) {\r\n      await this.presentToast('Por favor, seleccione un número de mesa antes de confirmar la orden.');\r\n      return;\r\n    }\r\n  \r\n    const loading = await this.loadingController.create({\r\n      message: 'Procesando orden...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n      this.currentOrder.userId = currentUser.id;\r\n  \r\n      // Creamos la orden sin los items primero\r\n      const orderToSave: Order = {\r\n        userId: this.currentOrder.userId,\r\n        orderNumber: this.currentOrder.orderNumber,\r\n        tableNumber: this.currentOrder.tableNumber,\r\n        status: 'Solicitado',\r\n        notes: this.currentOrder.notes,\r\n        totalAmount: this.calculateTotal(),\r\n        paymentMethod: '',\r\n      };\r\n  \r\n      const orderId = await this.databaseService.createOrder(orderToSave);\r\n  \r\n      // Ahora añadimos los items de la orden\r\n      for (const item of this.currentOrderItems) {\r\n        const orderDetail: OrderDetail = {\r\n          orderId: orderId,\r\n          productId: item.id,\r\n          quantity: item.quantity,\r\n          size: item.selectedSize,\r\n          milkType: item.selectedMilk,\r\n          price: item.finalPrice\r\n        };\r\n        await this.databaseService.addProductToOrder(orderDetail);\r\n      }\r\n  \r\n      await loading.dismiss();\r\n      await this.presentToast('Orden confirmada con éxito');\r\n  \r\n      // Incrementar el número de orden en el almacenamiento local\r\n      const lastOrderNumber = parseInt(localStorage.getItem('lastOrderNumber') || '0');\r\n      const newOrderNumber = lastOrderNumber + 1;\r\n      localStorage.setItem('lastOrderNumber', newOrderNumber.toString());\r\n      \r\n      // Limpiar la orden actual\r\n      localStorage.removeItem('currentOrder');\r\n  \r\n      // Resetear el contador de items\r\n      this.currentOrderItems = [];\r\n      this.updateLocalStorage();\r\n  \r\n      // Navegar a la página principal\r\n      this.router.navigate(['/main']);\r\n  \r\n    } catch (error) {\r\n      console.error('Error al confirmar la orden:', error);\r\n      await loading.dismiss();\r\n      await this.presentToast('Error al confirmar la orden. Por favor, intente de nuevo.');\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 3000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n}"
      },
      "comandas": {
        "comandas-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ComandasPage } from './comandas.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ComandasPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ComandasPageRoutingModule {}\r\n",
        "comandas.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ComandasPageRoutingModule } from './comandas-routing.module';\r\nimport { ComandasPage } from './comandas.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ComandasPageRoutingModule\r\n  ],\r\n  declarations: [ComandasPage]\r\n})\r\nexport class ComandasPageModule {}",
        "comandas.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Comandas</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-segment [(ngModel)]=\"currentSegment\" (ionChange)=\"segmentChanged($event)\" mode=\"ios\" class=\"custom-segment\">\r\n    <ion-segment-button value=\"solicitadas\">\r\n      <ion-icon name=\"receipt-outline\"></ion-icon>\r\n      <ion-label>Nuevas</ion-label>\r\n    </ion-segment-button>\r\n    <ion-segment-button value=\"enProceso\">\r\n      <ion-icon name=\"cafe-outline\"></ion-icon>\r\n      <ion-label>Proceso</ion-label>\r\n    </ion-segment-button>\r\n    <ion-segment-button value=\"listas\">\r\n      <ion-icon name=\"checkmark-circle-outline\"></ion-icon>\r\n      <ion-label>Listas</ion-label>\r\n    </ion-segment-button>\r\n    <ion-segment-button value=\"canceladas\">\r\n      <ion-icon name=\"close-circle-outline\"></ion-icon>\r\n      <ion-label>Cancel.</ion-label>\r\n    </ion-segment-button>\r\n  </ion-segment>\r\n\r\n  <div [ngSwitch]=\"currentSegment\">\r\n    <ng-container *ngSwitchCase=\"'solicitadas'\">\r\n      <ion-card *ngFor=\"let orden of ordenesSolicitadas\" class=\"orden-card\">\r\n        <ion-card-header>\r\n          <ion-card-title>Orden #{{ orden.id || 'N/A' }} - Mesa {{ orden.tableNumber || 'N/A' }}</ion-card-title>\r\n          <ion-card-subtitle>\r\n            <ion-badge color=\"warning\">{{ orden.status || 'Desconocido' }}</ion-badge>\r\n          </ion-card-subtitle>\r\n        </ion-card-header>\r\n        <ion-card-content>\r\n          <div class=\"items-list\">\r\n            <p *ngFor=\"let item of orden.items\">\r\n              {{ item.name || 'Producto desconocido' }} x{{ item.quantity || 0 }}\r\n              <span *ngIf=\"item.size || item.milkType\" class=\"item-details\">\r\n                ({{ item.size || 'Tamaño estándar' }}\r\n                <ng-container *ngIf=\"item.milkType\">, leche {{ item.milkType }}</ng-container>)\r\n              </span>\r\n              <ion-note slot=\"end\">{{ (item.price * item.quantity) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n            </p>\r\n          </div>\r\n          <p class=\"total-amount\">\r\n            <strong>Total:</strong> \r\n            <ion-note slot=\"end\" color=\"primary\">{{ getOrderTotal(orden) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n          </p>\r\n          <p *ngIf=\"orden.notes\" class=\"notes\">\r\n            <ion-icon name=\"create-outline\"></ion-icon>\r\n            <strong>Notas:</strong> {{ orden.notes }}\r\n          </p>\r\n        </ion-card-content>\r\n        <div class=\"action-buttons\">\r\n          <ion-button (click)=\"cambiarEstado(orden, 'En proceso')\" color=\"primary\">En Proceso</ion-button>\r\n          <ion-button (click)=\"cambiarEstado(orden, 'Cancelado')\" color=\"danger\">Cancelar</ion-button>\r\n        </div>\r\n      </ion-card>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'enProceso'\">\r\n      <ion-card *ngFor=\"let orden of ordenesEnProceso\" class=\"orden-card\">\r\n        <ion-card-header>\r\n          <ion-card-title>Orden #{{ orden.id || 'N/A' }} - Mesa {{ orden.tableNumber || 'N/A' }}</ion-card-title>\r\n          <ion-card-subtitle>\r\n            <ion-badge color=\"primary\">{{ orden.status || 'Desconocido' }}</ion-badge>\r\n          </ion-card-subtitle>\r\n        </ion-card-header>\r\n        <ion-card-content>\r\n          <!-- Mismo contenido que en 'solicitadas' -->\r\n          <div class=\"items-list\">\r\n            <p *ngFor=\"let item of orden.items\">\r\n              {{ item.name || 'Producto desconocido' }} x{{ item.quantity || 0 }}\r\n              <span *ngIf=\"item.size || item.milkType\" class=\"item-details\">\r\n                ({{ item.size || 'Tamaño estándar' }}\r\n                <ng-container *ngIf=\"item.milkType\">, leche {{ item.milkType }}</ng-container>)\r\n              </span>\r\n              <ion-note slot=\"end\">{{ (item.price * item.quantity) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n            </p>\r\n          </div>\r\n          <p class=\"total-amount\">\r\n            <strong>Total:</strong> \r\n            <ion-note slot=\"end\" color=\"primary\">{{ getOrderTotal(orden) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n          </p>\r\n          <p *ngIf=\"orden.notes\" class=\"notes\">\r\n            <ion-icon name=\"create-outline\"></ion-icon>\r\n            <strong>Notas:</strong> {{ orden.notes }}\r\n          </p>\r\n        </ion-card-content>\r\n        <div class=\"action-buttons\">\r\n          <ion-button (click)=\"cambiarEstado(orden, 'Listo')\" color=\"success\">Listo</ion-button>\r\n          <ion-button (click)=\"cambiarEstado(orden, 'Cancelado')\" color=\"danger\">Cancelar</ion-button>\r\n        </div>\r\n      </ion-card>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'listas'\">\r\n      <ion-card *ngFor=\"let orden of ordenesListas\" class=\"orden-card\">\r\n        <ion-card-header>\r\n          <ion-card-title>Orden #{{ orden.id || 'N/A' }} - Mesa {{ orden.tableNumber || 'N/A' }}</ion-card-title>\r\n          <ion-card-subtitle>\r\n            <ion-badge color=\"success\">{{ orden.status || 'Desconocido' }}</ion-badge>\r\n          </ion-card-subtitle>\r\n        </ion-card-header>\r\n        <ion-card-content>\r\n          <!-- Mismo contenido que en 'solicitadas' -->\r\n          <div class=\"items-list\">\r\n            <p *ngFor=\"let item of orden.items\">\r\n              {{ item.name || 'Producto desconocido' }} x{{ item.quantity || 0 }}\r\n              <span *ngIf=\"item.size || item.milkType\" class=\"item-details\">\r\n                ({{ item.size || 'Tamaño estándar' }}\r\n                <ng-container *ngIf=\"item.milkType\">, leche {{ item.milkType }}</ng-container>)\r\n              </span>\r\n              <ion-note slot=\"end\">{{ (item.price * item.quantity) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n            </p>\r\n          </div>\r\n          <p class=\"total-amount\">\r\n            <strong>Total:</strong> \r\n            <ion-note slot=\"end\" color=\"primary\">{{ getOrderTotal(orden) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n          </p>\r\n          <p *ngIf=\"orden.notes\" class=\"notes\">\r\n            <ion-icon name=\"create-outline\"></ion-icon>\r\n            <strong>Notas:</strong> {{ orden.notes }}\r\n          </p>\r\n        </ion-card-content>\r\n        <div class=\"action-buttons\">\r\n          <ion-button (click)=\"cambiarEstado(orden, 'Entregado')\" color=\"tertiary\">Entregado</ion-button>\r\n        </div>\r\n      </ion-card>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'canceladas'\">\r\n      <ion-card *ngFor=\"let orden of ordenesCanceladas\" class=\"orden-card\">\r\n        <ion-card-header>\r\n          <ion-card-title>Orden #{{ orden.id || 'N/A' }} - Mesa {{ orden.tableNumber || 'N/A' }}</ion-card-title>\r\n          <ion-card-subtitle>\r\n            <ion-badge color=\"danger\">{{ orden.status || 'Desconocido' }}</ion-badge>\r\n          </ion-card-subtitle>\r\n        </ion-card-header>\r\n        <ion-card-content>\r\n          <!-- Mismo contenido que en 'solicitadas' -->\r\n          <div class=\"items-list\">\r\n            <p *ngFor=\"let item of orden.items\">\r\n              {{ item.name || 'Producto desconocido' }} x{{ item.quantity || 0 }}\r\n              <span *ngIf=\"item.size || item.milkType\" class=\"item-details\">\r\n                ({{ item.size || 'Tamaño estándar' }}\r\n                <ng-container *ngIf=\"item.milkType\">, leche {{ item.milkType }}</ng-container>)\r\n              </span>\r\n              <ion-note slot=\"end\">{{ (item.price * item.quantity) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n            </p>\r\n          </div>\r\n          <p class=\"total-amount\">\r\n            <strong>Total:</strong> \r\n            <ion-note slot=\"end\" color=\"primary\">{{ getOrderTotal(orden) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n          </p>\r\n          <p *ngIf=\"orden.notes\" class=\"notes\">\r\n            <ion-icon name=\"create-outline\"></ion-icon>\r\n            <strong>Notas:</strong> {{ orden.notes }}\r\n          </p>\r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <ion-item *ngIf=\"!hayOrdenes()\">\r\n    <ion-label>\r\n      No hay órdenes en esta sección en este momento.\r\n    </ion-label>\r\n  </ion-item>\r\n</ion-content>\r\n\r\n<ion-footer *ngIf=\"hayOrdenes()\">\r\n  <ion-toolbar>\r\n    <ion-title>Total de órdenes: {{ totalOrdenes() }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"top\"\r\n  color=\"success\"\r\n></ion-toast>",
        "comandas.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  .custom-segment {\r\n    background: var(--ion-color-light);\r\n    border-radius: 20px;\r\n    margin: 10px 0;\r\n    --background: #ffffff;\r\n  \r\n    ion-segment-button {\r\n      --padding-top: 8px;\r\n      --padding-bottom: 8px;\r\n      --background-checked: var(--ion-color-primary);\r\n      --color-checked: #ffffff;\r\n      --indicator-color: transparent;\r\n      min-height: 60px;\r\n      font-size: 12px;\r\n      font-weight: 500;\r\n      border-radius: 20px;\r\n      margin: 2px;\r\n      transition: background-color 0.3s, color 0.3s;\r\n  \r\n      &::part(indicator-background) {\r\n        background: var(--ion-color-primary);\r\n      }\r\n  \r\n      ion-icon {\r\n        font-size: 24px;\r\n      }\r\n  \r\n      &.segment-button-checked {\r\n        background: var(--ion-color-primary);\r\n        color: #ffffff;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--ion-color-light);\r\n  }\r\n  \r\n  .orden-card {\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: var(--ion-color-light);\r\n      padding: 16px;\r\n  \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: var(--ion-color-dark);\r\n      }\r\n  \r\n      ion-card-subtitle {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        margin-top: 8px;\r\n      }\r\n  \r\n      ion-badge {\r\n        font-size: 12px;\r\n        padding: 4px 8px;\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n  \r\n      .items-list {\r\n        margin-bottom: 12px;\r\n  \r\n        p {\r\n          margin: 8px 0;\r\n          font-size: 14px;\r\n          color: var(--ion-color-dark);\r\n  \r\n          .item-details {\r\n            font-size: 12px;\r\n            color: var(--ion-color-medium);\r\n            font-style: italic;\r\n            margin-left: 8px;\r\n          }\r\n        }\r\n      }\r\n  \r\n      .total {\r\n        font-weight: bold;\r\n        font-size: 16px;\r\n        color: var(--ion-color-dark);\r\n        margin-top: 12px;\r\n        border-top: 1px solid var(--ion-color-light);\r\n        padding-top: 12px;\r\n      }\r\n  \r\n      .nota {\r\n        font-style: italic;\r\n        font-size: 14px;\r\n        color: var(--ion-color-medium);\r\n        margin-top: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n  \r\n        ion-icon {\r\n          margin-right: 8px;\r\n          font-size: 18px;\r\n        }\r\n      }\r\n    }\r\n  \r\n    .action-buttons {\r\n      display: flex;\r\n      justify-content: space-around;\r\n      padding: 0 16px 16px;\r\n  \r\n      ion-button {\r\n        --border-radius: 20px;\r\n        font-size: 14px;\r\n        margin: 0 4px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .orden-card {\r\n      ion-card-header {\r\n        ion-card-title {\r\n          font-size: 16px;\r\n        }\r\n  \r\n        ion-badge {\r\n          font-size: 10px;\r\n        }\r\n      }\r\n  \r\n      ion-card-content {\r\n        .items-list p {\r\n          font-size: 13px;\r\n  \r\n          .item-details {\r\n            font-size: 11px;\r\n          }\r\n        }\r\n  \r\n        .total {\r\n          font-size: 15px;\r\n        }\r\n  \r\n        .nota {\r\n          font-size: 13px;\r\n        }\r\n      }\r\n  \r\n      .action-buttons {\r\n        flex-direction: column;\r\n        \r\n        ion-button {\r\n          margin-bottom: 8px;\r\n          font-size: 12px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; transform: translateY(20px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n  \r\n  .orden-card {\r\n    animation: fadeIn 0.3s ease-out;\r\n  }",
        "comandas.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { ComandasPage } from './comandas.page';\r\n\r\ndescribe('ComandasPage', () => {\r\n  let component: ComandasPage;\r\n  let fixture: ComponentFixture<ComandasPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(ComandasPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "comandas.page.ts": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\nimport { Order } from '../models/order.model';\r\nimport { OrderDetail } from '../models/order-detail.model';\r\nimport { Subscription, Observable, from, of } from 'rxjs';\r\nimport { mergeMap, toArray, map, catchError } from 'rxjs/operators';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-comandas',\r\n  templateUrl: './comandas.page.html',\r\n  styleUrls: ['./comandas.page.scss'],\r\n})\r\nexport class ComandasPage implements OnInit, OnDestroy {\r\n\r\n  ordenesSolicitadas: Order[] = [];\r\n  ordenesEnProceso: Order[] = [];\r\n  ordenesListas: Order[] = [];\r\n  ordenesCanceladas: Order[] = [];\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  \r\n  ordenes: Order[] = [];\r\n  private subscriptions: Subscription = new Subscription();\r\n  \r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.cargarOrdenes();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  async cargarOrdenes() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando órdenes...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const ordenes = await firstValueFrom(this.databaseService.getOrdersByStatus(['Solicitado', 'En proceso', 'Listo', 'Cancelado']));\r\n      console.log('Órdenes obtenidas:', ordenes);\r\n      \r\n      const ordenesConDetalles = await Promise.all(ordenes.map(async (orden) => {\r\n        const detalles = await firstValueFrom(this.databaseService.getOrderDetails(orden.id!));\r\n        return { \r\n          ...orden, \r\n          items: detalles,\r\n          id: orden.id ?? 0,\r\n          tableNumber: orden.tableNumber ?? 0\r\n        };\r\n      }));\r\n      \r\n      this.ordenesSolicitadas = ordenesConDetalles.filter(orden => orden.status === 'Solicitado');\r\n      this.ordenesEnProceso = ordenesConDetalles.filter(orden => orden.status === 'En proceso');\r\n      this.ordenesListas = ordenesConDetalles.filter(orden => orden.status === 'Listo');\r\n      this.ordenesCanceladas = ordenesConDetalles.filter(orden => orden.status === 'Cancelado');\r\n      \r\n      console.log('Órdenes procesadas:', {\r\n        solicitadas: this.ordenesSolicitadas,\r\n        enProceso: this.ordenesEnProceso,\r\n        listas: this.ordenesListas,\r\n        canceladas: this.ordenesCanceladas\r\n      });\r\n    } catch (error) {\r\n      console.error('Error al cargar órdenes:', error);\r\n      this.presentToast('Error al cargar órdenes. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  \r\n  private getOrdersByStatus(statuses: string[]): Promise<Order[]> {\r\n    const result = this.databaseService.getOrdersByStatus(statuses);\r\n    if (result instanceof Observable) {\r\n      return firstValueFrom(result.pipe(\r\n        map((orders: Order[]) => orders || []),\r\n        catchError(() => of([]))\r\n      ));\r\n    }\r\n    return Promise.resolve(result || []);\r\n  }\r\n\r\n  async cargarDetallesOrdenes() {\r\n    const detallesPromises = this.ordenes.map(async (orden) => {\r\n      try {\r\n        const detalles = await this.getOrderDetails(orden.id!);\r\n        orden.items = detalles;\r\n        return orden;\r\n      } catch (error) {\r\n        console.error(`Error al cargar detalles para la orden ${orden.id}:`, error);\r\n        return orden;\r\n      }\r\n    });\r\n  \r\n    try {\r\n      this.ordenes = await Promise.all(detallesPromises);\r\n      console.log('Órdenes con detalles:', this.ordenes);  // Para depuración\r\n    } catch (error) {\r\n      console.error('Error al cargar detalles de órdenes:', error);\r\n    }\r\n  }\r\n\r\n  private async getOrderDetails(orderId: number): Promise<OrderDetail[]> {\r\n    try {\r\n      const result = this.databaseService.getOrderDetails(orderId);\r\n      if (result instanceof Observable) {\r\n        return await firstValueFrom(result.pipe(\r\n          map(details => details || []),\r\n          catchError(() => of([]))\r\n        ));\r\n      }\r\n      return result || [];\r\n    } catch (error) {\r\n      console.error(`Error al obtener detalles de la orden ${orderId}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async cambiarEstado(orden: Order, nuevoEstado: 'En proceso' | 'Listo' | 'Cancelado' | 'Entregado') {\r\n    if (!orden.id) {\r\n      this.presentToast('Error: ID de orden no válido');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.updateOrderStatus(orden.id, nuevoEstado);\r\n      orden.status = nuevoEstado;\r\n      this.presentToast(`Orden #${orden.id} actualizada a ${nuevoEstado}`);\r\n\r\n      this.moverOrden(orden);\r\n\r\n    } catch (error) {\r\n      console.error('Error al actualizar estado de la orden:', error);\r\n      this.presentToast('Error al actualizar el estado. Por favor, intente de nuevo.');\r\n    }\r\n  }\r\n\r\n  private moverOrden(orden: Order) {\r\n    // Remover la orden de su lista actual\r\n    this.ordenesSolicitadas = this.ordenesSolicitadas.filter(o => o.id !== orden.id);\r\n    this.ordenesEnProceso = this.ordenesEnProceso.filter(o => o.id !== orden.id);\r\n    this.ordenesListas = this.ordenesListas.filter(o => o.id !== orden.id);\r\n    this.ordenesCanceladas = this.ordenesCanceladas.filter(o => o.id !== orden.id);\r\n\r\n    // Añadir la orden a su nueva lista\r\n    switch (orden.status) {\r\n      case 'Solicitado':\r\n        this.ordenesSolicitadas.push(orden);\r\n        break;\r\n      case 'En proceso':\r\n        this.ordenesEnProceso.push(orden);\r\n        break;\r\n      case 'Listo':\r\n        this.ordenesListas.push(orden);\r\n        break;\r\n      case 'Cancelado':\r\n        this.ordenesCanceladas.push(orden);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async updateOrderStatus(orderId: number, status: string): Promise<void> {\r\n    const result = this.databaseService.updateOrderStatus(orderId, status);\r\n    if (result instanceof Observable) {\r\n      await firstValueFrom(result.pipe(\r\n        map(() => {}),\r\n        catchError(() => of(undefined))\r\n      ));\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  getOrderTotal(orden: Order): number {\r\n    return orden.items?.reduce((total, item) => total + ((item.price || 0) * (item.quantity || 0)), 0) || 0;\r\n  }\r\n\r\n  currentSegment: string = 'solicitadas';\r\n\r\n  segmentChanged(event: any) {\r\n    console.log('Segment changed', event);\r\n    this.currentSegment = event.detail.value;\r\n  }\r\n\r\n  hayOrdenes(): boolean {\r\n    return this.ordenesSolicitadas.length > 0 || \r\n           this.ordenesEnProceso.length > 0 || \r\n           this.ordenesListas.length > 0 || \r\n           this.ordenesCanceladas.length > 0;\r\n  }\r\n\r\n  totalOrdenes(): number {\r\n    return this.ordenesSolicitadas.length + \r\n           this.ordenesEnProceso.length + \r\n           this.ordenesListas.length + \r\n           this.ordenesCanceladas.length;\r\n  }\r\n\r\n}"
      },
      "crud": {
        "crud-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CrudPage } from './crud.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CrudPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CrudPageRoutingModule {}\r\n",
        "crud.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CrudPageRoutingModule } from './crud-routing.module';\r\nimport { CrudPage } from './crud.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    CrudPageRoutingModule\r\n  ],\r\n  declarations: [CrudPage]\r\n})\r\nexport class CrudPageModule {}",
        "crud.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/admin\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Gestión de Productos</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <div class=\"crud-menu\">\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('add')\" [class.active]=\"activeSection === 'add'\">\r\n      <ion-icon name=\"add-circle-outline\"></ion-icon>\r\n    </ion-button>\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('edit')\" [class.active]=\"activeSection === 'edit'\">\r\n      <ion-icon name=\"create-outline\"></ion-icon>\r\n    </ion-button>\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('delete')\" [class.active]=\"activeSection === 'delete'\">\r\n      <ion-icon name=\"trash-outline\"></ion-icon>\r\n    </ion-button>\r\n    <ion-button fill=\"clear\" (click)=\"setActiveSection('view')\" [class.active]=\"activeSection === 'view'\">\r\n      <ion-icon name=\"list-outline\"></ion-icon>\r\n    </ion-button>\r\n  </div>\r\n\r\n  <!-- Agregar Producto -->\r\n  <div *ngIf=\"activeSection === 'add'\">\r\n    <h2>Agregar Producto</h2>\r\n    <form (ngSubmit)=\"addProduct()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Nombre</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.imageURL\" name=\"image\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Descripción</ion-label>\r\n        <ion-textarea [(ngModel)]=\"currentProduct.description\" name=\"description\" required></ion-textarea>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Precio</ion-label>\r\n        <ion-input type=\"number\" [(ngModel)]=\"currentProduct.price\" name=\"price\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">URL de la imagen</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.imageURL\" name=\"image\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\">Agregar Producto</ion-button>\r\n    </form>\r\n  </div>\r\n\r\n  <!-- Editar Producto -->\r\n  <div *ngIf=\"activeSection === 'edit'\">\r\n    <h2>Editar Producto</h2>\r\n    <form (ngSubmit)=\"updateProduct()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Nombre</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.name\" name=\"name\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Descripción</ion-label>\r\n        <ion-textarea [(ngModel)]=\"currentProduct.description\" name=\"description\" required></ion-textarea>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Precio</ion-label>\r\n        <ion-input type=\"number\" [(ngModel)]=\"currentProduct.price\" name=\"price\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">URL de la imagen</ion-label>\r\n        <ion-input [(ngModel)]=\"currentProduct.imageURL\" name=\"image\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\">Actualizar Producto</ion-button>\r\n    </form>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let product of products\">\r\n        <ion-thumbnail slot=\"start\">\r\n          <img [src]=\"product.imageURL\" [alt]=\"product.name\">\r\n        </ion-thumbnail>\r\n        <ion-label>\r\n          <h2>{{ product.name }}</h2>\r\n          <p>{{ product.description }}</p>\r\n          <p>Precio: {{ product.price | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n        </ion-label>\r\n        <ion-button slot=\"end\" (click)=\"editProduct(product)\">Editar</ion-button>\r\n      </ion-item>\r\n    </ion-list>\r\n\r\n  </div>\r\n\r\n  <!-- Eliminar Producto -->\r\n  <div *ngIf=\"activeSection === 'delete'\">\r\n    <h2>Eliminar Producto</h2>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let product of products\">\r\n        <ion-label>\r\n          <h2>{{ product.name }}</h2>\r\n          <p>Precio: {{ product.price | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n        </ion-label>\r\n        <ion-button slot=\"end\" color=\"danger\" (click)=\"deleteProduct(product.id ?? 0)\">Eliminar</ion-button>\r\n      </ion-item>\r\n    </ion-list>\r\n  </div>\r\n\r\n  <!-- Ver Productos -->\r\n  <div *ngIf=\"activeSection === 'view'\">\r\n    <h2>Lista de Productos</h2>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let product of products\">\r\n        <ion-thumbnail slot=\"start\">\r\n          <img [src]=\"product.imageURL.startsWith('assets/') ? product.imageURL : 'assets/' + product.imageURL\" \r\n               [alt]=\"product.name\"\r\n               (error)=\"handleImageError($event)\">\r\n        </ion-thumbnail>\r\n        <ion-label>\r\n          <h2>{{ product.name }}</h2>\r\n          <p>{{ product.description }}</p>\r\n          <p>Precio: {{ product.price | currency:'CLP':'symbol-narrow':'1.0-0' }}</p>\r\n        </ion-label>\r\n        <ion-button slot=\"end\" (click)=\"editProduct(product)\">Editar</ion-button>\r\n      </ion-item>\r\n    </ion-list>\r\n  </div>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"bottom\"\r\ncolor=\"success\"\r\n></ion-toast>",
        "crud.page.scss": ".crud-menu {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    background-color: var(--ion-color-light);\r\n    border-radius: 15px;\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-button {\r\n      --padding-start: 10px;\r\n      --padding-end: 10px;\r\n  \r\n      &.active {\r\n        --background: var(--ion-color-primary);\r\n        --color: var(--ion-color-primary-contrast);\r\n      }\r\n  \r\n      ion-icon {\r\n        font-size: 24px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  form {\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-item {\r\n      --padding-start: 0;\r\n      --inner-padding-end: 0;\r\n      --background: transparent;\r\n  \r\n      &:not(:last-child) {\r\n        --border-color: var(--ion-color-light-shade);\r\n        --border-width: 0 0 1px 0;\r\n      }\r\n    }\r\n  \r\n    ion-button[type=\"submit\"] {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n  \r\n  h2 {\r\n    color: var(--ion-color-primary);\r\n    font-weight: bold;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  ion-list {\r\n    background: transparent;\r\n  \r\n    ion-item {\r\n      --background: white;\r\n      --border-radius: 10px;\r\n      margin-bottom: 10px;\r\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  \r\n      ion-thumbnail {\r\n        --size: 80px;\r\n        --border-radius: 10px;\r\n      }\r\n  \r\n      ion-label {\r\n        h2 {\r\n          font-weight: bold;\r\n          color: var(--ion-color-dark);\r\n        }\r\n  \r\n        p {\r\n          color: var(--ion-color-medium);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    --border-radius: 10px;\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  .crud-menu, form, ion-list {\r\n    animation: fadeIn 0.3s ease-in-out;\r\n  }",
        "crud.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { CrudPage } from './crud.page';\r\n\r\ndescribe('CrudPage', () => {\r\n  let component: CrudPage;\r\n  let fixture: ComponentFixture<CrudPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(CrudPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "crud.page.ts": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { Product } from '../models/product.model';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\nimport { Subscription, Observable, from, of, lastValueFrom} from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n  selector: 'app-crud',\r\n  templateUrl: './crud.page.html',\r\n  styleUrls: ['./crud.page.scss'],\r\n})\r\nexport class CrudPage implements OnInit, OnDestroy {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  products: Product[] = [];\r\n  currentProduct: Product = { id: 0, name: '', description: '', price: 0, category: '', imageURL: '', isAvailable: true };\r\n  isEditing = false;\r\n  activeSection: 'add' | 'edit' | 'delete' | 'view' = 'view';\r\n\r\n  private subscriptions: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loadProducts();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  async loadProducts() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando productos...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const products = await lastValueFrom(this.getAllProducts());\r\n      console.log('Productos obtenidos de la base de datos:', products);\r\n  \r\n      // Mapeamos los productos para asegurarnos de que tienen la estructura correcta\r\n      this.products = products.map(product => ({\r\n        id: product.id,\r\n        name: product.name,\r\n        description: product.description,\r\n        price: product.price,\r\n        category: product.category,\r\n        imageURL: product.imageURL.startsWith('assets/') ? product.imageURL : `assets/${product.imageURL}`,\r\n        isAvailable: product.isAvailable\r\n      }));\r\n  \r\n      console.log('Productos procesados para CRUD:', this.products);\r\n    } catch (error) {\r\n      console.error('Error al cargar los productos:', error);\r\n      await this.presentToast('Error al cargar los productos. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private getAllProducts(): Observable<Product[]> {\r\n    return this.databaseService.getAllProducts().pipe(\r\n      map(products => {\r\n        // Asegúrate de que cada producto tenga un ID único\r\n        return products.filter((product, index, self) =>\r\n          index === self.findIndex((t) => t.id === product.id)\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al obtener productos:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n  \r\n  async addProduct() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Agregando producto...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      const newProductId = await this.createProduct(this.currentProduct);\r\n      if (newProductId !== undefined) {\r\n        this.currentProduct.id = newProductId;\r\n        this.products.push({ ...this.currentProduct });\r\n        this.presentToast('Producto agregado con éxito');\r\n        this.resetForm();\r\n      } else {\r\n        throw new Error('No se pudo crear el producto');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding product:', error);\r\n      this.presentToast('Error al agregar el producto');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private createProduct(product: Product): Promise<number | undefined> {\r\n    const result = this.databaseService.createProduct(product);\r\n    if (result instanceof Observable) {\r\n      return result.toPromise();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async updateProduct() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Actualizando producto...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      const success = await this.updateProductInDb(this.currentProduct);\r\n      if (success) {\r\n        const index = this.products.findIndex(p => p.id === this.currentProduct.id);\r\n        if (index !== -1) {\r\n          this.products[index] = { ...this.currentProduct };\r\n        }\r\n        this.presentToast('Producto actualizado con éxito');\r\n        this.resetForm();\r\n      } else {\r\n        throw new Error('No se pudo actualizar el producto');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n      this.presentToast('Error al actualizar el producto');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private updateProductInDb(product: Product): Promise<boolean> {\r\n    const result = this.databaseService.updateProduct(product);\r\n    if (result instanceof Observable) {\r\n      return result.pipe(\r\n        map(() => true),\r\n        catchError(() => of(false))\r\n      ).toPromise().then(value => value ?? false);\r\n    }\r\n    return Promise.resolve(!!result);\r\n  }\r\n\r\n  async deleteProduct(id: number) {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Eliminando producto...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      const success = await this.deleteProductFromDb(id);\r\n      if (success) {\r\n        this.products = this.products.filter(p => p.id !== id);\r\n        this.presentToast('Producto eliminado con éxito');\r\n      } else {\r\n        throw new Error('No se pudo eliminar el producto');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      this.presentToast('Error al eliminar el producto');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private deleteProductFromDb(id: number): Promise<boolean> {\r\n    const result = this.databaseService.deleteProduct(id);\r\n    if (result instanceof Observable) {\r\n      return result.pipe(\r\n        map(() => true),\r\n        catchError(() => of(false))\r\n      ).toPromise().then(value => value ?? false);\r\n    }\r\n    return Promise.resolve(!!result);\r\n  }\r\n\r\n  editProduct(product: Product) {\r\n    this.currentProduct = { ...product };\r\n    this.isEditing = true;\r\n    this.activeSection = 'edit';\r\n  }\r\n\r\n  resetForm() {\r\n    this.currentProduct = { id: 0, name: '', description: '', price: 0, category: '', imageURL: '', isAvailable: true };\r\n    this.isEditing = false;\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'bottom'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  setActiveSection(section: 'add' | 'edit' | 'delete' | 'view') {\r\n    this.activeSection = section;\r\n    if (section !== 'edit') {\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n\r\n  handleImageError(event: any) {\r\n    event.target.src = 'assets/default-product-image.jpg';\r\n  }\r\n\r\n\r\n}"
      },
      "employee-dashboard": {
        "employee-dashboard-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeDashboardPage } from './employee-dashboard.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmployeeDashboardPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EmployeeDashboardPageRoutingModule {}\r\n",
        "employee-dashboard.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeDashboardPageRoutingModule } from './employee-dashboard-routing.module';\r\nimport { EmployeeDashboardPage } from './employee-dashboard.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    EmployeeDashboardPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [EmployeeDashboardPage]\r\n})\r\nexport class EmployeeDashboardPageModule {}",
        "employee-dashboard.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Dashboard de Empleado</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <h2>Bienvenido, {{ employeeName }}</h2>\r\n  \r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>Tu Resumen</ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <p>Ordenes tomadas hoy: {{ ordersToday }}</p>\r\n      <p>Ordenes pendientes: {{ pendingOrders }}</p>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-button expand=\"block\" routerLink=\"/main\">Tomar Nueva Orden</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/comandas\">Ver Órdenes Actuales</ion-button>\r\n  <ion-button expand=\"block\" routerLink=\"/perfil\">Mi Perfil</ion-button>\r\n  <ion-button expand=\"block\" (click)=\"logout()\">Cerrar Sesión</ion-button>\r\n</ion-content>",
        "employee-dashboard.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  h2 {\r\n    color: #333;\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  ion-card {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    margin-bottom: 20px;\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: #f0f0f0;\r\n      border-bottom: 1px solid #e0e0e0;\r\n      \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n  \r\n      p {\r\n        margin: 8px 0;\r\n        font-size: 16px;\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 10px;\r\n    --background: #5c9ce5;\r\n    --background-hover: #4a90e2;\r\n    --color: #ffffff;\r\n    --border-radius: 8px;\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  ion-card, ion-button {\r\n    animation: fadeIn 0.5s ease-out;\r\n  }",
        "employee-dashboard.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { EmployeeDashboardPage } from './employee-dashboard.page';\r\n\r\ndescribe('EmployeeDashboardPage', () => {\r\n  let component: EmployeeDashboardPage;\r\n  let fixture: ComponentFixture<EmployeeDashboardPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(EmployeeDashboardPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "employee-dashboard.page.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoadingController, ToastController } from '@ionic/angular';\r\nimport { DatabaseService } from '../services/database.service';\r\n\r\n@Component({\r\n  selector: 'app-employee-dashboard',\r\n  templateUrl: './employee-dashboard.page.html',\r\n  styleUrls: ['./employee-dashboard.page.scss'],\r\n})\r\nexport class EmployeeDashboardPage implements OnInit {\r\n  employeeName: string = 'Empleado';\r\n  ordersToday: number = 0;\r\n  pendingOrders: number = 0;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private loadingController: LoadingController,\r\n    private toastController: ToastController,\r\n    private databaseService: DatabaseService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loadEmployeeData();\r\n  }\r\n\r\n  async loadEmployeeData() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando datos...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\r\n      this.employeeName = currentUser.name || 'Empleado';\r\n  \r\n      // Obtener el número real de órdenes del día\r\n      this.ordersToday = await this.databaseService.getOrderCountForToday();\r\n  \r\n      // Obtener el número real de órdenes pendientes\r\n      this.pendingOrders = await this.databaseService.getOrdersCount(['Solicitado', 'En proceso']);\r\n  \r\n    } catch (error) {\r\n      console.error('Error al cargar datos del dashboard:', error);\r\n      this.presentToast('Error al cargar datos. Por favor, intente de nuevo.');\r\n    } finally {\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'bottom'\r\n    });\r\n    toast.present();\r\n  }\r\n}"
      },
      "employee-management": {
        "employee-management-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeManagementPage } from './employee-management.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmployeeManagementPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class EmployeeManagementPageRoutingModule {}\r\n",
        "employee-management.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { EmployeeManagementPageRoutingModule } from './employee-management-routing.module';\r\nimport { EmployeeManagementPage } from './employee-management.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    EmployeeManagementPageRoutingModule\r\n  ],\r\n  declarations: [EmployeeManagementPage]\r\n})\r\nexport class EmployeeManagementPageModule {}",
        "employee-management.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/admin-dashboard\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Gestión de Empleados</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-list>\r\n    <ion-item *ngFor=\"let user of users\">\r\n      <ion-label>\r\n        <h2>{{ user.Name }}</h2>\r\n        <p>{{ user.Email }}</p>\r\n        <ion-badge [color]=\"getApprovalStatusColor(user.ApprovalStatus)\">\r\n          {{ getApprovalStatusLabel(user.ApprovalStatus) }}\r\n        </ion-badge>\r\n        <ion-badge [color]=\"getRoleColor(user.Role)\">\r\n          {{ getRoleLabel(user.Role) }}\r\n        </ion-badge>\r\n      </ion-label>\r\n      <ion-button slot=\"end\" (click)=\"changeApprovalStatus(user)\">Cambiar Estado</ion-button>\r\n      <ion-button slot=\"end\" (click)=\"changeRole(user)\">Cambiar Rol</ion-button>\r\n    </ion-item>\r\n  </ion-list>\r\n</ion-content>\r\n\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"top\"\r\n  [color]=\"toastColor\">\r\n</ion-toast>",
        "employee-management.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: var(--ion-color-light);\r\n  }\r\n  \r\n  ion-list {\r\n    background: transparent;\r\n  }\r\n  \r\n  ion-item {\r\n    --background: #ffffff;\r\n    border-radius: 10px;\r\n    margin-bottom: 10px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-label {\r\n      h2 {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: var(--ion-color-dark);\r\n      }\r\n  \r\n      p {\r\n        font-size: 14px;\r\n        color: var(--ion-color-medium);\r\n      }\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    --border-radius: 10px;\r\n  }\r\n  \r\n  ion-modal {\r\n    --background: var(--ion-color-light);\r\n  \r\n    ion-content {\r\n      --padding-top: 20px;\r\n      --padding-bottom: 20px;\r\n    }\r\n  \r\n    ion-item {\r\n      --background: #ffffff;\r\n      --border-color: var(--ion-color-medium);\r\n      --border-width: 1px;\r\n      --border-style: solid;\r\n      --border-radius: 10px;\r\n      margin-bottom: 15px;\r\n    }\r\n  \r\n    ion-button[expand=\"block\"] {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from { \r\n      opacity: 0;\r\n      transform: translateY(20px);\r\n    }\r\n    to { \r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  \r\n  ion-item, ion-button {\r\n    animation: fadeInUp 0.3s ease-out;\r\n  }\r\n\r\n  .user-item {\r\n    --padding-start: 0;\r\n    --inner-padding-end: 0;\r\n    margin-bottom: 10px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .user-item ion-label {\r\n    margin-left: 10px;\r\n  }\r\n  \r\n  .user-item ion-badge {\r\n    margin-top: 5px;\r\n  }\r\n  \r\n  ion-avatar {\r\n    width: 50px;\r\n    height: 50px;\r\n  }",
        "employee-management.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { EmployeeManagementPage } from './employee-management.page';\r\n\r\ndescribe('EmployeeManagementPage', () => {\r\n  let component: EmployeeManagementPage;\r\n  let fixture: ComponentFixture<EmployeeManagementPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(EmployeeManagementPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "employee-management.page.ts": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { AlertController, LoadingController, ToastController } from '@ionic/angular';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { User } from '../models/user.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-employee-management',\r\n  templateUrl: './employee-management.page.html',\r\n  styleUrls: ['./employee-management.page.scss'],\r\n})\r\nexport class EmployeeManagementPage implements OnInit, OnDestroy {\r\n  users: User[] = [];\r\n  private subscriptions: Subscription = new Subscription();\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  toastColor: string = 'success';\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private alertController: AlertController,\r\n    private loadingController: LoadingController,\r\n    private toastController: ToastController\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadUsers();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  async loadUsers() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando empleados...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      this.subscriptions.add(\r\n        this.databaseService.getAllUsers().pipe(first()).subscribe(\r\n          (users) => {\r\n            this.users = users;\r\n            loading.dismiss();\r\n          },\r\n          (error) => {\r\n            console.error('Error al cargar empleados:', error);\r\n            this.presentToast('Error al cargar empleados. Por favor, intente de nuevo.', 'danger');\r\n            loading.dismiss();\r\n          }\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Error al cargar empleados:', error);\r\n      this.presentToast('Error al cargar empleados. Por favor, intente de nuevo.', 'danger');\r\n      loading.dismiss();\r\n    }\r\n  }\r\n\r\n  async addUser() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Agregar Empleado',\r\n      inputs: [\r\n        { name: 'name', type: 'text', placeholder: 'Nombre' },\r\n        { name: 'email', type: 'email', placeholder: 'Correo electrónico' },\r\n        { name: 'password', type: 'password', placeholder: 'Contraseña' },\r\n        {\r\n          name: 'role',\r\n          type: 'radio',\r\n          label: 'Empleado',\r\n          value: 'employee',\r\n          checked: true\r\n        },\r\n        {\r\n          name: 'role',\r\n          type: 'radio',\r\n          label: 'Administrador',\r\n          value: 'admin'\r\n        },\r\n        {\r\n          name: 'approvalStatus',\r\n          type: 'radio',\r\n          label: 'Aprobado',\r\n          value: 'approved',\r\n          checked: true\r\n        },\r\n        {\r\n          name: 'approvalStatus',\r\n          type: 'radio',\r\n          label: 'Pendiente',\r\n          value: 'pending'\r\n        }\r\n      ],\r\n      buttons: [\r\n        { text: 'Cancelar', role: 'cancel' },\r\n        {\r\n          text: 'Agregar',\r\n          handler: (data) => {\r\n            this.createUser(data);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async createUser(userData: {name: string, email: string, password: string, role: 'employee' | 'admin', approvalStatus: 'approved' | 'pending'}) {\r\n    if (!userData.name || !userData.email || !userData.password) {\r\n      this.presentToast('Por favor, complete todos los campos', 'danger');\r\n      return;\r\n    }\r\n\r\n    const newUser: User = {\r\n      Name: userData.name,\r\n      Email: userData.email,\r\n      Password: userData.password,\r\n      Role: userData.role,\r\n      Username: userData.email,\r\n      ApprovalStatus: userData.approvalStatus\r\n    };\r\n\r\n    try {\r\n      const userId = await this.databaseService.createUser(newUser);\r\n      if (userId) {\r\n        newUser.UserID = userId;\r\n        this.users.push(newUser);\r\n        this.presentToast('Usuario creado con éxito', 'success');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al crear usuario:', error);\r\n      this.presentToast('Error al crear usuario', 'danger');\r\n    }\r\n  }\r\n\r\n  async changeRole(user: User) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Cambiar Rol',\r\n      message: `Cambiar rol de ${user.Name}`,\r\n      inputs: [\r\n        {\r\n          name: 'role',\r\n          type: 'radio',\r\n          label: 'Empleado',\r\n          value: 'employee',\r\n          checked: user.Role === 'employee'\r\n        },\r\n        {\r\n          name: 'role',\r\n          type: 'radio',\r\n          label: 'Administrador',\r\n          value: 'admin',\r\n          checked: user.Role === 'admin'\r\n        }\r\n      ],\r\n      buttons: [\r\n        { text: 'Cancelar', role: 'cancel' },\r\n        {\r\n          text: 'Cambiar',\r\n          handler: async (data) => {\r\n            user.Role = data;\r\n            await this.updateUser(user);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async changeApprovalStatus(user: User) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Cambiar Estado de Aprobación',\r\n      message: `Cambiar estado de aprobación de ${user.Name}`,\r\n      inputs: [\r\n        {\r\n          name: 'approvalStatus',\r\n          type: 'radio',\r\n          label: 'Aprobado',\r\n          value: 'approved',\r\n          checked: user.ApprovalStatus === 'approved'\r\n        },\r\n        {\r\n          name: 'approvalStatus',\r\n          type: 'radio',\r\n          label: 'Pendiente',\r\n          value: 'pending',\r\n          checked: user.ApprovalStatus === 'pending'\r\n        },\r\n        {\r\n          name: 'approvalStatus',\r\n          type: 'radio',\r\n          label: 'Rechazado',\r\n          value: 'rejected',\r\n          checked: user.ApprovalStatus === 'rejected'\r\n        }\r\n      ],\r\n      buttons: [\r\n        { text: 'Cancelar', role: 'cancel' },\r\n        {\r\n          text: 'Cambiar',\r\n          handler: async (data) => {\r\n            await this.updateUserApprovalStatus(user, data);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async updateUser(user: User) {\r\n    try {\r\n      const success = await this.databaseService.updateUserFromDb(user);\r\n      if (success) {\r\n        this.presentToast('Usuario actualizado con éxito', 'success');\r\n        const index = this.users.findIndex(u => u.UserID === user.UserID);\r\n        if (index !== -1) {\r\n          this.users[index] = { ...user };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      this.presentToast('Error al actualizar usuario', 'danger');\r\n    }\r\n  }\r\n\r\n  async updateUserApprovalStatus(user: User, status: 'approved' | 'pending' | 'rejected') {\r\n    try {\r\n      let success: boolean;\r\n      \r\n      if (status === 'pending') {\r\n        // Si el estado es 'pending', simplemente actualizamos el usuario localmente\r\n        success = true;\r\n      } else {\r\n        // Si el estado es 'approved' o 'rejected', llamamos al método del servicio\r\n        const result = await this.databaseService.updateUserApprovalStatus(user.UserID!, status).toPromise();\r\n        success = result !== undefined ? result : false;\r\n      }\r\n  \r\n      if (success) {\r\n        user.ApprovalStatus = status;\r\n        this.presentToast(`Usuario ${status === 'approved' ? 'aprobado' : status === 'pending' ? 'pendiente' : 'rechazado'} con éxito`, 'success');\r\n        await this.loadUsers(); // Recargar la lista de usuarios\r\n      } else {\r\n        throw new Error('No se pudo actualizar el estado de aprobación');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al actualizar el estado de aprobación:', error);\r\n      this.presentToast('Error al actualizar el estado de aprobación', 'danger');\r\n    }\r\n  }\r\n  async deleteUser(user: User) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar eliminación',\r\n      message: `¿Está seguro de que desea eliminar a ${user.Name}?`,\r\n      buttons: [\r\n        { text: 'Cancelar', role: 'cancel' },\r\n        {\r\n          text: 'Eliminar',\r\n          handler: async () => {\r\n            try {\r\n              await this.databaseService.deleteUser(user.UserID!).toPromise();\r\n              this.users = this.users.filter(u => u.UserID !== user.UserID);\r\n              this.presentToast('Usuario eliminado con éxito', 'success');\r\n            } catch (error) {\r\n              console.error('Error al eliminar usuario:', error);\r\n              this.presentToast('Error al eliminar usuario', 'danger');\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async presentToast(message: string, color: string = 'success') {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'bottom',\r\n      color: color\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  getRoleColor(role: string): string {\r\n    return role === 'admin' ? 'primary' : 'secondary';\r\n  }\r\n\r\n  getApprovalStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'success';\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'rejected':\r\n        return 'danger';\r\n      default:\r\n        return 'medium';\r\n    }\r\n  }\r\n\r\n  getRoleLabel(role: string): string {\r\n    switch (role) {\r\n      case 'admin':\r\n        return 'Administrador';\r\n      case 'employee':\r\n        return 'Empleado';\r\n      default:\r\n        return role;\r\n    }\r\n  }\r\n\r\n  getApprovalStatusLabel(status: string): string {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'Aprobado';\r\n      case 'pending':\r\n        return 'Pendiente';\r\n      case 'rejected':\r\n        return 'Rechazado';\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  async editUser(user: User) {\r\n    const alert = await this.alertController.create({\r\n      header: 'Editar Usuario',\r\n      inputs: [\r\n        {\r\n          name: 'name',\r\n          type: 'text',\r\n          value: user.Name,\r\n          placeholder: 'Nombre'\r\n        },\r\n        {\r\n          name: 'email',\r\n          type: 'email',\r\n          value: user.Email,\r\n          placeholder: 'Correo electrónico'\r\n        }\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Guardar',\r\n          handler: (data) => {\r\n            user.Name = data.name;\r\n            user.Email = data.email;\r\n            this.updateUser(user);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n}"
      },
      "guards": {
        "auth.guard.ts": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    \r\n    if (localStorage.getItem('currentUser')) {\r\n      // Usuario autenticado, permite el acceso\r\n      return true;\r\n    }\r\n\r\n    // Usuario no autenticado, redirige al login\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n    return false;\r\n  }\r\n}"
      },
      "login": {
        "login-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule {}\r\n",
        "login.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\nimport { LoginPage } from './login.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    LoginPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [LoginPage]\r\n})\r\nexport class LoginPageModule {}",
        "login.page.html": "<ion-content class=\"ion-padding\">\r\n  <div class=\"login-container\">\r\n    <h1>Bienvenido</h1>\r\n    <h2>Inicio de sesión</h2>\r\n    <form (ngSubmit)=\"onSubmit()\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Correo</ion-label>\r\n        <ion-input type=\"email\" [(ngModel)]=\"email\" name=\"email\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Contraseña</ion-label>\r\n        <ion-input type=\"password\" [(ngModel)]=\"password\" name=\"password\" required></ion-input>\r\n      </ion-item>\r\n      <ion-button expand=\"block\" type=\"submit\">Iniciar sesión</ion-button>\r\n    </form>\r\n    <a class=\"forgot-password\">¿Olvidaste tu contraseña?</a>\r\n    <a [routerLink]=\"['/register']\" class=\"register-link\">Registrarse</a>\r\n  </div>\r\n</ion-content>\r\n<ion-toast\r\n[isOpen]=\"showToast\"\r\n[message]=\"toastMessage\"\r\n[duration]=\"3000\"\r\nposition=\"top\"\r\ncolor=\"success\"\r\n></ion-toast>",
        "login.page.scss": ":host {\r\n    --ion-color-primary: #1c2833;\r\n    --ion-color-primary-rgb: 74, 144, 226;\r\n    --ion-color-primary-contrast: #ffffff;\r\n    --ion-color-primary-contrast-rgb: 255, 255, 255;\r\n    --ion-color-primary-shade: #417fc7;\r\n    --ion-color-primary-tint: #5c9ce5;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  }\r\n\r\n  .login-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    padding: 20px;\r\n    color: #4a4a4a;\r\n  }\r\n  \r\n  .logo {\r\n    width: 120px;\r\n    height: 120px;\r\n    margin-bottom: 40px;\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 2.5rem;\r\n    margin-bottom: 10px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  h2 {\r\n    font-size: 1.8rem;\r\n    margin-bottom: 30px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  form {\r\n    width: 100%;\r\n    max-width: 400px;\r\n  }\r\n  \r\n  ion-item {\r\n    --background: rgba(255, 255, 255, 0.1);\r\n    --border-color: rgba(255, 255, 255, 0.5);\r\n    --highlight-height: 0;\r\n    border-radius: 5px;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  ion-label {\r\n    color: #4a4a4a;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  ion-input {\r\n    --padding-start: 10px;\r\n    font-size: 16px;\r\n    --placeholder-color: #999;\r\n    --placeholder-opacity: 0.8;\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 30px;\r\n    height: 54px;\r\n    font-size: 18px;\r\n    text-transform: none;\r\n    --box-shadow: 0 4px 10px rgba(74, 144, 226, 0.3);\r\n    --border-radius: 27px;\r\n  }\r\n  \r\n  .forgot-password, .register-link {\r\n    margin-top: 20px;\r\n    color: var(--ion-color-primary-tint);\r\n    font-size: 16px;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    display: block;\r\n    \r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .logo {\r\n      width: 100px;\r\n      height: 100px;\r\n      margin-bottom: 30px;\r\n    }\r\n  \r\n    h1 {\r\n      font-size: 2rem;\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 24px;\r\n      margin-bottom: 25px;\r\n      color: var(--ion-color-primary-tint);\r\n    }\r\n    \r\n    ion-button {\r\n      font-size: 16px;\r\n      height: 50px;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate3d(0, 30px, 0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate3d(0, 0, 0);\r\n    }\r\n  }\r\n  \r\n  .login-container > * {\r\n    animation: fadeInUp 0.5s ease-out;\r\n    animation-fill-mode: both;\r\n  }\r\n  \r\n  .login-container > *:nth-child(1) { animation-delay: 0.1s; }\r\n  .login-container > *:nth-child(2) { animation-delay: 0.2s; }\r\n  .login-container > *:nth-child(3) { animation-delay: 0.3s; }\r\n  .login-container > *:nth-child(4) { animation-delay: 0.4s; }\r\n  .login-container > *:nth-child(5) { animation-delay: 0.5s; }",
        "login.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { LoginPage } from './login.page';\r\n\r\ndescribe('LoginPage', () => {\r\n  let component: LoginPage;\r\n  let fixture: ComponentFixture<LoginPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(LoginPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "login.page.ts": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { User } from '../models/user.model';\r\nimport { firstValueFrom } from 'rxjs';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage {\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  email: string = '';\r\n  password: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController\r\n  ) {}\r\n\r\n  async onSubmit() {\r\n    console.log('Iniciando proceso de login');\r\n    if (!this.email || !this.password) {\r\n      await this.presentToast('Por favor, ingrese email y contraseña.');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      console.log('Intentando autenticar:', this.email);\r\n      const user = await this.databaseService.authenticateUser(this.email, this.password);\r\n      console.log('Resultado de autenticación:', user);\r\n      \r\n      if (user) {\r\n        if (user.ApprovalStatus === 'approved') {\r\n          await this.handleSuccessfulLogin(user);\r\n        } else if (user.ApprovalStatus === 'pending') {\r\n          await this.presentToast('Su cuenta está pendiente de aprobación. Por favor, espere la confirmación del administrador.');\r\n        } else {\r\n          await this.presentToast('Su cuenta ha sido rechazada. Por favor, contacte al administrador.');\r\n        }\r\n      } else {\r\n        await this.presentToast('Credenciales incorrectas. Por favor, intente de nuevo.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error durante login:', error);\r\n      await this.presentToast('Ocurrió un error durante el inicio de sesión. Por favor, intente de nuevo.');\r\n    }\r\n  }\r\n\r\n\r\n  private async handleSuccessfulLogin(user: User) {\r\n    console.log('Usuario autenticado:', JSON.stringify(user));\r\n    const safeUserInfo = {\r\n      id: user.UserID,\r\n      username: user.Username,\r\n      name: user.Name,\r\n      email: user.Email,\r\n      role: user.Role\r\n    };\r\n    console.log('Información de usuario a guardar:', JSON.stringify(safeUserInfo));\r\n    localStorage.setItem('currentUser', JSON.stringify(safeUserInfo));\r\n    \r\n    if (user.UserID !== undefined) {\r\n      await this.databaseService.updateUserLastLogin(user.UserID);\r\n    }\r\n    \r\n    await this.presentToast(`Bienvenido, ${user.Name}!`);\r\n    \r\n    this.router.navigate(['/main']);\r\n  }\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  forgotPassword() {\r\n    // Implement password recovery logic here\r\n    this.presentToast('Se ha enviado un correo con instrucciones para recuperar tu contraseña.');\r\n  }\r\n}"
      },
      "main": {
        "main-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { MainPage } from './main.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MainPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MainPageRoutingModule {}\r\n",
        "main.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MainPage } from './main.page';\r\nimport { MainPageRoutingModule } from './main-routing.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    MainPageRoutingModule\r\n  ],\r\n  declarations: [MainPage]\r\n})\r\nexport class MainPageModule {}",
        "main.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>Menú - Orden #{{ currentOrderNumber || 'Nueva' }}</ion-title>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button routerLink=\"/carro-compras\">\r\n        <ion-icon name=\"cart-outline\" aria-hidden=\"true\"></ion-icon>\r\n        <ion-badge *ngIf=\"currentOrderItems && currentOrderItems.length > 0\">{{ currentOrderItems.length }}</ion-badge>\r\n        <span class=\"sr-only\">Carrito de compras</span>\r\n      </ion-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n  <div class=\"menu-container\">\r\n    <ion-grid>\r\n      <ion-row *ngIf=\"products && products.length > 0; else noProducts\">\r\n        <ion-col size=\"12\" size-md=\"6\" size-lg=\"4\" *ngFor=\"let product of products; let i = index\">\r\n          <ion-card class=\"product-card\">\r\n            <img [src]=\"product.imageURL\" [alt]=\"product.name || 'Imagen del producto'\"\r\n              (error)=\"handleImageError($event)\" />\r\n            <ion-card-header>\r\n              <ion-card-title>{{ product.name || 'Producto sin nombre' }}</ion-card-title>\r\n            </ion-card-header>\r\n            <ion-card-content>\r\n              <p>{{ product.description || 'Sin descripción disponible' }}</p>\r\n              <ion-text color=\"primary\">\r\n                <h2>{{ calculatePrice(product) | currency:'CLP':'symbol-narrow':'1.0-0' }}</h2>\r\n              </ion-text>\r\n              <ion-button expand=\"block\" (click)=\"toggleOptions(i)\">\r\n                {{ product.showOptions ? 'Ocultar opciones' : 'Personalizar y Añadir' }}\r\n              </ion-button>\r\n            </ion-card-content>\r\n          </ion-card>\r\n\r\n          <ion-card *ngIf=\"product.showOptions\" class=\"options-card\" [@slideInOut]>\r\n            <ion-card-content>\r\n              <ion-item>\r\n                <ion-label position=\"stacked\">Tamaño</ion-label>\r\n                <ion-select [(ngModel)]=\"product.selectedSize\" (ionChange)=\"updatePrice(product)\" interface=\"popover\"\r\n                  placeholder=\"Seleccione un tamaño\">\r\n                  <ion-select-option value=\"pequeño\">Pequeño (-$1.000)</ion-select-option>\r\n                  <ion-select-option value=\"medium\">Mediano</ion-select-option>\r\n                  <ion-select-option value=\"grande\">Grande (+$1.000)</ion-select-option>\r\n                </ion-select>\r\n              </ion-item>\r\n              <ion-item>\r\n                <ion-label position=\"stacked\">Tipo de leche</ion-label>\r\n                <ion-select [(ngModel)]=\"product.selectedMilk\" interface=\"popover\"\r\n                  placeholder=\"Seleccione un tipo de leche\">\r\n                  <ion-select-option value=\"regular\">Regular</ion-select-option>\r\n                  <ion-select-option value=\"descremada\">Descremada</ion-select-option>\r\n                  <ion-select-option value=\"soya\">Soya</ion-select-option>\r\n                  <ion-select-option value=\"almendra\">Almendra</ion-select-option>\r\n                </ion-select>\r\n              </ion-item>\r\n              <ion-button expand=\"block\" (click)=\"addToCart(product)\">Añadir al Carrito</ion-button>\r\n            </ion-card-content>\r\n          </ion-card>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ng-template #noProducts>\r\n        <ion-col>\r\n          <ion-card>\r\n            <ion-card-header>\r\n              <ion-card-title>No hay productos disponibles</ion-card-title>\r\n            </ion-card-header>\r\n            <ion-card-content>\r\n              <p>Lo sentimos, no hay productos disponibles en este momento. Por favor, intente más tarde.</p>\r\n            </ion-card-content>\r\n          </ion-card>\r\n        </ion-col>\r\n      </ng-template>\r\n    </ion-grid>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-button expand=\"block\" \r\n    routerLink=\"/carro-compras\" \r\n    [disabled]=\"currentOrderItems.length === 0\">\r\nCompletar Orden ({{ currentOrderItems.length }} items)\r\n</ion-button>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n\r\n<ion-toast [isOpen]=\"showToast\" [message]=\"toastMessage\" [duration]=\"3000\" position=\"top\" color=\"primary\">\r\n</ion-toast>",
        "main.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  .menu-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .product-card {\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n  \r\n    img {\r\n      width: 100%;\r\n      height: 200px;\r\n      object-fit: cover;\r\n    }\r\n  \r\n    ion-card-header {\r\n      padding: 16px;\r\n    }\r\n  \r\n    ion-card-title {\r\n      font-size: 1.2rem;\r\n      font-weight: bold;\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 0 16px 16px;\r\n  \r\n      p {\r\n        font-size: 0.9rem;\r\n        color: var(--ion-color-medium);\r\n        margin-bottom: 10px;\r\n      }\r\n  \r\n      h2 {\r\n        font-size: 1.4rem;\r\n        font-weight: bold;\r\n        margin: 10px 0;\r\n        color: var(--ion-color-success);\r\n      }\r\n  \r\n      ion-button {\r\n        margin-top: 10px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .options-card {\r\n    margin-top: -10px;\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n    }\r\n  \r\n    ion-item {\r\n      --padding-start: 0;\r\n      --inner-padding-end: 0;\r\n    }\r\n  \r\n    ion-select {\r\n      width: 100%;\r\n      max-width: 100%;\r\n    }\r\n  \r\n    ion-button {\r\n      margin-top: 16px;\r\n    }\r\n  }\r\n  \r\n  ion-footer {\r\n    ion-toolbar {\r\n      --padding-top: 0;\r\n      --padding-bottom: 0;\r\n      --padding-start: 16px;\r\n      --padding-end: 16px;\r\n    }\r\n  \r\n    ion-button {\r\n      margin: 10px 0;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n  \r\n  .product-card {\r\n    animation: fadeIn 0.5s ease-out;\r\n  }\r\n  \r\n  // Estilos responsivos\r\n  @media (max-width: 576px) {\r\n    .product-card {\r\n      ion-card-title {\r\n        font-size: 1.1rem;\r\n      }\r\n  \r\n      ion-card-content {\r\n        p {\r\n          font-size: 0.85rem;\r\n        }\r\n  \r\n        h2 {\r\n          font-size: 1.3rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Estilos para el badge del carrito\r\n  ion-badge {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n    font-size: 12px;\r\n    padding: 2px 4px;\r\n    border-radius: 50%;\r\n  }",
        "main.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { MainPage } from './main.page';\r\n\r\ndescribe('MainPage', () => {\r\n  let component: MainPage;\r\n  let fixture: ComponentFixture<MainPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(MainPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "main.page.ts": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\nimport { Product } from '../models/product.model';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\ninterface ExtendedProduct extends Product {\r\n  showOptions: boolean;\r\n  selectedSize: string;\r\n  selectedMilk: string;\r\n  imageURL: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.page.html',\r\n  styleUrls: ['./main.page.scss'],\r\n  animations: [\r\n    trigger('slideInOut', [\r\n      transition(':enter', [\r\n        style({ transform: 'translateY(100%)' }),\r\n        animate('200ms ease-out', style({ transform: 'translateY(0%)' }))\r\n      ]),\r\n      transition(':leave', [\r\n        animate('200ms ease-in', style({ transform: 'translateY(100%)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class MainPage implements OnInit, OnDestroy {\r\n  products: ExtendedProduct[] = [];\r\n  currentOrderNumber: number = 1;\r\n  currentOrderItems: any[] = [];\r\n  isLoading: boolean = false;\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n\r\n  private navigationSubscription: Subscription = new Subscription();\r\n  \r\n  \r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    \r\n    private loadingController: LoadingController\r\n    \r\n  ) {\r\n    const lastOrderNumber = parseInt(localStorage.getItem('lastOrderNumber') || '0');\r\n    this.currentOrderNumber = lastOrderNumber + 1;\r\n    this.navigationSubscription = new Subscription();\r\n    this.loadCurrentOrderNumber();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadProducts();\r\n    this.loadCurrentOrder();\r\n\r\n    // Suscribirse a los eventos de navegación\r\n    this.navigationSubscription.add(\r\n      this.router.events.pipe(\r\n        filter((event): event is NavigationEnd => event instanceof NavigationEnd)\r\n      ).subscribe(() => {\r\n        this.loadCurrentOrder();\r\n      })\r\n    );\r\n  }\r\n  ngOnDestroy() {\r\n    if (this.navigationSubscription) {\r\n      this.navigationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  loadCurrentOrder() {\r\n    const storedOrder = JSON.parse(localStorage.getItem('currentOrder') || 'null');\r\n    if (storedOrder) {\r\n      this.currentOrderNumber = storedOrder.orderNumber;\r\n      this.currentOrderItems = storedOrder.items || [];\r\n    } else {\r\n      this.loadCurrentOrderNumber();\r\n      this.currentOrderItems = [];\r\n    }\r\n    console.log('Current order loaded:', { number: this.currentOrderNumber, items: this.currentOrderItems });\r\n  }\r\n\r\n  resetCart() {\r\n    const lastOrderNumber = parseInt(localStorage.getItem('lastOrderNumber') || '0');\r\n    this.currentOrderNumber = lastOrderNumber + 1;\r\n    this.currentOrderItems = [];\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n\r\n  async loadProducts() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando productos...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const products = await this.getAllProducts();\r\n      console.log('Productos obtenidos de la base de datos:', products);\r\n  \r\n      this.products = products.map(product => ({\r\n        ...product,\r\n        imageURL: product.imageURL.startsWith('assets/') ? product.imageURL : `assets/${product.imageURL}`,\r\n        showOptions: false,\r\n        selectedSize: 'medium',\r\n        selectedMilk: 'regular'\r\n      }));\r\n  \r\n      console.log('Productos procesados:', this.products);\r\n    } catch (error) {\r\n      console.error('Error al cargar los productos:', error);\r\n      this.presentToast('Error al cargar los productos. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n\r\n  private getAllProducts(): Promise<Product[]> {\r\n    return new Promise((resolve, reject) => {\r\n      this.databaseService.getAllProducts().subscribe({\r\n        next: (products) => {\r\n          resolve(products);\r\n        },\r\n        error: (err) => {\r\n          reject(err);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n\r\n  get currentUserName(): string | null {\r\n    const userString = localStorage.getItem('currentUser');\r\n    if (userString) {\r\n      const user = JSON.parse(userString);\r\n      return user.name || null;\r\n    }\r\n    return null;\r\n  }\r\n  toggleOptions(index: number) {\r\n    this.products[index].showOptions = !this.products[index].showOptions;\r\n  }\r\n\r\n  calculatePrice(product: ExtendedProduct): number {\r\n    let adjustedPrice = product.price;\r\n    if (product.selectedSize === 'pequeño') {\r\n      adjustedPrice -= 1000;\r\n    } else if (product.selectedSize === 'grande') {\r\n      adjustedPrice += 1000;\r\n    }\r\n    return adjustedPrice;\r\n  }\r\n\r\n  updatePrice(product: ExtendedProduct) {\r\n    // La lógica para actualizar el precio puede ir aquí si es necesario\r\n  }\r\n\r\n  async addToCart(product: ExtendedProduct) {\r\n    if (!this.isLoggedIn) {\r\n      await this.presentToast('Por favor, inicia sesión para añadir productos al carrito');\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n  \r\n    const existingItemIndex = this.currentOrderItems.findIndex(item => \r\n      item.id === product.id && \r\n      item.selectedSize === product.selectedSize && \r\n      item.selectedMilk === product.selectedMilk\r\n    );\r\n  \r\n    if (existingItemIndex !== -1) {\r\n      this.currentOrderItems[existingItemIndex].quantity += 1;\r\n    } else {\r\n      this.currentOrderItems.push({\r\n        ...product,\r\n        quantity: 1,\r\n        finalPrice: this.calculatePrice(product),\r\n        image: product.imageURL\r\n      });\r\n    }\r\n  \r\n    product.showOptions = false;\r\n  \r\n    this.updateLocalStorage();\r\n    console.log('Item added to cart:', this.currentOrderItems);\r\n  }\r\n\r\n  updateLocalStorage() {\r\n    localStorage.setItem('currentOrder', JSON.stringify({\r\n      orderNumber: this.currentOrderNumber,\r\n      items: this.currentOrderItems\r\n    }));\r\n    localStorage.setItem('lastOrderNumber', this.currentOrderNumber.toString());\r\n    console.log('Local storage updated:', { number: this.currentOrderNumber, items: this.currentOrderItems });\r\n  }\r\n\r\n  async completeOrder() {\r\n    if (this.currentOrderItems.length === 0) {\r\n      await this.presentToast('El carrito está vacío. Añada productos antes de completar la orden.');\r\n      return;\r\n    }\r\n\r\n  // Guardar el número de orden actual antes de navegar\r\n  const currentOrderNumber = this.currentOrderNumber;\r\n\r\n  \r\n    this.updateLocalStorage();\r\n    this.router.navigate(['/carro-compras']);\r\n    \r\n    // Resetear el carrito después de navegar\r\n    this.currentOrderItems = [];\r\n    this.currentOrderNumber++;\r\n    this.updateLocalStorage();\r\n\r\n    setTimeout(() => {\r\n      this.currentOrderItems = [];\r\n      this.currentOrderNumber = currentOrderNumber + 1;\r\n      this.updateLocalStorage();\r\n    }, 100);\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n  \r\n  loadCurrentOrderNumber() {\r\n    const lastOrderNumber = parseInt(localStorage.getItem('lastOrderNumber') || '0');\r\n    this.currentOrderNumber = lastOrderNumber + 1;\r\n    localStorage.setItem('lastOrderNumber', this.currentOrderNumber.toString());\r\n  }\r\n\r\n  // Método para manejar la actualización de cantidad directamente en la página principal\r\n  updateQuantity(product: ExtendedProduct, change: number) {\r\n    const index = this.currentOrderItems.findIndex(item => \r\n      item.id === product.id && \r\n      item.selectedSize === product.selectedSize && \r\n      item.selectedMilk === product.selectedMilk\r\n    );\r\n\r\n    if (index !== -1) {\r\n      this.currentOrderItems[index].quantity += change;\r\n      if (this.currentOrderItems[index].quantity <= 0) {\r\n        this.currentOrderItems.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  // Método para obtener la cantidad actual de un producto en el carrito\r\n  getQuantityInCart(product: ExtendedProduct): number {\r\n    const item = this.currentOrderItems.find(item => \r\n      item.id === product.id && \r\n      item.selectedSize === product.selectedSize && \r\n      item.selectedMilk === product.selectedMilk\r\n    );\r\n    return item ? item.quantity : 0;\r\n  }\r\n\r\n  handleImageError(event: any) {\r\n    event.target.src = 'assets/default-product-image.jpg';\r\n  }\r\n\r\n}\r\n\r\n\r\n"
      },
      "models": {
        "inventory.model.ts": "export interface Inventory {\r\n    id?: number;\r\n    productId: number;\r\n    quantity: number;\r\n    lastRestockedAt?: Date;\r\n  }",
        "order-detail.model.js": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n",
        "order-detail.model.ts": "export interface OrderDetail {\r\n  id?: number;\r\n  orderId: number;\r\n  productId: number;\r\n  quantity: number;\r\n  size?: string;\r\n  milkType?: string;\r\n  price: number;\r\n  name?: string;\r\n  image?: string;\r\n  selectedSize?: string;\r\n  selectedMilk?: string;\r\n  finalPrice?: number;\r\n}",
        "order.model.js": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n",
        "order.model.ts": "import { OrderDetail } from './order-detail.model';\r\n\r\nexport interface Order {\r\n  id?: number;\r\n  orderNumber: number;\r\n  userId: number;\r\n  tableNumber: number | null;\r\n  status: 'Solicitado' | 'En proceso' | 'Listo' | 'Cancelado' | 'Entregado';\r\n  notes: string;\r\n  totalAmount: number;  \r\n  paymentMethod: string;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n  items?: OrderDetail[];\r\n}",
        "product.model.js": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n",
        "product.model.ts": "export interface Product {\r\n  id?: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  category: string;\r\n  imageURL: string;\r\n  isAvailable: boolean;\r\n}",
        "sales-report.model.ts": "export interface SalesReport {\r\n    id?: number;\r\n    date: string;\r\n    totalSales: number;\r\n    totalOrders: number;\r\n    averageOrderValue: number;\r\n    topSellingProduct: number;\r\n    generatedBy: number;\r\n    createdAt?: string;\r\n  }",
        "table.model.ts": "export interface Table {\r\n    id?: number;\r\n    tableNumber: number;\r\n    capacity: number;\r\n    status: 'Libre' | 'Ocupada' | 'Reservada';\r\n  }",
        "user.model.js": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n",
        "user.model.ts": "export interface User {\r\n  UserID?: number;\r\n  Username: string;\r\n  Password: string;\r\n  Role: 'employee' | 'admin' | 'manager';\r\n  Name: string;\r\n  Email: string;\r\n  PhoneNumber?: string;\r\n  HireDate?: Date;\r\n  LastLogin?: Date;\r\n  ApprovalStatus: 'pending' | 'approved' | 'rejected';\r\n}"
      },
      "not-found": {
        "not-found-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { NotFoundPage } from './not-found.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: NotFoundPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NotFoundPageRoutingModule {}\r\n",
        "not-found.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { NotFoundPageRoutingModule } from './not-found-routing.module';\r\n\r\nimport { NotFoundPage } from './not-found.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    NotFoundPageRoutingModule\r\n  ],\r\n  declarations: [NotFoundPage]\r\n})\r\nexport class NotFoundPageModule {}\r\n",
        "not-found.page.html": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Página no encontrada</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <div class=\"not-found-container\">\r\n    <h1>404</h1>\r\n    <h2>Página no encontrada</h2>\r\n    <p>Lo sentimos, la página que estás buscando no existe.</p>\r\n    <ion-button routerLink=\"/login\">Volver al inicio</ion-button>\r\n  </div>\r\n</ion-content>",
        "not-found.page.scss": ".not-found-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    text-align: center;\r\n  \r\n    h1 {\r\n      font-size: 6rem;\r\n      margin-bottom: 0;\r\n      color: var(--ion-color-primary);\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 2rem;\r\n      margin-top: 0;\r\n      color: var(--ion-color-dark);\r\n    }\r\n  \r\n    p {\r\n      font-size: 1.2rem;\r\n      color: var(--ion-color-medium);\r\n      margin-bottom: 2rem;\r\n    }\r\n  }",
        "not-found.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { NotFoundPage } from './not-found.page';\r\n\r\ndescribe('NotFoundPage', () => {\r\n  let component: NotFoundPage;\r\n  let fixture: ComponentFixture<NotFoundPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(NotFoundPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "not-found.page.ts": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.page.html',\r\n  styleUrls: ['./not-found.page.scss'],\r\n})\r\nexport class NotFoundPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n"
      },
      "orden-card": {
        "orden-card.component.html": "<!-- orden-card.component.html -->\r\n<ion-card class=\"orden-card\">\r\n  <ion-card-header>\r\n    <ion-card-title>Orden #{{ orden.id || 'N/A' }} - Mesa {{ orden.tableNumber || 'N/A' }}</ion-card-title>\r\n    <ion-card-subtitle>\r\n      <ion-badge [color]=\"orden.status === 'Solicitado' ? 'warning' : \r\n                          orden.status === 'En proceso' ? 'primary' : \r\n                          orden.status === 'Listo' ? 'success' : 'danger'\">\r\n        {{ orden.status || 'Desconocido' }}\r\n      </ion-badge>\r\n    </ion-card-subtitle>\r\n  </ion-card-header>\r\n\r\n  <ion-card-content>\r\n    <div class=\"items-list\">\r\n      <p *ngFor=\"let item of orden.items\">\r\n        {{ item.name || 'Producto desconocido' }} x{{ item.quantity || 0 }}\r\n        <span *ngIf=\"item.size || item.milkType\" class=\"item-details\">\r\n          ({{ item.size || 'Tamaño estándar' }}\r\n          <ng-container *ngIf=\"item.milkType\">, leche {{ item.milkType }}</ng-container>)\r\n        </span>\r\n        <ion-note slot=\"end\">{{ (item.price * item.quantity) | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n      </p>\r\n    </div>\r\n    <p class=\"total-amount\">\r\n      <strong>Total:</strong> \r\n      <ion-note slot=\"end\" color=\"primary\">{{ getOrderTotal() | currency:'CLP':'symbol-narrow':'1.0-0' }}</ion-note>\r\n    </p>\r\n    <p *ngIf=\"orden.notes\" class=\"notes\">\r\n      <ion-icon name=\"create-outline\"></ion-icon>\r\n      <strong>Notas:</strong> {{ orden.notes }}\r\n    </p>\r\n  </ion-card-content>\r\n\r\n  <div class=\"action-buttons\">\r\n    <ion-button [disabled]=\"orden.status !== 'Solicitado'\" (click)=\"onCambiarEstado('En proceso')\" color=\"primary\">\r\n      En Proceso\r\n    </ion-button>\r\n    <ion-button [disabled]=\"orden.status !== 'En proceso'\" (click)=\"onCambiarEstado('Listo')\" color=\"success\">\r\n      Lista\r\n    </ion-button>\r\n    <ion-button [disabled]=\"orden.status === 'Listo' || orden.status === 'Cancelado'\" (click)=\"onCambiarEstado('Cancelado')\" color=\"danger\">\r\n      Cancelar\r\n    </ion-button>\r\n  </div>\r\n</ion-card>",
        "orden-card.component.scss": "",
        "orden-card.component.spec.ts": "import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { OrdenCardComponent } from './orden-card.component';\r\n\r\ndescribe('OrdenCardComponent', () => {\r\n  let component: OrdenCardComponent;\r\n  let fixture: ComponentFixture<OrdenCardComponent>;\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [ OrdenCardComponent ],\r\n      imports: [IonicModule.forRoot()]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(OrdenCardComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  }));\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "orden-card.component.ts": "// orden-card.component.ts\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Order } from '../models/order.model';\r\n\r\n@Component({\r\n  selector: 'app-orden-card',\r\n  templateUrl: './orden-card.component.html',\r\n  styleUrls: ['./orden-card.component.scss']\r\n})\r\nexport class OrdenCardComponent {\r\n  @Input() orden!: Order;\r\n  @Output() cambiarEstado = new EventEmitter<{orden: Order, nuevoEstado: string}>();\r\n\r\n  onCambiarEstado(nuevoEstado: string) {\r\n    this.cambiarEstado.emit({orden: this.orden, nuevoEstado});\r\n  }\r\n\r\n  getOrderTotal(): number {\r\n    return this.orden.items?.reduce((total, item) => total + ((item.price || 0) * (item.quantity || 0)), 0) || 0;\r\n  }\r\n}"
      },
      "perfil": {
        "perfil-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PerfilPage } from './perfil.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PerfilPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PerfilPageRoutingModule {}\r\n",
        "perfil.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { PerfilPageRoutingModule } from './perfil-routing.module';\r\n\r\nimport { PerfilPage } from './perfil.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    PerfilPageRoutingModule\r\n  ],\r\n  declarations: [PerfilPage]\r\n})\r\nexport class PerfilPageModule {}\r\n",
        "perfil.page.html": "<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Mi Perfil</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>\r\n        <ion-icon name=\"person-circle-outline\" class=\"ion-margin-end\"></ion-icon>\r\n        Información Personal\r\n      </ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <form (ngSubmit)=\"updatePerfil()\" #perfilForm=\"ngForm\">\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Nombre</ion-label>\r\n          <ion-input [(ngModel)]=\"usuario.Name\" name=\"name\" required #name=\"ngModel\"></ion-input>\r\n        </ion-item>\r\n        <ion-text color=\"danger\" *ngIf=\"name.invalid && (name.dirty || name.touched)\">\r\n          <small>El nombre es requerido</small>\r\n        </ion-text>\r\n\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Email</ion-label>\r\n          <ion-input [(ngModel)]=\"usuario.Email\" name=\"email\" type=\"email\" required #email=\"ngModel\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"></ion-input>\r\n        </ion-item>\r\n        <ion-text color=\"danger\" *ngIf=\"email.invalid && (email.dirty || email.touched)\">\r\n          <small>Por favor, ingrese un email válido</small>\r\n        </ion-text>\r\n\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Rol</ion-label>\r\n          <ion-input [value]=\"usuario.Role === 'admin' ? 'Administrador' : 'Empleado'\" readonly></ion-input>\r\n        </ion-item>\r\n\r\n        <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\" [disabled]=\"!perfilForm.form.valid\">Actualizar Perfil</ion-button>\r\n      </form>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-card>\r\n    <ion-card-header>\r\n      <ion-card-title>\r\n        <ion-icon name=\"lock-closed-outline\" class=\"ion-margin-end\"></ion-icon>\r\n        Cambiar Contraseña\r\n      </ion-card-title>\r\n    </ion-card-header>\r\n    <ion-card-content>\r\n      <form (ngSubmit)=\"cambiarContrasena()\" #passwordForm=\"ngForm\">\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Contraseña Actual</ion-label>\r\n          <ion-input [(ngModel)]=\"datosContrasena.contrasenaActual\" name=\"contrasenaActual\" type=\"password\" required #contrasenaActual=\"ngModel\"></ion-input>\r\n        </ion-item>\r\n        <ion-text color=\"danger\" *ngIf=\"contrasenaActual.invalid && (contrasenaActual.dirty || contrasenaActual.touched)\">\r\n          <small>La contraseña actual es requerida</small>\r\n        </ion-text>\r\n\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Nueva Contraseña</ion-label>\r\n          <ion-input [(ngModel)]=\"datosContrasena.nuevaContrasena\" name=\"nuevaContrasena\" type=\"password\" required minlength=\"8\" #nuevaContrasena=\"ngModel\"></ion-input>\r\n        </ion-item>\r\n        <ion-text color=\"danger\" *ngIf=\"nuevaContrasena.invalid && (nuevaContrasena.dirty || nuevaContrasena.touched)\">\r\n          <small>La nueva contraseña debe tener al menos 8 caracteres</small>\r\n        </ion-text>\r\n\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Confirmar Nueva Contraseña</ion-label>\r\n          <ion-input [(ngModel)]=\"datosContrasena.confirmarContrasena\" name=\"confirmarContrasena\" type=\"password\" required #confirmarContrasena=\"ngModel\"></ion-input>\r\n        </ion-item>\r\n        <ion-text color=\"danger\" *ngIf=\"nuevaContrasena.value !== confirmarContrasena.value && (confirmarContrasena.dirty || confirmarContrasena.touched)\">\r\n          <small>Las contraseñas no coinciden</small>\r\n        </ion-text>\r\n\r\n        <ion-button expand=\"block\" type=\"submit\" class=\"ion-margin-top\" [disabled]=\"!passwordForm.form.valid || nuevaContrasena.value !== confirmarContrasena.value\">\r\n          Cambiar Contraseña\r\n        </ion-button>\r\n      </form>\r\n    </ion-card-content>\r\n  </ion-card>\r\n\r\n  <ion-button expand=\"block\" (click)=\"logout()\" color=\"danger\" class=\"ion-margin-top\">\r\n    <ion-icon name=\"log-out-outline\" slot=\"start\"></ion-icon>\r\n    Cerrar Sesión\r\n  </ion-button>\r\n</ion-content>\r\n\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"top\"\r\n  color=\"success\">\r\n</ion-toast>",
        "perfil.page.scss": ":host {\r\n    --ion-color-primary: #3880ff;\r\n    --ion-color-secondary: #3dc2ff;\r\n    --ion-color-tertiary: #5260ff;\r\n    --ion-color-success: #2dd36f;\r\n    --ion-color-warning: #ffc409;\r\n    --ion-color-danger: #eb445a;\r\n    --ion-color-medium: #92949c;\r\n    --ion-color-light: #f4f5f8;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: #f4f5f8;\r\n  }\r\n  \r\n  .profile-header {\r\n    background-color: #f0f0f0;\r\n    padding: 30px 20px;\r\n    text-align: center;\r\n    color: #333;\r\n  \r\n    .profile-image {\r\n      width: 120px;\r\n      height: 120px;\r\n      border-radius: 50%;\r\n      margin: 0 auto 20px;\r\n      border: 4px solid #ffffff;\r\n      overflow: hidden;\r\n      \r\n      img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n      }\r\n    }\r\n  \r\n    h2 {\r\n      margin: 0;\r\n      font-size: 24px;\r\n      font-weight: bold;\r\n      color: #333;\r\n    }\r\n  \r\n    p {\r\n      margin: 5px 0 0;\r\n      font-size: 16px;\r\n      color: #666;\r\n    }\r\n  }\r\n  \r\n  .profile-content {\r\n    padding: 20px;\r\n  }\r\n  \r\n  ion-card {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    margin-bottom: 20px;\r\n    background-color: #ffffff;\r\n  \r\n    ion-card-header {\r\n      background-color: #f0f0f0;\r\n      border-bottom: 1px solid #e0e0e0;\r\n  \r\n      ion-card-title {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n      }\r\n    }\r\n  \r\n    ion-card-content {\r\n      padding: 16px;\r\n    }\r\n  }\r\n  \r\n  ion-item {\r\n    --padding-start: 0;\r\n    --inner-padding-end: 0;\r\n    --background: transparent;\r\n  \r\n    ion-label {\r\n      color: #333;\r\n      font-size: 14px;\r\n    }\r\n  \r\n    ion-input, ion-textarea, ion-select {\r\n      --padding-start: 0;\r\n      font-size: 16px;\r\n      color: #333;\r\n    }\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 20px;\r\n    --background: #5c9ce5;\r\n    --background-hover: #4a90e2;\r\n    --color: #ffffff;\r\n    --border-radius: 8px;\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    .profile-header {\r\n      padding: 20px;\r\n  \r\n      .profile-image {\r\n        width: 100px;\r\n        height: 100px;\r\n      }\r\n  \r\n      h2 {\r\n        font-size: 20px;\r\n      }\r\n  \r\n      p {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  \r\n    ion-card {\r\n      ion-card-header {\r\n        ion-card-title {\r\n          font-size: 16px;\r\n        }\r\n      }\r\n    }\r\n  \r\n    ion-item {\r\n      ion-label {\r\n        font-size: 13px;\r\n      }\r\n  \r\n      ion-input, ion-textarea, ion-select {\r\n        font-size: 15px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from { \r\n      opacity: 0;\r\n      transform: translateY(20px);\r\n    }\r\n    to { \r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  \r\n  ion-card {\r\n    animation: fadeInUp 0.3s ease-out;\r\n  }\r\n  \r\n  .profile-header {\r\n    animation: fadeInUp 0.5s ease-out;\r\n  }",
        "perfil.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { PerfilPage } from './perfil.page';\r\n\r\ndescribe('PerfilPage', () => {\r\n  let component: PerfilPage;\r\n  let fixture: ComponentFixture<PerfilPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(PerfilPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "perfil.page.ts": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastController, LoadingController, AlertController } from '@ionic/angular';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-perfil',\r\n  templateUrl: './perfil.page.html',\r\n  styleUrls: ['./perfil.page.scss'],\r\n})\r\nexport class PerfilPage implements OnInit, OnDestroy {\r\n  @ViewChild('perfilForm') perfilForm!: NgForm;\r\n  @ViewChild('passwordForm') passwordForm!: NgForm;\r\n\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  \r\n  usuario: User = {\r\n    UserID: 0,\r\n    Username: '',\r\n    Password: '',\r\n    Role: 'employee',\r\n    Name: '',\r\n    Email: '',\r\n    PhoneNumber: '',\r\n    HireDate: new Date(),\r\n    LastLogin: new Date(),\r\n    ApprovalStatus: 'approved'\r\n  };\r\n\r\n  datosContrasena = {\r\n    contrasenaActual: '',\r\n    nuevaContrasena: '',\r\n    confirmarContrasena: ''\r\n  };\r\n\r\n  esAdmin: boolean = false;\r\n  private subscriptions: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.cargarPerfilUsuario();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  async cargarPerfilUsuario() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cargando perfil...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const userId = this.obtenerIdUsuarioActual();\r\n      if (!userId) {\r\n        throw new Error('No se encontró un usuario activo');\r\n      }\r\n  \r\n      this.usuario = await this.getUserById(userId);\r\n      this.esAdmin = this.usuario.Role === 'admin';\r\n      \r\n      console.log('Usuario cargado:', this.usuario);\r\n      console.log('Es admin:', this.esAdmin);\r\n    } catch (error) {\r\n      console.error('Error al cargar el perfil del usuario:', error);\r\n      await this.presentToast('Error al cargar el perfil. Por favor, intente de nuevo.');\r\n      this.router.navigate(['/login']);\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private getUserById(userId: number): Promise<User> {\r\n    return new Promise((resolve, reject) => {\r\n      this.databaseService.getUserById(userId).subscribe(\r\n        (user) => {\r\n          if (user) {\r\n            resolve(user);\r\n          } else {\r\n            reject(new Error('Usuario no encontrado'));\r\n          }\r\n        },\r\n        (error) => reject(error)\r\n      );\r\n    });\r\n  }\r\n\r\n  async updatePerfil() {\r\n    if (!this.perfilForm.valid) {\r\n      await this.presentToast('Por favor, complete todos los campos correctamente.');\r\n      return;\r\n    }\r\n\r\n    const loading = await this.loadingController.create({\r\n      message: 'Actualizando perfil...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      const currentRole = this.usuario.Role;\r\n      const success = await this.updateUser(this.usuario);\r\n      if (success) {\r\n        this.usuario.Role = currentRole;\r\n        await this.presentToast('Perfil actualizado con éxito');\r\n      } else {\r\n        throw new Error('No se pudo actualizar el perfil');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al actualizar el perfil:', error);\r\n      await this.presentToast('Error al actualizar el perfil. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private async updateUser(user: User): Promise<boolean> {\r\n    try {\r\n      const result = await this.databaseService.updateUserFromDb(user);\r\n      return result !== undefined ? result : false;\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async cambiarContrasena() {\r\n    if (!this.passwordForm.valid) {\r\n      await this.presentToast('Por favor, complete todos los campos correctamente.');\r\n      return;\r\n    }\r\n\r\n    if (this.datosContrasena.nuevaContrasena !== this.datosContrasena.confirmarContrasena) {\r\n      await this.presentToast('Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n\r\n    if (this.datosContrasena.nuevaContrasena.length < 8) {\r\n      await this.presentToast('La nueva contraseña debe tener al menos 8 caracteres');\r\n      return;\r\n    }\r\n\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar cambio de contraseña',\r\n      message: '¿Estás seguro de que quieres cambiar tu contraseña?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Confirmar',\r\n          handler: () => {\r\n            this.realizarCambioContrasena();\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  private async realizarCambioContrasena() {\r\n    const loading = await this.loadingController.create({\r\n      message: 'Cambiando contraseña...',\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      const success = await this.updateUserPassword(\r\n        this.usuario.UserID!,\r\n        this.datosContrasena.contrasenaActual,\r\n        this.datosContrasena.nuevaContrasena\r\n      );\r\n      if (success) {\r\n        await this.presentToast('Contraseña cambiada con éxito');\r\n        this.datosContrasena = { contrasenaActual: '', nuevaContrasena: '', confirmarContrasena: '' };\r\n        this.passwordForm.resetForm();\r\n      } else {\r\n        throw new Error('No se pudo cambiar la contraseña');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al cambiar la contraseña:', error);\r\n      await this.presentToast('Error al cambiar la contraseña. Por favor, intente de nuevo.');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private updateUserPassword(userId: number, currentPassword: string, newPassword: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      this.databaseService.updateUserPassword(userId, currentPassword, newPassword).subscribe(\r\n        (success) => resolve(success),\r\n        (error) => reject(error)\r\n      );\r\n    });\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  private obtenerIdUsuarioActual(): number | null {\r\n    const usuarioActual = localStorage.getItem('currentUser');\r\n    if (usuarioActual) {\r\n      return JSON.parse(usuarioActual).id;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async logout() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Cerrar sesión',\r\n      message: '¿Estás seguro de que quieres cerrar sesión?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Sí, cerrar sesión',\r\n          handler: () => {\r\n            localStorage.removeItem('currentUser');\r\n            this.router.navigate(['/login']);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n}"
      },
      "register": {
        "register-routing.module.ts": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegisterPage } from './register.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegisterPageRoutingModule {}\r\n",
        "register.module.ts": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { RegisterPageRoutingModule } from './register-routing.module';\r\nimport { RegisterPage } from './register.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RegisterPageRoutingModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [RegisterPage]\r\n})\r\nexport class RegisterPageModule {}",
        "register.page.html": "<ion-content class=\"ion-padding\">\r\n  <div class=\"register-container\">\r\n    <h1>Únete a nosotros</h1>\r\n    <h2>Registro</h2>\r\n    <form (ngSubmit)=\"onSubmit()\" #registerForm=\"ngForm\">\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Nombre</ion-label>\r\n        <ion-input type=\"text\" [(ngModel)]=\"name\" name=\"name\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Correo electrónico</ion-label>\r\n        <ion-input type=\"email\" [(ngModel)]=\"email\" name=\"email\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Contraseña</ion-label>\r\n        <ion-input type=\"password\" [(ngModel)]=\"password\" name=\"password\" required></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"floating\">Confirmar Contraseña</ion-label>\r\n        <ion-input type=\"password\" [(ngModel)]=\"confirmPassword\" name=\"confirmPassword\" required></ion-input>\r\n      </ion-item>\r\n      <ion-text color=\"danger\" *ngIf=\"password !== confirmPassword && registerForm.submitted\">\r\n        Las contraseñas no coinciden\r\n      </ion-text>\r\n\r\n      <ion-button expand=\"block\" type=\"submit\" [disabled]=\"password !== confirmPassword\">\r\n        Registrarse\r\n      </ion-button>\r\n    </form>\r\n    <a [routerLink]=\"['/login']\" class=\"login-link\">¿Ya tienes una cuenta? Inicia sesión</a>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-toast\r\n  [isOpen]=\"showToast\"\r\n  [message]=\"toastMessage\"\r\n  [duration]=\"3000\"\r\n  position=\"top\"\r\n  color=\"primary\">\r\n</ion-toast>\r\n",
        "register.page.scss": ":host {\r\n    --ion-color-primary: #1c2833;\r\n    --ion-color-primary-rgb: 74, 144, 226;\r\n    --ion-color-primary-contrast: #ffffff;\r\n    --ion-color-primary-contrast-rgb: 255, 255, 255;\r\n    --ion-color-primary-shade: #417fc7;\r\n    --ion-color-primary-tint: #5c9ce5;\r\n  }\r\n  \r\n  ion-content {\r\n    --background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  }\r\n  \r\n  .register-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    padding: 20px;\r\n    color: #4a4a4a;\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 2.5rem;\r\n    margin-bottom: 10px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  h2 {\r\n    font-size: 1.8rem;\r\n    margin-bottom: 30px;\r\n    color: var(--ion-color-primary);\r\n  }\r\n  \r\n  form {\r\n    width: 100%;\r\n    max-width: 400px;\r\n  }\r\n  \r\n  ion-item {\r\n    --background: rgba(255, 255, 255, 0.1);\r\n    --border-color: rgba(255, 255, 255, 0.5);\r\n    --highlight-height: 0;\r\n    border-radius: 5px;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  ion-label {\r\n    color: #4a4a4a;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  ion-input {\r\n    --padding-start: 10px;\r\n    font-size: 16px;\r\n    --placeholder-color: #999;\r\n    --placeholder-opacity: 0.8;\r\n  }\r\n  \r\n  ion-button {\r\n    margin-top: 30px;\r\n    height: 54px;\r\n    font-size: 18px;\r\n    text-transform: none;\r\n    --box-shadow: 0 4px 10px rgba(74, 144, 226, 0.3);\r\n    --border-radius: 27px;\r\n  }\r\n  \r\n  .login-link {\r\n    margin-top: 20px;\r\n    color: var(--ion-color-primary-tint);\r\n    font-size: 16px;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    display: block;\r\n    \r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    h1 {\r\n      font-size: 2rem;\r\n    }\r\n  \r\n    h2 {\r\n      font-size: 24px;\r\n      margin-bottom: 25px;\r\n      color: var(--ion-color-primary-tint);\r\n    }\r\n    \r\n    ion-button {\r\n      font-size: 16px;\r\n      height: 50px;\r\n    }\r\n  }\r\n  \r\n  // Animaciones\r\n  @keyframes fadeInUp {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate3d(0, 30px, 0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate3d(0, 0, 0);\r\n    }\r\n  }\r\n  \r\n  .register-container > * {\r\n    animation: fadeInUp 0.5s ease-out;\r\n    animation-fill-mode: both;\r\n  }\r\n  \r\n  .register-container > *:nth-child(1) { animation-delay: 0.1s; }\r\n  .register-container > *:nth-child(2) { animation-delay: 0.2s; }\r\n  .register-container > *:nth-child(3) { animation-delay: 0.3s; }\r\n  .register-container > *:nth-child(4) { animation-delay: 0.4s; }\r\n  .register-container > *:nth-child(5) { animation-delay: 0.5s; }",
        "register.page.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { RegisterPage } from './register.page';\r\n\r\ndescribe('RegisterPage', () => {\r\n  let component: RegisterPage;\r\n  let fixture: ComponentFixture<RegisterPage>;\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(RegisterPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
        "register.page.ts": "import { Component, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseService } from '../services/database.service';\r\nimport { ToastController, LoadingController } from '@ionic/angular';\r\nimport { User } from '../models/user.model';\r\nimport { Subscription, Observable, from } from 'rxjs';\r\nimport { mergeMap, map } from 'rxjs/operators';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.page.html',\r\n  styleUrls: ['./register.page.scss'],\r\n})\r\nexport class RegisterPage implements OnDestroy {\r\n  showToast: boolean = false;\r\n  toastMessage: string = '';\r\n  name: string = '';\r\n  email: string = '';\r\n  password: string = '';\r\n  confirmPassword: string = '';\r\n\r\n  private subscriptions: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private databaseService: DatabaseService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController\r\n  ) {}\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  async onSubmit() {\r\n    console.log('Iniciando proceso de registro');\r\n    if (!this.isFormValid()) {\r\n      await this.presentToast('Por favor, complete todos los campos correctamente.');\r\n      return;\r\n    }\r\n  \r\n    if (this.password !== this.confirmPassword) {\r\n      await this.presentToast('Las contraseñas no coinciden.');\r\n      return;\r\n    }\r\n  \r\n    const loading = await this.loadingController.create({\r\n      message: 'Registrando usuario...',\r\n    });\r\n    await loading.present();\r\n  \r\n    try {\r\n      console.log('Verificando usuario existente');\r\n      const existingUser = await firstValueFrom(this.databaseService.getUserByEmail(this.email));\r\n      if (existingUser) {\r\n        console.log('Usuario ya existe');\r\n        await this.presentToast('El email ya está registrado. Por favor, use otro.');\r\n        return;\r\n      }\r\n  \r\n      console.log('Creando nuevo usuario');\r\n      const newUser: User = {\r\n        Name: this.name,\r\n        Email: this.email,\r\n        Password: this.password,\r\n        Role: 'employee',\r\n        Username: this.email,\r\n        ApprovalStatus: 'pending'\r\n      };\r\n      \r\n      console.log('Llamando a createUser');\r\n      const userId = await this.databaseService.createUser(newUser);\r\n      console.log('Usuario creado con ID:', userId);\r\n      if (userId) {\r\n        console.log('Registro exitoso');\r\n        await this.presentToast('Registro exitoso. Por favor, espere la aprobación del administrador.');\r\n        this.router.navigate(['/login']);\r\n      } else {\r\n        console.log('Fallo en la creación del usuario');\r\n        throw new Error('Failed to create user');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error durante el registro:', error);\r\n      await this.presentToast('Ocurrió un error durante el registro. Por favor, intente de nuevo.');\r\n    } finally {\r\n      console.log('Proceso de registro finalizado');\r\n      await loading.dismiss(); // Asegúrate de cerrar el loading spinner aquí\r\n    }\r\n  }\r\n  private isFormValid(): boolean {\r\n    return !!(this.name && this.email && this.password && this.confirmPassword);\r\n  }\r\n\r\n  private getUserByEmail(email: string): Promise<User | null> {\r\n    const result = this.databaseService.getUserByEmail(email);\r\n    \r\n    if (result instanceof Observable) {\r\n      return result.toPromise().then(res => res !== undefined ? res : null);\r\n    }\r\n  \r\n    return Promise.resolve(result !== undefined ? result : null);\r\n  }\r\n\r\n  private async createUser(user: User): Promise<number | undefined> {\r\n    try {\r\n      const result = await this.databaseService.createUser(user);\r\n      // Si el resultado es null, lo convertimos a undefined\r\n      return result !== null ? result : undefined;\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async presentToast(message: string) {\r\n    const toast = await this.toastController.create({\r\n      message: message,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    await toast.present();\r\n  }\r\n}"
      },
      "services": {
        "database.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { DatabaseService } from './database.service';\r\n\r\ndescribe('DatabaseService', () => {\r\n  let service: DatabaseService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(DatabaseService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "database.service.ts": "import { Injectable } from '@angular/core';\r\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\r\nimport { AlertController, Platform } from '@ionic/angular';\r\nimport { BehaviorSubject, Observable, from } from 'rxjs';\r\nimport { map, catchError, switchMap } from 'rxjs/operators';\r\nimport { User } from '../models/user.model';\r\nimport { of, firstValueFrom, forkJoin } from 'rxjs';\r\nimport { Product } from '../models/product.model';\r\nimport { Order } from '../models/order.model';\r\nimport { OrderDetail } from '../models/order-detail.model';\r\nimport { Plugins } from '@capacitor/core';\r\nconst { Console } = Plugins;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatabaseService {\r\n  private database!: SQLiteObject;\r\n  private dbReady: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  constructor(\r\n    private platform: Platform, \r\n    private sqlite: SQLite,\r\n    private alertController: AlertController\r\n  ) {\r\n    this.platform.ready().then(() => {\r\n      this.initializeDatabase();\r\n    });\r\n  }\r\n\r\n  async initializeDatabase() {\r\n    try {\r\n      this.database = await this.sqlite.create({\r\n        name: 'cafeteria.db',\r\n        location: 'default'\r\n      });\r\n\r\n      await this.createTablesIfNotExist();\r\n      await this.insertSeedDataIfEmpty();\r\n      this.dbReady.next(true);\r\n    } catch (error) {\r\n      console.error('Error initializing database', error);\r\n      this.presentAlert('Error', 'Failed to initialize the database. Please try again.');\r\n    }\r\n  }\r\n\r\n  async createTablesIfNotExist() {\r\n    const tables = [this.tableUsers, this.tableProducts, this.tableOrders, this.tableOrderDetails, this.tableSalesReports];\r\n    for (const table of tables) {\r\n      await this.database.executeSql(table, []);\r\n    }\r\n  }\r\n\r\n  async getUserCount(): Promise<number> {\r\n    const result = await this.database.executeSql('SELECT COUNT(*) as count FROM Users', []);\r\n    return result.rows.item(0).count;\r\n  }\r\n\r\n  async insertSeedDataIfEmpty() {\r\n    const userCount = await this.getUserCount();\r\n    if (userCount === 0) {\r\n      await firstValueFrom(this.insertSeedData());\r\n    }\r\n  }\r\n\r\n  // Tablas\r\n  tableUsers: string = `\r\n  CREATE TABLE IF NOT EXISTS Users (\r\n    UserID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    Username TEXT NOT NULL UNIQUE,\r\n    Password TEXT NOT NULL,\r\n    Role TEXT NOT NULL CHECK (Role IN ('employee', 'admin', 'manager')),\r\n    Name TEXT NOT NULL,\r\n    Email TEXT UNIQUE,\r\n    PhoneNumber TEXT,\r\n    HireDate DATE,\r\n    LastLogin DATETIME,\r\n    ApprovalStatus TEXT NOT NULL CHECK (ApprovalStatus IN ('pending', 'approved', 'rejected'))\r\n  );`;\r\n\r\n  tableProducts: string = `\r\n    CREATE TABLE IF NOT EXISTS Products (\r\n      ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n      Name TEXT NOT NULL,\r\n      Description TEXT,\r\n      Price REAL NOT NULL,\r\n      Category TEXT NOT NULL,\r\n      ImageURL TEXT,\r\n      IsAvailable BOOLEAN DEFAULT 1,\r\n      CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n      UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP\r\n    );`;\r\n\r\n  tableOrders: string = `\r\n    CREATE TABLE IF NOT EXISTS Orders (\r\n      OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n      UserID INTEGER,\r\n      TableNumber INTEGER,\r\n      Status TEXT NOT NULL CHECK (Status IN ('Solicitado', 'En proceso', 'Listo', 'Cancelado', 'Entregado')),\r\n      CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n      UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n      Notes TEXT,\r\n      TotalAmount REAL NOT NULL,\r\n      PaymentMethod TEXT,\r\n      FOREIGN KEY (UserID) REFERENCES Users(UserID)\r\n    );`;\r\n\r\n  tableOrderDetails: string = `\r\n    CREATE TABLE IF NOT EXISTS OrderDetails (\r\n      OrderDetailID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n      OrderID INTEGER,\r\n      ProductID INTEGER,\r\n      Quantity INTEGER NOT NULL,\r\n      Size TEXT,\r\n      MilkType TEXT,\r\n      Price REAL NOT NULL,\r\n      FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),\r\n      FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\r\n    );`;\r\n\r\n  tableSalesReports: string = `\r\n    CREATE TABLE IF NOT EXISTS SalesReports (\r\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    StartDate DATE NOT NULL,\r\n    EndDate DATE NOT NULL,\r\n    TotalSales REAL NOT NULL,\r\n    TotalOrders INTEGER NOT NULL,\r\n    CanceledOrders INTEGER NOT NULL,\r\n    CanceledSales REAL NOT NULL,\r\n    TopSellingProducts TEXT NOT NULL,\r\n    DailySales TEXT NOT NULL,\r\n    GeneratedBy INTEGER,\r\n    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (GeneratedBy) REFERENCES Users(UserID)\r\n    );`;\r\n\r\n  // BehaviorSubjects para los listados\r\n  private users = new BehaviorSubject<User[]>([]);\r\n  private products = new BehaviorSubject<Product[]>([]);\r\n  private orders = new BehaviorSubject<Order[]>([]);\r\n\r\n  // Observable para el estado de la base de datos\r\n  private isDBReady: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  \r\n\r\n  async presentAlert(titulo: string, msj: string) {\r\n    const alert = await this.alertController.create({\r\n      header: titulo,\r\n      message: msj,\r\n      buttons: ['OK'],\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  // Observables\r\n  dbState() {\r\n    return this.isDBReady.asObservable();\r\n  }\r\n\r\n  fetchUsers(): Observable<User[]> {\r\n    return this.users.asObservable();\r\n  }\r\n\r\n  fetchProducts(): Observable<Product[]> {\r\n    return this.products.asObservable();\r\n  }\r\n\r\n  fetchOrders(): Observable<Order[]> {\r\n    return this.orders.asObservable();\r\n  }\r\n\r\n  async createTables() {\r\n    try {\r\n      await this.database.executeSql('DROP TABLE IF EXISTS Users', []);\r\n      await this.database.executeSql('DROP TABLE IF EXISTS Products', []);\r\n      await this.database.executeSql('DROP TABLE IF EXISTS Orders', []);\r\n      await this.database.executeSql('DROP TABLE IF EXISTS OrderDetails', []);\r\n      await this.database.executeSql('DROP TABLE IF EXISTS SalesReports', []);\r\n  \r\n      await this.database.executeSql(this.tableUsers, []);\r\n      await this.database.executeSql(this.tableProducts, []);\r\n      await this.database.executeSql(this.tableOrders, []);\r\n      await this.database.executeSql(this.tableOrderDetails, []);\r\n      await this.database.executeSql(this.tableSalesReports, []);\r\n  \r\n      await this.insertSeedData().toPromise();\r\n  \r\n      this.loadInitialData();\r\n      this.isDBReady.next(true);\r\n    } catch (e) {\r\n      this.presentAlert('Creación de Tablas', 'Error al crear las tablas: ' + JSON.stringify(e));\r\n    }\r\n  }\r\n\r\n  // Cargar datos iniciales\r\n  loadInitialData() {\r\n    forkJoin([\r\n      this.getAllUsers(),\r\n      this.getAllProducts(),\r\n      this.getOrdersByStatus(['Solicitado', 'En proceso', 'Listo'])\r\n    ]).subscribe({\r\n      next: ([users, products, orders]) => {\r\n        this.users.next(users);\r\n        this.products.next(products);\r\n        this.orders.next(orders);\r\n        console.log('Initial data loaded successfully');\r\n      },\r\n      error: error => console.error('Error loading initial data:', error)\r\n    });\r\n  }\r\n\r\n  // Métodos CRUD para Users\r\n  async createUser(user: User): Promise<number | null> {\r\n    console.log('Iniciando creación de usuario en la base de datos');\r\n    try {\r\n      const result = await this.database.executeSql(\r\n        'INSERT INTO Users (Username, Password, Role, Name, Email, ApprovalStatus) VALUES (?, ?, ?, ?, ?, ?)',\r\n        [user.Username, user.Password, user.Role, user.Name, user.Email, user.ApprovalStatus]\r\n      );\r\n      console.log('Usuario insertado con éxito, ID:', result.insertId);\r\n      return result.insertId;\r\n    } catch (error: unknown) {\r\n      console.error('Error al crear usuario:', error);\r\n      if (error instanceof Error && error.message.includes('UNIQUE constraint failed: Users.Email')) {\r\n        console.log('Error de email duplicado');\r\n        return null;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n  getAllUsers(): Observable<User[]> {\r\n    return from(this.database.executeSql('SELECT * FROM Users', [])).pipe(\r\n      map(data => {\r\n        let users: User[] = [];\r\n        for (let i = 0; i < data.rows.length; i++) {\r\n          users.push(data.rows.item(i));\r\n        }\r\n        return users;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPendingUsers(): Observable<User[]> {\r\n    return from(this.database.executeSql('SELECT * FROM Users WHERE ApprovalStatus = ?', ['pending'])).pipe(\r\n      map(data => {\r\n        let users: User[] = [];\r\n        for (let i = 0; i < data.rows.length; i++) {\r\n          users.push(data.rows.item(i));\r\n        }\r\n        return users;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateUserApprovalStatus(userId: number, status: 'approved' | 'rejected' | 'pending'): Observable<boolean> {\r\n    console.log(`Actualizando estado de aprobación para usuario ${userId} a ${status}`);\r\n    return from(this.database.executeSql(\r\n      'UPDATE Users SET ApprovalStatus = ? WHERE UserID = ?',\r\n      [status, userId]\r\n    )).pipe(\r\n      map(result => {\r\n        console.log('Resultado de la actualización:', result);\r\n        return result.rowsAffected > 0;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al actualizar el estado de aprobación:', error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n  // Métodos CRUD para Products\r\n  async createProduct(product: Product): Promise<number> {\r\n    const data = [product.name, product.description, product.price, product.category, product.imageURL, product.isAvailable ? 1 : 0];\r\n    const result = await this.database.executeSql('INSERT INTO Products (Name, Description, Price, Category, ImageURL, IsAvailable) VALUES (?, ?, ?, ?, ?, ?)', data);\r\n    this.getAllProducts();\r\n    return result.insertId;\r\n  }\r\n\r\n  getAllProducts(): Observable<Product[]> {\r\n    console.log('Obteniendo todos los productos...');\r\n    return from(this.database.executeSql('SELECT * FROM Products', [])).pipe(\r\n      map(data => {\r\n        console.log('Resultado de la consulta de productos:', JSON.stringify(data));\r\n        let products: Product[] = [];\r\n        \r\n        for (let i = 0; i < data.rows.length; i++) {\r\n          let item = data.rows.item(i);\r\n          console.log('Producto individual:', JSON.stringify(item));\r\n          \r\n          const product: Product = {\r\n            id: item.ProductID,\r\n            name: item.Name,\r\n            description: item.Description,\r\n            price: item.Price,\r\n            category: item.Category,\r\n            imageURL: item.ImageURL,\r\n            isAvailable: item.IsAvailable === 1\r\n          };\r\n          products.push(product);\r\n        }\r\n        \r\n        console.log('Productos procesados:', JSON.stringify(products));\r\n        return products;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al obtener productos:', error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Métodos para Orders\r\n  async createOrder(order: Order): Promise<number> {\r\n    const data = [order.userId, order.tableNumber, order.status, order.notes, order.totalAmount, order.paymentMethod];\r\n    const result = await this.database.executeSql('INSERT INTO Orders (UserID, TableNumber, Status, Notes, TotalAmount, PaymentMethod) VALUES (?, ?, ?, ?, ?, ?)', data);\r\n    this.getOrdersByStatus(['Solicitado', 'En proceso', 'Listo']);\r\n    return result.insertId;\r\n  }\r\n\r\n  getOrdersByStatus(statuses: string[]): Observable<Order[]> {\r\n    const placeholders = statuses.map(() => '?').join(',');\r\n    return from(this.database.executeSql(`SELECT * FROM Orders WHERE Status IN (${placeholders})`, statuses)).pipe(\r\n      map(data => {\r\n        let orders: Order[] = [];\r\n        for (let i = 0; i < data.rows.length; i++) {\r\n          orders.push({\r\n            ...data.rows.item(i),\r\n            id: data.rows.item(i).OrderID,\r\n            status: data.rows.item(i).Status,\r\n            tableNumber: data.rows.item(i).TableNumber\r\n          });\r\n        }\r\n        return orders;\r\n      })\r\n    );\r\n  }\r\n  \r\n  async getOrdersCount(statuses: string[]): Promise<number> {\r\n    const placeholders = statuses.map(() => '?').join(',');\r\n    const query = `SELECT COUNT(*) as count FROM Orders WHERE Status IN (${placeholders})`;\r\n    const result = await this.database.executeSql(query, statuses);\r\n    return result.rows.item(0).count;\r\n  }\r\n  // Método de autenticación\r\n  async authenticateUser(email: string, password: string): Promise<User | null> {\r\n    console.log('Intentando autenticar usuario:', email);\r\n    try {\r\n      const query = 'SELECT * FROM Users WHERE Email = ?';\r\n      const result = await this.database.executeSql(query, [email]);\r\n      console.log('Resultado de la consulta:', JSON.stringify(result));\r\n  \r\n      if (result.rows.length > 0) {\r\n        const user = result.rows.item(0);\r\n        console.log('Usuario encontrado:', JSON.stringify(user));\r\n        if (user.Password === password) {\r\n          console.log('Contraseña correcta');\r\n          if (user.ApprovalStatus === 'approved') {\r\n            console.log('Usuario aprobado');\r\n            return user;\r\n          } else {\r\n            console.log('Usuario no aprobado. Estado:', user.ApprovalStatus);\r\n            return null;\r\n          }\r\n        } else {\r\n          console.log('Contraseña incorrecta');\r\n        }\r\n      } else {\r\n        console.log('No se encontró usuario con ese email');\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error durante la autenticación:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n  pdateProduct(product: Product): Promise<boolean> | Observable<any> {\r\n    const data = [product.name, product.description, product.price, product.category, product.imageURL, product.isAvailable ? 1 : 0, product.id];\r\n    return from(this.database.executeSql('UPDATE Products SET Name = ?, Description = ?, Price = ?, Category = ?, ImageURL = ?, IsAvailable = ? WHERE ProductID = ?', data))\r\n      .pipe(\r\n        map(() => {\r\n          this.getAllProducts();\r\n          return true;\r\n        })\r\n      );\r\n  }\r\n\r\n  // Método para calcular ventas totales\r\n  async calculateTotalSales(startDate: string, endDate: string, statuses: string[] = ['Solicitado', 'En proceso', 'Listo', 'Entregado']): Promise<number> {\r\n    const placeholders = statuses.map(() => '?').join(',');\r\n    const query = `\r\n      SELECT SUM(TotalAmount) as TotalSales \r\n      FROM Orders \r\n      WHERE DATE(CreatedAt) BETWEEN ? AND ? \r\n      AND Status IN (${placeholders})\r\n    `;\r\n    const params = [startDate, endDate, ...statuses];\r\n    \r\n    try {\r\n      const data = await this.database.executeSql(query, params);\r\n      return data.rows.item(0).TotalSales || 0;\r\n    } catch (error) {\r\n      console.error('Error al calcular ventas totales:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Método para obtener productos más vendidos\r\n  async getTopSellingProducts(limit: number = 5): Promise<{productId: number, name: string, totalSold: number}[]> {\r\n    const query = `\r\n      SELECT \r\n        p.ProductID as productId, \r\n        p.Name as name, \r\n        SUM(od.Quantity) as totalSold\r\n      FROM OrderDetails od\r\n      JOIN Products p ON od.ProductID = p.ProductID\r\n      GROUP BY od.ProductID\r\n      ORDER BY totalSold DESC\r\n      LIMIT ?\r\n    `;\r\n    const data = await this.database.executeSql(query, [limit]);\r\n    let topProducts: {productId: number, name: string, totalSold: number}[] = [];\r\n    if (data.rows.length > 0) {\r\n      for (let i = 0; i < data.rows.length; i++) {\r\n        topProducts.push(data.rows.item(i));\r\n      }\r\n    }\r\n    return topProducts;\r\n  }\r\n\r\n  addProductToOrder(orderDetail: OrderDetail): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      const sql = 'INSERT INTO OrderDetails (OrderID, ProductID, Quantity, Size, MilkType, Price) VALUES (?, ?, ?, ?, ?, ?)';\r\n      const values = [orderDetail.orderId, orderDetail.productId, orderDetail.quantity, orderDetail.size, orderDetail.milkType, orderDetail.price];\r\n      \r\n      this.database.executeSql(sql, values)\r\n        .then(data => {\r\n          resolve(data.insertId);\r\n        })\r\n        .catch(error => {\r\n          reject(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  getOrderDetails(orderId: number): Observable<OrderDetail[]> {\r\n    return from(this.database.executeSql(`\r\n      SELECT od.*, p.Name, p.ImageURL \r\n      FROM OrderDetails od\r\n      LEFT JOIN Products p ON od.ProductID = p.ProductID\r\n      WHERE od.OrderID = ?\r\n    `, [orderId])).pipe(\r\n      map(data => {\r\n        let orderDetails: OrderDetail[] = [];\r\n        for (let i = 0; i < data.rows.length; i++) {\r\n          const item = data.rows.item(i);\r\n          orderDetails.push({\r\n            id: item.OrderDetailID,\r\n            orderId: item.OrderID,\r\n            productId: item.ProductID,\r\n            quantity: item.Quantity,\r\n            size: item.Size,\r\n            milkType: item.MilkType,\r\n            price: item.Price,\r\n            name: item.Name || 'Producto desconocido',\r\n            image: item.ImageURL || 'assets/default-product-image.jpg'\r\n          });\r\n        }\r\n        return orderDetails;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateOrderStatus(orderId: number, status: string): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      const sql = 'UPDATE Orders SET Status = ? WHERE OrderID = ?';\r\n      this.database.executeSql(sql, [status, orderId])\r\n        .then(() => {\r\n          observer.next(true);\r\n          observer.complete();\r\n        })\r\n        .catch(e => observer.error(e));\r\n    });\r\n  }\r\n\r\n  updateProduct(product: Product): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      const sql = 'UPDATE Products SET Name = ?, Description = ?, Price = ?, Category = ?, ImageURL = ?, IsAvailable = ? WHERE ProductID = ?';\r\n      const data = [product.name, product.description, product.price, product.category, product.imageURL, product.isAvailable ? 1 : 0, product.id];\r\n      \r\n      this.database.executeSql(sql, data)\r\n        .then(() => {\r\n          observer.next(true);\r\n          observer.complete();\r\n        })\r\n        .catch(e => observer.error(e));\r\n    });\r\n  }\r\n\r\n  deleteProduct(id: number): Promise<boolean> | Observable<any> {\r\n    return from(this.database.executeSql('DELETE FROM Products WHERE ProductID = ?', [id]))\r\n      .pipe(\r\n        map(() => {\r\n          this.getAllProducts();\r\n          return true;\r\n        })\r\n      );\r\n  }\r\n  public updateUserFromDb(user: User): Promise<boolean> {\r\n    const sql = 'UPDATE Users SET Username = ?, Name = ?, Email = ? WHERE UserID = ?';\r\n    const data = [user.Username, user.Name, user.Email, user.UserID];\r\n  \r\n    const result = new Observable<boolean>(observer => {\r\n      this.database.executeSql(sql, data)\r\n        .then(() => {\r\n          observer.next(true);\r\n          observer.complete();\r\n        })\r\n        .catch(error => {\r\n          observer.error(error);\r\n        });\r\n    });\r\n  \r\n    return result.pipe(\r\n      map(() => true),\r\n      catchError(() => of(false))\r\n    )\r\n    .toPromise()\r\n    .then(res => res !== undefined ? res : false);\r\n  }\r\n  \r\n\r\n  deleteUser(id: number): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      const sql = 'DELETE FROM Users WHERE UserID = ?';\r\n      this.database.executeSql(sql, [id])\r\n        .then(() => {\r\n          observer.next(true);\r\n          observer.complete();\r\n        })\r\n        .catch(e => observer.error(e));\r\n    });\r\n  }\r\n\r\n  updateUserLastLogin(userId: number): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      const sql = 'UPDATE Users SET LastLogin = CURRENT_TIMESTAMP WHERE UserID = ?';\r\n      this.database.executeSql(sql, [userId])\r\n        .then(() => {\r\n          observer.next(true);\r\n          observer.complete();\r\n        })\r\n        .catch(e => observer.error(e));\r\n    });\r\n  }\r\n\r\n  getUserById(id: number): Observable<User> {\r\n    return new Observable(observer => {\r\n      const sql = 'SELECT * FROM Users WHERE UserID = ?';\r\n      this.database.executeSql(sql, [id])\r\n        .then(data => {\r\n          if (data.rows.length > 0) {\r\n            observer.next(data.rows.item(0));\r\n          } else {\r\n            observer.error('User not found');\r\n          }\r\n          observer.complete();\r\n        })\r\n        .catch(e => observer.error(e));\r\n    });\r\n  }\r\n\r\n  getUserByEmail(email: string): Observable<User | null> {\r\n    return from(this.database.executeSql('SELECT * FROM Users WHERE Email = ?', [email])).pipe(\r\n      map(data => {\r\n        if (data.rows.length > 0) {\r\n          return {\r\n            UserID: data.rows.item(0).UserID,\r\n            Username: data.rows.item(0).Username,\r\n            Password: data.rows.item(0).Password,\r\n            Role: data.rows.item(0).Role,\r\n            Name: data.rows.item(0).Name,\r\n            Email: data.rows.item(0).Email,\r\n            PhoneNumber: data.rows.item(0).PhoneNumber,\r\n            HireDate: data.rows.item(0).HireDate ? new Date(data.rows.item(0).HireDate) : undefined,\r\n            LastLogin: data.rows.item(0).LastLogin ? new Date(data.rows.item(0).LastLogin) : undefined,\r\n            ApprovalStatus: data.rows.item(0).ApprovalStatus\r\n          };\r\n        }\r\n        return null;\r\n      })\r\n    );\r\n  }\r\n  updateUserPassword(userId: number, currentPassword: string, newPassword: string): Observable<boolean> {\r\n    const sql = 'UPDATE Users SET Password = ? WHERE UserID = ? AND Password = ?';\r\n    const data = [newPassword, userId, currentPassword];\r\n  \r\n    return new Observable(observer => {\r\n      this.database.executeSql(sql, data)\r\n        .then(() => {\r\n          observer.next(true);  // Si la operación fue exitosa\r\n          observer.complete();\r\n        })\r\n        .catch(error => {\r\n          observer.error(error);  // Si hay un error, lo emitimos\r\n        });\r\n    });\r\n  }\r\n\r\n  // Método para insertar datos de prueba\r\n\r\n\r\ninsertSeedData(): Observable<boolean> {\r\n    const users = [\r\n      { username: 'admin', password: 'admin123', role: 'admin', name: 'Admin User', email: 'admin@example.com', approvalStatus: 'approved' },\r\n      { username: 'employee1', password: 'emp123', role: 'employee', name: 'Employee One', email: 'emp1@example.com', approvalStatus: 'approved' }\r\n    ];\r\n  \r\n    const products = [\r\n      { name: 'Café Americano', description: 'Café negro tradicional', price: 2500, category: 'Bebidas calientes', imageURL: 'americano.jpg', isAvailable: true },\r\n      { name: 'Cappuccino', description: 'Espresso con leche espumosa', price: 3000, category: 'Bebidas calientes', imageURL: 'cappuccino.jpg', isAvailable: true },\r\n      { name: 'Latte', description: 'Café con leche cremosa', price: 3200, category: 'Bebidas calientes', imageURL: 'latte.jpg', isAvailable: true },\r\n    ];\r\n  \r\n    return forkJoin([\r\n      ...users.map(user => \r\n        from(this.database.executeSql(\r\n          'INSERT OR IGNORE INTO Users (Username, Password, Role, Name, Email, ApprovalStatus) VALUES (?, ?, ?, ?, ?, ?)', \r\n          [user.username, user.password, user.role, user.name, user.email, user.approvalStatus]\r\n        ))\r\n      ),\r\n      ...products.map(product => \r\n        from(this.database.executeSql(\r\n          'INSERT OR IGNORE INTO Products (Name, Description, Price, Category, ImageURL, IsAvailable) VALUES (?, ?, ?, ?, ?, ?)', \r\n          [product.name, product.description, product.price, product.category, product.imageURL, product.isAvailable ? 1 : 0]\r\n        ))\r\n      )\r\n    ]).pipe(\r\n      map(() => true),\r\n      catchError(error => {\r\n        console.error('Error in insertSeedData:', error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  getOrderCountForToday(): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const query = `SELECT COUNT(*) as count FROM Orders WHERE DATE(CreatedAt) = ?`;\r\n      this.database.executeSql(query, [today]).then(data => {\r\n        resolve(data.rows.item(0).count);\r\n      }, err => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  getActiveEmployeesCount(): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      const query = `SELECT COUNT(*) as count FROM Users WHERE Role = 'employee' AND LastLogin IS NOT NULL`;\r\n      this.database.executeSql(query, []).then(data => {\r\n        resolve(data.rows.item(0).count);\r\n      }, err => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  async getProductDetails(productName: string): Promise<any> {\r\n    const query = `\r\n      SELECT \r\n        p.Name as name,\r\n        SUM(od.Quantity) as totalSold,\r\n        SUM(od.Quantity * od.Price) as totalRevenue,\r\n        p.Stock as currentStock\r\n      FROM Products p\r\n      LEFT JOIN OrderDetails od ON p.ProductID = od.ProductID\r\n      WHERE p.Name = ?\r\n      GROUP BY p.ProductID\r\n    `;\r\n    \r\n    try {\r\n      const result = await this.database.executeSql(query, [productName]);\r\n      if (result.rows.length > 0) {\r\n        return result.rows.item(0);\r\n      } else {\r\n        throw new Error('Producto no encontrado');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener detalles del producto:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n}\r\n\r\n"
      }
    }
  }
}